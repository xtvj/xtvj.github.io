<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XTVJ</title>
  
  
  <link href="https://xtvj.github.io/atom.xml" rel="self"/>
  
  <link href="https://xtvj.github.io/"/>
  <updated>2022-02-22T01:21:16.642Z</updated>
  <id>https://xtvj.github.io/</id>
  
  <author>
    <name>xtvj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Kotlin阅读笔记</title>
    <link href="https://xtvj.github.io/2021/10/12/Kolin%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    <id>https://xtvj.github.io/2021/10/12/Kolin%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/</id>
    <published>2021-10-12T00:49:03.000Z</published>
    <updated>2022-02-22T01:21:16.642Z</updated>
    
    <content type="html"><![CDATA[<p>如果会Java，那Kotlin就很简单，直接用Kotlin写项目就熟悉了。</p><h4 id="硬关键字">硬关键字</h4><p>以下符号会始终解释为关键字，不能用作标识符：</p><ul><li><p>as</p><ul><li>用于<a href="https://www.kotlincn.net/docs/reference/typecasts.html#%E4%B8%8D%E5%AE%89%E5%85%A8%E7%9A%84%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6">类型转换</a></li><li>为<a href="https://www.kotlincn.net/docs/reference/packages.html#%E5%AF%BC%E5%85%A5">导入指定一个别名</a></li></ul></li><li><p><code>as?</code> 用于<a href="https://www.kotlincn.net/docs/reference/typecasts.html#%E5%AE%89%E5%85%A8%E7%9A%84%E5%8F%AF%E7%A9%BA%E8%BD%AC%E6%8D%A2%E6%93%8D%E4%BD%9C%E7%AC%A6">安全类型转换</a></p></li><li><p><code>break</code> <a href="https://www.kotlincn.net/docs/reference/returns.html">终止循环的执行</a></p></li><li><p><code>class</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/classes.html">类</a></p></li><li><p><code>continue</code> <a href="https://www.kotlincn.net/docs/reference/returns.html">继续最近层循环的下一步</a></p></li><li><p><code>do</code> 开始一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#while-%E5%BE%AA%E7%8E%AF">do/while 循环</a>（后置条件的循环）</p></li><li><p><code>else</code> 定义一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#if-%E8%A1%A8%E8%BE%BE%E5%BC%8F">if 表达式</a>条件为 false 时执行的分支</p></li><li><p><code>false</code> 指定<a href="https://www.kotlincn.net/docs/reference/basic-types.html#%E5%B8%83%E5%B0%94">布尔类型</a>的“假”值</p></li><li><p><code>for</code> 开始一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#for-%E5%BE%AA%E7%8E%AF">for 循环</a></p></li><li><p><code>fun</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/functions.html">函数</a></p></li><li><p><code>if</code> 开始一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#if-%E8%A1%A8%E8%BE%BE%E5%BC%8F">if 表达式</a></p></li><li><p>in</p><ul><li>指定在 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#for-%E5%BE%AA%E7%8E%AF">for 循环</a>中迭代的对象</li><li>用作中缀操作符以检测一个值属于<a href="https://www.kotlincn.net/docs/reference/ranges.html">一个区间</a>、 一个集合或者其他<a href="https://www.kotlincn.net/docs/reference/operator-overloading.html#in">定义“contains”方法</a>的实体</li><li>在 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li><li>将一个类型参数标记为<a href="https://www.kotlincn.net/docs/reference/generics.html#%E5%A3%B0%E6%98%8E%E5%A4%84%E5%9E%8B%E5%8F%98">逆变</a></li></ul></li><li><p>!in</p><ul><li>用作中缀操作符以检测一个值<strong>不</strong>属于<a href="https://www.kotlincn.net/docs/reference/ranges.html">一个区间</a>、 一个集合或者其他<a href="https://www.kotlincn.net/docs/reference/operator-overloading.html#in">定义“contains”方法</a>的实体</li><li>在 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li></ul></li><li><p><code>interface</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/interfaces.html">接口</a></p></li><li><p>is</p><ul><li>检测<a href="https://www.kotlincn.net/docs/reference/typecasts.html#is-%E4%B8%8E-is-%E6%93%8D%E4%BD%9C%E7%AC%A6">一个值具有指定类型</a></li><li>在 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li></ul></li><li><p>!is</p><ul><li>检测<a href="https://www.kotlincn.net/docs/reference/typecasts.html#is-%E4%B8%8E-is-%E6%93%8D%E4%BD%9C%E7%AC%A6">一个值<strong>不</strong>具有指定类型</a></li><li>在 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式中</a>用于上述目的</li></ul></li><li><p><code>null</code> 是表示不指向任何对象的对象引用的常量</p></li><li><p><code>object</code> 同时声明<a href="https://www.kotlincn.net/docs/reference/object-declarations.html">一个类及其实例</a></p></li><li><p><code>package</code> 指定<a href="https://www.kotlincn.net/docs/reference/packages.html">当前文件的包</a></p></li><li><p><code>return</code> <a href="https://www.kotlincn.net/docs/reference/returns.html">从最近层的函数或匿名函数返回</a></p></li><li><p>super</p><ul><li><a href="https://www.kotlincn.net/docs/reference/classes.html#%E8%B0%83%E7%94%A8%E8%B6%85%E7%B1%BB%E5%AE%9E%E7%8E%B0">引用一个方法或属性的超类实现</a></li><li><a href="https://www.kotlincn.net/docs/reference/classes.html#%E7%BB%A7%E6%89%BF">在次构造函数中调用超类构造函数</a></li></ul></li><li><p>this</p><ul><li>引用<a href="https://www.kotlincn.net/docs/reference/this-expressions.html">当前接收者</a></li><li><a href="https://www.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">在次构造函数中调用同一个类的另一个构造函数</a></li></ul></li><li><p><code>throw</code> <a href="https://www.kotlincn.net/docs/reference/exceptions.html">抛出一个异常</a></p></li><li><p><code>true</code> 指定<a href="https://www.kotlincn.net/docs/reference/basic-types.html#%E5%B8%83%E5%B0%94">布尔类型</a>的“真”值</p></li><li><p><code>try</code> <a href="https://www.kotlincn.net/docs/reference/exceptions.html">开始一个异常处理块</a></p></li><li><p><code>typealias</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/type-aliases.html">类型别名</a></p></li><li><p><code>typeof</code> 保留以供未来使用</p></li><li><p><code>val</code> 声明一个只读<a href="https://www.kotlincn.net/docs/reference/properties.html">属性</a>或<a href="https://www.kotlincn.net/docs/reference/basic-syntax.html#defining-variables">局部变量</a></p></li><li><p><code>var</code> 声明一个可变<a href="https://www.kotlincn.net/docs/reference/properties.html">属性</a>或<a href="https://www.kotlincn.net/docs/reference/basic-syntax.html#defining-variables">局部变量</a></p></li><li><p><code>when</code> 开始一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#when-%E8%A1%A8%E8%BE%BE%E5%BC%8F">when 表达式</a>（执行其中一个给定分支）</p></li><li><p><code>while</code> 开始一个 <a href="https://www.kotlincn.net/docs/reference/control-flow.html#while-%E5%BE%AA%E7%8E%AF">while 循环</a>（前置条件的循环）</p></li></ul><h4 id="软关键字">软关键字</h4><p>以下符号在适用的上下文中充当关键字，而在其他上下文中可用作标识符：</p><ul><li><p>by</p><ul><li><a href="https://www.kotlincn.net/docs/reference/delegation.html">将接口的实现委托给另一个对象</a></li><li><a href="https://www.kotlincn.net/docs/reference/delegated-properties.html">将属性访问器的实现委托给另一个对象</a></li></ul></li><li><p><code>catch</code> 开始一个<a href="https://www.kotlincn.net/docs/reference/exceptions.html">处理指定异常类型</a>的块</p></li><li><p><code>constructor</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">主构造函数或次构造函数</a></p></li><li><p><code>delegate</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>dynamic</code> 引用一个 Kotlin/JS 代码中的<a href="https://www.kotlincn.net/docs/reference/dynamic-type.html">动态类型</a></p></li><li><p><code>field</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>file</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>finally</code> 开始一个<a href="https://www.kotlincn.net/docs/reference/exceptions.html">当 try 块退出时总会执行的块</a></p></li><li><p>get</p><ul><li>声明<a href="https://www.kotlincn.net/docs/reference/properties.html#getters-%E4%B8%8E-setters">属性的 getter</a></li><li>用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></li></ul></li><li><p><code>import</code> <a href="https://www.kotlincn.net/docs/reference/packages.html">将另一个包中的声明导入当前文件</a></p></li><li><p><code>init</code> 开始一个<a href="https://www.kotlincn.net/docs/reference/classes.html#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0">初始化块</a></p></li><li><p><code>param</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>property</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>receiver</code>用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p>set</p><ul><li>声明<a href="https://www.kotlincn.net/docs/reference/properties.html#getters-%E4%B8%8E-setters">属性的 setter</a></li><li>用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></li></ul></li><li><p><code>setparam</code> 用作<a href="https://www.kotlincn.net/docs/reference/annotations.html#%E6%B3%A8%E8%A7%A3%E4%BD%BF%E7%94%A8%E5%A4%84%E7%9B%AE%E6%A0%87">注解使用处目标</a></p></li><li><p><code>where</code> 指定<a href="https://www.kotlincn.net/docs/reference/generics.html#%E4%B8%8A%E7%95%8C">泛型类型参数的约束</a></p></li></ul><h4 id="修饰符关键字">修饰符关键字</h4><p>以下符号作为声明中修饰符列表中的关键字，并可用作其他上下文中的标识符：</p><ul><li><code>actual</code> 表示<a href="https://www.kotlincn.net/docs/reference/multiplatform.html">多平台项目</a>中的一个平台相关实现</li><li><code>abstract</code> 将一个类或成员标记为<a href="https://www.kotlincn.net/docs/reference/classes.html#%E6%8A%BD%E8%B1%A1%E7%B1%BB">抽象</a></li><li><code>annotation</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/annotations.html">注解类</a></li><li><code>companion</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/object-declarations.html#%E4%BC%B4%E7%94%9F%E5%AF%B9%E8%B1%A1">伴生对象</a></li><li><code>const</code> 将属性标记为<a href="https://www.kotlincn.net/docs/reference/properties.html#%E7%BC%96%E8%AF%91%E6%9C%9F%E5%B8%B8%E9%87%8F">编译期常量</a></li><li><code>crossinline</code> 禁止<a href="https://www.kotlincn.net/docs/reference/inline-functions.html#%E9%9D%9E%E5%B1%80%E9%83%A8%E8%BF%94%E5%9B%9E">传递给内联函数的 lambda 中的非局部返回</a></li><li><code>data</code> 指示编译器<a href="https://www.kotlincn.net/docs/reference/data-classes.html">为类生成典型成员</a></li><li><code>enum</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/enum-classes.html">枚举</a></li><li><code>expect</code> 将一个声明标记为<a href="https://www.kotlincn.net/docs/reference/multiplatform.html">平台相关</a>，并期待在平台模块中实现。</li><li><code>external</code> 将一个声明标记为不是在 Kotlin 中实现（通过 <a href="https://www.kotlincn.net/docs/reference/java-interop.html#%E5%9C%A8-kotlin-%E4%B8%AD%E4%BD%BF%E7%94%A8-jni">JNI</a> 访问或者在 <a href="https://www.kotlincn.net/docs/reference/js-interop.html#external-%E4%BF%AE%E9%A5%B0%E7%AC%A6">JavaScript</a> 中实现）</li><li><code>final</code> 禁止<a href="https://www.kotlincn.net/docs/reference/classes.html#%E8%A6%86%E7%9B%96%E6%96%B9%E6%B3%95">成员覆盖</a></li><li><code>infix</code> 允许以<a href="https://www.kotlincn.net/docs/reference/functions.html#%E4%B8%AD%E7%BC%80%E8%A1%A8%E7%A4%BA%E6%B3%95">中缀表示法</a>调用函数</li><li><code>inline</code> 告诉编译器<a href="https://www.kotlincn.net/docs/reference/inline-functions.html">在调用处内联传给它的函数和 lambda 表达式</a></li><li><code>inner</code> 允许在<a href="https://www.kotlincn.net/docs/reference/nested-classes.html">嵌套类</a>中引用外部类实例</li><li><code>internal</code> 将一个声明标记为<a href="https://www.kotlincn.net/docs/reference/visibility-modifiers.html">在当前模块中可见</a></li><li><code>lateinit</code> 允许<a href="https://www.kotlincn.net/docs/reference/properties.html#%E5%BB%B6%E8%BF%9F%E5%88%9D%E5%A7%8B%E5%8C%96%E5%B1%9E%E6%80%A7%E4%B8%8E%E5%8F%98%E9%87%8F">在构造函数之外初始化非空属性</a></li><li><code>noinline</code> 关闭<a href="https://www.kotlincn.net/docs/reference/inline-functions.html#%E7%A6%81%E7%94%A8%E5%86%85%E8%81%94">传给内联函数的 lambda 表达式的内联</a></li><li><code>open</code> 允许<a href="https://www.kotlincn.net/docs/reference/classes.html#%E7%BB%A7%E6%89%BF">一个类子类化或覆盖成员</a></li><li><code>operator</code> 将一个函数标记为<a href="https://www.kotlincn.net/docs/reference/operator-overloading.html">重载一个操作符或者实现一个约定</a></li><li><code>out</code> 将类型参数标记为<a href="https://www.kotlincn.net/docs/reference/generics.html#%E5%A3%B0%E6%98%8E%E5%A4%84%E5%9E%8B%E5%8F%98">协变</a></li><li><code>override</code> 将一个成员标记为<a href="https://www.kotlincn.net/docs/reference/classes.html#%E8%A6%86%E7%9B%96%E6%96%B9%E6%B3%95">超类成员的覆盖</a></li><li><code>private</code> 将一个声明标记为<a href="https://www.kotlincn.net/docs/reference/visibility-modifiers.html">在当前类或文件中可见</a></li><li><code>protected</code> 将一个声明标记为<a href="https://www.kotlincn.net/docs/reference/visibility-modifiers.html">在当前类及其子类中可见</a></li><li><code>public</code> 将一个声明标记为<a href="https://www.kotlincn.net/docs/reference/visibility-modifiers.html">在任何地方可见</a></li><li><code>reified</code> 将内联函数的类型参数标记为<a href="https://www.kotlincn.net/docs/reference/inline-functions.html#%E5%85%B7%E4%BD%93%E5%8C%96%E7%9A%84%E7%B1%BB%E5%9E%8B%E5%8F%82%E6%95%B0">在运行时可访问</a></li><li><code>sealed</code> 声明一个<a href="https://www.kotlincn.net/docs/reference/sealed-classes.html">密封类</a>（限制子类化的类）</li><li><code>suspend</code> 将一个函数或 lambda 表达式标记为挂起式（可用做<a href="https://www.kotlincn.net/docs/reference/coroutines.html">协程</a>）</li><li><code>tailrec</code> 将一个函数标记为<a href="https://www.kotlincn.net/docs/reference/functions.html#%E5%B0%BE%E9%80%92%E5%BD%92%E5%87%BD%E6%95%B0">尾递归</a>（允许编译器将递归替换为迭代）</li><li><code>vararg</code> 允许<a href="https://www.kotlincn.net/docs/reference/functions.html#%E5%8F%AF%E5%8F%98%E6%95%B0%E9%87%8F%E7%9A%84%E5%8F%82%E6%95%B0varargs">一个参数传入可变数量的参数</a></li></ul><h4 id="takeIf代码">takeIf代码</h4><pre class="language-kotlin" data-language="kotlin"><code class="language-kotlin"><span class="token comment">//原始代码</span><span class="token keyword">if</span>（someObject！<span class="token operator">=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> someObject<span class="token punctuation">.</span>status）<span class="token punctuation">&#123;</span>    doThis（）<span class="token punctuation">&#125;</span> <span class="token comment">//更好的代码</span><span class="token keyword">if</span>（someObject？<span class="token punctuation">.</span>status <span class="token operator">==</span> <span class="token boolean">true</span>）<span class="token punctuation">&#123;</span>    doThis（）<span class="token punctuation">&#125;</span><span class="token comment">//改进的代码</span>someObject？<span class="token punctuation">.</span><span class="token function">takeIf</span> <span class="token punctuation">&#123;</span>it<span class="token punctuation">.</span>status<span class="token punctuation">&#125;</span> <span class="token operator">?</span><span class="token punctuation">.</span> apply <span class="token punctuation">&#123;</span>doThis（）<span class="token punctuation">&#125;</span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果会Java，那Kotlin就很简单，直接用Kotlin写项目就熟悉了。&lt;/p&gt;
&lt;h4 id=&quot;硬关键字&quot;&gt;硬关键字&lt;/h4&gt;
&lt;p&gt;以下符号会始终解释为关键字，不能用作标识符：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用于&lt;a href=&quot;h</summary>
      
    
    
    
    <category term="android" scheme="https://xtvj.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
    <category term="Kotlin" scheme="https://xtvj.github.io/tags/Kotlin/"/>
    
  </entry>
  
  <entry>
    <title>RedmiAC2100在MacOS下编译相应固件及一些使用记录</title>
    <link href="https://xtvj.github.io/2021/06/29/RedmiAC2100%E5%9C%A8MacOS%E4%B8%8B%E7%BC%96%E8%AF%91%E7%9B%B8%E5%BA%94%E5%9B%BA%E4%BB%B6%E5%8F%8A%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2021/06/29/RedmiAC2100%E5%9C%A8MacOS%E4%B8%8B%E7%BC%96%E8%AF%91%E7%9B%B8%E5%BA%94%E5%9B%BA%E4%BB%B6%E5%8F%8A%E4%B8%80%E4%BA%9B%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</id>
    <published>2021-06-29T08:45:58.000Z</published>
    <updated>2022-02-22T01:09:49.246Z</updated>
    
    <content type="html"><![CDATA[<h4 id="坏块和刷机教程">坏块和刷机教程</h4><p>在淘宝上买的，到手后检测是东芝的闪存有三个坏块，直接找客服换货才发来一个<strong>ESMT闪存没坏块</strong>的。</p><p>检测和刷机教程网上一大堆，我用的是：<a href="https://www.right.com.cn/forum/thread-4054150-1-1.html">红米(小米)AC2100无需Telnet刷入Breed和Padavan固件教程</a>。</p><h4 id="使用终端连接路由器">使用终端连接路由器</h4><pre class="language-none"><code class="language-none">ssh root@192.168.1.1</code></pre><h4 id="终端与路由器之间传文件">终端与路由器之间传文件</h4><p>scp命令是在没连ssh状态下操作的。输入后要输入路由器的密码。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;复制当前目录下本地文件1到路由器tmp目录下并保存为文件2。scp 文件1 root@192.168.1.1:&#x2F;tmp&#x2F;文件2</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F;复制路由器tmp目录下文件2到当前目录并保存为文件1scp root@192.168.1.1:&#x2F;tmp&#x2F;文件2 文件1</code></pre><h4 id="Openwrt官方固件">Openwrt官方固件</h4><p>RedmiAC2100(<strong>架构ramips、处理器mt7621</strong>)：<a href="https://downloads.openwrt.org/">https://downloads.openwrt.org/</a></p><h4 id="Luci">Luci</h4><p>有无Luci的区别就是能不能在浏览器输入192.168.1.1来操作路由器</p><p>在终端里刷入<strong>squashfs-kernel1.bin和squashfs-rootfs0.bin</strong>的则<strong>没有Luci</strong></p><p>使用Breed刷入<strong>initramfs-kernel.bin</strong>的，则<strong>有Luci</strong>。</p><p>如果没有Luci又不会使用终端配置拨号上网的话，要用别的路由拨号正常上网，AC2100用网线连接介于正常路由与电脑之间后，再用ssh连接ac2100通过<code>opkg update &amp;&amp; opkg install luci</code>来安装Luci。</p><h4 id="Mac环境编译Openwrt">Mac环境编译Openwrt</h4><p><strong>官网目前没把MacOS放在支持的列表中</strong>。但自己喜欢这系统，决定试试，换到MacOS环境编译(11.4)</p><ol><li>使用<strong>磁盘工具</strong>创建一个<strong>区分大小写</strong>的虚拟盘</li><li>clone代码</li><li><strong>make工具换成GNU的make</strong>。</li><li>执行<code>./scripts/feeds update -a</code>后会在终端提示配置环境缺少哪些工具，我目前环境提示少了四个，使用brew search搜索这四个工具再安装就行了。</li><li><code>./scripts/feeds install -a</code></li><li><code>make menuconfig</code></li><li><code>make</code></li></ol><h5 id="报错一：">报错一：</h5><pre class="language-none"><code class="language-none">No rule to make target &#96;.config&#39;,blablablabla. Stop.</code></pre><p>找到一个<a href="https://www.right.com.cn/forum/thread-742118-1-1.html">说是依赖的东西没成功</a>下载。</p><p>在最后一步之前<strong>执行<code>make download V=s</code>等待下载完依赖</strong>，再执行make就能~~<em>成功编译</em>~~了。</p><h5 id="报错二：">报错二：</h5><p>使用make -j1 V=sc来编译并查看log发现提示说<strong>与VMware Fusion的环境变量冲突</strong>，期间还看到有人几年前用<a href="https://p3terx.com/archives/compiling-openwrt-with-macos.html">MacOS编译</a>过，于是卸载了虚拟机再试着~~<em>编译成功了。</em>~~</p><h5 id="报错三：">报错三：</h5><p>看了下生成的文件是默认的ath79架构，没有生成我需要的固件。</p><p>重新下载重新配置并编译，报错如图</p><img title="" src="https://xtvj.github.io/images/toplevel_error.jpg" alt="" style="zoom: 50%; margin: 0px auto;"><p>根据<a href="https://github.com/coolsnowwolf/lede/issues/4815">网友的方法</a>，试了下。成功编译并生成相应的固件了。</p><img src="https://xtvj.github.io/images/ac2100_success.png" style="zoom: 50%; margin: 0px auto;" /><h4 id="安装Adguard-Home：">安装Adguard Home：</h4><p>由于luci-app-adguard长时间不更新，使用时经常出问题，切换使用官方包安装，不再使用图形界面。</p><p>官方下载地址：<a href="https://github.com/AdguardTeam/AdGuardHome/releases">https://github.com/AdguardTeam/AdGuardHome/releases</a></p><p>英文安装教程地址：<a href="https://forum.openwrt.org/t/howto-running-adguard-home-on-openwrt/51678">https://forum.openwrt.org/t/howto-running-adguard-home-on-openwrt/51678</a></p><p>下载版本为： AdGuardHome_linux_mipsle_softfloat.tar.gz</p><h5 id="备忘：添加自定义防火墙">备忘：添加自定义防火墙</h5><pre class="language-none"><code class="language-none">iptables -t nat -A PREROUTING -i br-lan -p udp --dport 53 -j DNAT --to 192.168.1.1:5353iptables -t nat -A PREROUTING -i br-lan -p tcp --dport 53 -j DNAT --to 192.168.1.1:5353</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;坏块和刷机教程&quot;&gt;坏块和刷机教程&lt;/h4&gt;
&lt;p&gt;在淘宝上买的，到手后检测是东芝的闪存有三个坏块，直接找客服换货才发来一个&lt;strong&gt;ESMT闪存没坏块&lt;/strong&gt;的。&lt;/p&gt;
&lt;p&gt;检测和刷机教程网上一大堆，我用的是：&lt;a href=&quot;https://</summary>
      
    
    
    
    <category term="Linux" scheme="https://xtvj.github.io/categories/Linux/"/>
    
    
    <category term="Openwrt" scheme="https://xtvj.github.io/tags/Openwrt/"/>
    
  </entry>
  
  <entry>
    <title>使用youtube-dl下载视频、音频、播放列表中的多个视频或音频</title>
    <link href="https://xtvj.github.io/2020/11/22/%E4%BD%BF%E7%94%A8youtube-dl%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E3%80%81%E9%9F%B3%E9%A2%91%E3%80%81%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%A7%86%E9%A2%91%E6%88%96%E9%9F%B3%E9%A2%91/"/>
    <id>https://xtvj.github.io/2020/11/22/%E4%BD%BF%E7%94%A8youtube-dl%E4%B8%8B%E8%BD%BD%E8%A7%86%E9%A2%91%E3%80%81%E9%9F%B3%E9%A2%91%E3%80%81%E6%92%AD%E6%94%BE%E5%88%97%E8%A1%A8%E4%B8%AD%E7%9A%84%E5%A4%9A%E4%B8%AA%E8%A7%86%E9%A2%91%E6%88%96%E9%9F%B3%E9%A2%91/</id>
    <published>2020-11-22T10:39:02.000Z</published>
    <updated>2022-02-22T10:01:35.128Z</updated>
    
    <content type="html"><![CDATA[<p>​        以前找某个歌曲的音频文件找不到的时候就用网页版的工具下载过Youtube上的音乐。前几天Github封杀了youtbe-dl我才知道有这么个开源的命令行工具。使用了下感觉很好，打算当成日常使用工具特此记录下使用技巧。</p><p>​        官网：<a href="https://github.com/ytdl-org/youtube-dl#video-selection">https://github.com/ytdl-org/youtube-dl#video-selection</a></p><h3 id="安装"><strong>安装</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;安装brew install youtube-dl </code></pre><h3 id="以最优格式下载视频"><strong>以最优格式下载视频</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;以最优格式下载youtube视频，其它网站暂未测试，官方说Windows下换单引号为双引号youtube-dl -f &#39;bestvideo[ext&#x3D;mp4]+bestaudio[ext&#x3D;m4a]&#x2F;best[ext&#x3D;mp4]&#x2F;best&#39; 网址&#x2F;&#x2F;或者直接使用默认设置，一般会下载两个webm文件，分别为视频和音频，&#x2F;&#x2F;再自动合并成附带音轨的webm格式视频，测试发现也是最高分辨率，有4K就下4K版本youtube-dl 网址</code></pre><span id="more"></span><h3 id="以最优格式下载音频"><strong>以最优格式下载音频</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;默认下载音频为opus格式youtube-dl -x 网址&#x2F;&#x2F;下载mp3格式的音频youtube-dl -x --audio-format mp3 网址&#x2F;&#x2F;最优格式下载音频youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 网址</code></pre><img src="https://xtvj.github.io/images/youttube-dl下载最优音频.png" style="zoom: 100%;margin: 0 auto;" /><h3 id="下载播放列表中的视频"><strong>下载播放列表中的视频</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;使用默认，与下载单个视频格式一样youtbue-dl 播放列表网址&#x2F;&#x2F;可以使用选项--playlist-start, --playlist-end或者指定某个视频 --playlist-items&#x2F;&#x2F;--playlist-items 可设置多个值.如：&quot;--playlist-items 1,2,5 下载1、2、5项&#x2F;&#x2F;下载列表第二个及以后的所有视频youtube-dl --playstart-start 2 播放列表网址</code></pre><h3 id="限定分辨率下载播放列表中的视频"><strong>限定分辨率下载播放列表中的视频</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;以最高480P下载列表第22个及以后的所有视频youtube-dl --playlist-start 22 -f &#39;bestvideo[height&lt;&#x3D;480]+bestaudio&#x2F;best[height&lt;&#x3D;480]&#39; 播放列表网址</code></pre><h3 id="下载播放列表中视频的音轨"><strong>下载播放列表中视频的音轨</strong></h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;使用--playlist-start、--playlist-end、--playlist-items来限定&#x2F;&#x2F;最优格式下载播放列表中3-6这四个视频的音频文件，并转换成mp3格式youtube-dl -f bestaudio --extract-audio --audio-format mp3 --audio-quality 0 --playlist-start 3 --playlist-end 6 播放列表网址</code></pre><img src="https://xtvj.github.io/images/youtube-dl下载3-6音频.png" style="zoom: 100%;margin: 0 auto;" /><h3 id="常用视频下载步骤"><strong>常用视频下载步骤</strong></h3><p>列中视频可用音/视频格式</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;两种方式youtube-dl -F 网址youtube-dl --list-formats  网址</code></pre><p>选择要下载的格式</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;选择编号为136的格式youtube-dl -f 136 网址</code></pre><img src="https://xtvj.github.io/images/youtube-dl常用下载步骤.png" style="zoom: 100%;margin: 0 auto;" /><h3 id="Update-2021-02-20-调用aria2加速下载">Update:2021/02/20 调用aria2加速下载</h3><p>​        解决使用youtube-dl默认下载时常常断开连接的问题。</p><p><code>youtube-dl https://www.youtube.com/*** --external-downloader aria2c --external-downloader-args &quot;-x 16 -k 1M&quot;</code></p><p><strong>参数说明</strong></p><p>–external-downloader aria2c //调用外部下载工具<br>–external-downloader-args //外部下载工具指定参数<br>-x 16 //启用aria2 16个线程，最多就支持16线程<br>-K 1M //指定块的大小</p><h3 id="Update-2021-11-02-下载速度慢的最新解决方式"><s>Update:2021/11/02 下载速度慢的最新解决方式</s></h3><p><s>发现在YouTube-dl的官方Issues里有非常多关于下载速度慢的提问</s></p><h4 id="解决方式："><s>解决方式</s>：</h4><p><s>网友推荐解决方式之一：使用youtube-dl的二次开发工具<a href="https://github.com/yt-dlp/yt-dlp"><strong>yt-dlp</strong></a></s></p><h4 id="安装方式："><s>安装方式</s>：</h4><p><s>MacOS  <code>brew install yt-dlp/taps/yt-dlp</code></s></p><p><s>官方包发布地址：<a href="https://github.com/yt-dlp/yt-dlp/releases">https://github.com/yt-dlp/yt-dlp/releases</a></s></p><h4 id="使用方式"><s>使用方式</s></h4><p><s>和YouTube-dl基本一样，只是把参数<code>YouTube-dl 网址</code>换成<code>yt-dlp 网址</code></s></p><h3 id="参考">参考</h3><p><a href="#%E4%BB%A5%E6%9C%80%E4%BC%98%E6%A0%BC%E5%BC%8F%E4%B8%8B%E8%BD%BD%E9%9F%B3%E9%A2%91">以最优格式下载音频</a> <a href="https://askubuntu.com/questions/634584/how-to-download-youtube-videos-as-a-best-quality-audio-mp3-using-youtube-dl">how-to-download-youtube-videos-as-a-best-quality-audio-mp3-using-youtube-dl</a></p><p><a href="https://www.sysgeek.cn/youtube-dl-examples/">Youtube 专业下载工具，Youtube-dl 详细使用教程与初学上手示例</a></p><p><a href="https://blog.csdn.net/u014389734/article/details/86751840">Youtube-dl调用外部Aria2多线程加速下载</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        以前找某个歌曲的音频文件找不到的时候就用网页版的工具下载过Youtube上的音乐。前几天Github封杀了youtbe-dl我才知道有这么个开源的命令行工具。使用了下感觉很好，打算当成日常使用工具特此记录下使用技巧。&lt;/p&gt;
&lt;p&gt;​        官网：&lt;a href=&quot;https://github.com/ytdl-org/youtube-dl#video-selection&quot;&gt;https://github.com/ytdl-org/youtube-dl#video-selection&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;安装&quot;&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;&amp;#x2F;安装
brew install youtube-dl &lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&quot;以最优格式下载视频&quot;&gt;&lt;strong&gt;以最优格式下载视频&lt;/strong&gt;&lt;/h3&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;&amp;#x2F;以最优格式下载youtube视频，其它网站暂未测试，官方说Windows下换单引号为双引号
youtube-dl -f &amp;#39;bestvideo[ext&amp;#x3D;mp4]+bestaudio[ext&amp;#x3D;m4a]&amp;#x2F;best[ext&amp;#x3D;mp4]&amp;#x2F;best&amp;#39; 网址

&amp;#x2F;&amp;#x2F;或者直接使用默认设置，一般会下载两个webm文件，分别为视频和音频，
&amp;#x2F;&amp;#x2F;再自动合并成附带音轨的webm格式视频，测试发现也是最高分辨率，有4K就下4K版本
youtube-dl 网址&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="技巧" scheme="https://xtvj.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="Mac" scheme="https://xtvj.github.io/tags/Mac/"/>
    
    <category term="youtube-dl" scheme="https://xtvj.github.io/tags/youtube-dl/"/>
    
  </entry>
  
  <entry>
    <title>Android中使用Hilt依赖注入，超赞的一个库</title>
    <link href="https://xtvj.github.io/2020/11/15/Android%E4%B8%AD%E4%BD%BF%E7%94%A8Hilt%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%8C%E8%B6%85%E8%B5%9E%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%93/"/>
    <id>https://xtvj.github.io/2020/11/15/Android%E4%B8%AD%E4%BD%BF%E7%94%A8Hilt%E4%BE%9D%E8%B5%96%E6%B3%A8%E5%85%A5%EF%BC%8C%E8%B6%85%E8%B5%9E%E7%9A%84%E4%B8%80%E4%B8%AA%E5%BA%93/</id>
    <published>2020-11-15T11:12:02.000Z</published>
    <updated>2020-12-24T15:21:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>首先声明我没有用过Dagger，去年用Dagger的时候被跳来跳去的设置搞迷了，还自动生成一大堆类，乱七八糟的太难使用，如今尝试使用Hilt，真的是爽啊，真的是爽啊，真的是爽啊！</p><p>简单介绍，依赖注入是个什么东西？建一个新的接口，如果要调用的时候是不是要在别的方法中加入参数，还要设置类似setListener之类的设置？一大堆参数传来传去，是不是很麻烦。只需要用“@Binds”这几个字符，Hilt就可以很轻松解决。当然Hilt不单单作用于接口上，还可以在注入实例等，而且Hilt通过为项目中的每个 Android 类提供容器并自动为您管理其生命周期。</p><p>本文大部分从官网介绍中摘抄过来，留作自用，摘抄完才发现官网的介绍很详细。前几次都是走马观花没看太明白，这次摘抄那是每句话恨不得看三遍搞个明白才知道复制哪粘贴到哪。如果是别人浏览，推荐<a href="https://developer.android.com/training/dependency-injection">查看官网</a>。</p><span id="more"></span><h3 id="到底什么是依赖注入呢？">到底什么是依赖注入呢？</h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;不使用依赖项注入class Car &#123;    private Engine engine &#x3D; new Engine();    public void start() &#123;        engine.start();    &#125;&#125;class MyApp &#123;    public static void main(String[] args) &#123;        Car car &#x3D; new Car();        car.start();    &#125;&#125;</code></pre><p>上面这并非依赖项注入的示例，因为 <code>Car</code> 类构造了自己的 <code>Engine</code>，这可能会有问题，原因如下：</p><blockquote><ul><li><code>Car</code> 和 <code>Engine</code> 密切相关 - <code>Car</code> 的实例使用一种类型的 <code>Engine</code>，并且无法轻松使用子类或替代实现。如果 <code>Car</code> 要构造自己的 <code>Engine</code>，您必须创建两种类型的 <code>Car</code>，而不是直接将同一 <code>Car</code> 重用于 <code>Gas</code> 和 <code>Electric</code> 类型的引擎。</li><li>对 <code>Engine</code> 的强依赖使得测试更加困难。<code>Car</code> 使用 <code>Engine</code> 的真实实例，因此您无法使用测试替身针对不同的测试用例修改 <code>Engine</code>。</li></ul></blockquote><pre class="language-none"><code class="language-none">&#x2F;&#x2F;使用依赖注入class Car &#123;    private final Engine engine;    public Car(Engine engine) &#123;        this.engine &#x3D; engine;    &#125;    public void start() &#123;        engine.start();    &#125;&#125;class MyApp &#123;    public static void main(String[] args) &#123;        Engine engine &#x3D; new Engine();        Car car &#x3D; new Car(engine);        car.start();    &#125;&#125;</code></pre><p>由于 <code>Car</code> 依赖于 <code>Engine</code>，因此应用会创建 <code>Engine</code> 的实例，然后使用它构造 <code>Car</code> 的实例。优势：</p><blockquote><ul><li>重用 <code>Car</code>。您可以将 <code>Engine</code> 的不同实现传入 <code>Car</code>。例如，您可以定义一个想要 <code>Car</code> 使用的名为 <code>ElectricEngine</code> 的新 <code>Engine</code> 子类。如果您使用 DI，只需传入更新后的 <code>ElectricEngine</code> 子类的实例，<code>Car</code> 仍可正常使用，无需任何进一步更改。</li><li>轻松测试 <code>Car</code>。您可以传入测试替身以测试不同场景。例如，您可以创建一个名为 <code>FakeEngine</code> 的 <code>Engine</code> 测试替身，并针对不同的测试进行配置。</li></ul></blockquote><p>Android中主要有两种依赖方式：</p><p><strong>构造函数注入</strong>：这就是上面描述的方式。您将某个类的依赖项传入其构造函数。</p><p><strong>字段注入（或 setter 注入）</strong>：某些 Android 框架类（如 Activity 和 Fragment）由系统实例化，因此无法进行构造函数注入。使用字段注入时，依赖项将在创建类后实例化。</p><h3 id="什么是自动依赖注入呢？">什么是自动依赖注入呢？</h3><blockquote><p>有一些库通过自动执行创建和提供依赖项的过程解决此问题。它们归为两类：</p><ul><li>基于反射的解决方案，可在运行时连接依赖项。</li><li>静态解决方案，可生成在编译时连接依赖项的代码。</li></ul></blockquote><p>Hilt是属于第二类。Hilt是在Dagger上改进的，编译时就生成代码。</p><h3 id="Hilt使用">Hilt使用</h3><p>添加依赖项：<code>app/build.gradle</code> 文件</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F; Hilt implementation &#39;com.google.dagger:hilt-android:2.29.1-alpha&#39;annotationProcessor &#39;com.google.dagger:hilt-android-compiler:2.29.1-alpha&#39;implementation &#39;androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha02&#39;annotationProcessor &#39;androidx.hilt:hilt-compiler:1.0.0-alpha02&#39;</code></pre><p>添加插件：项目的根级 <code>build.gradle</code> 文件</p><pre class="language-none"><code class="language-none">classpath &#39;com.google.dagger:hilt-android-gradle-plugin:2.28-alpha&#39;</code></pre><p>启用Java8功能</p><pre class="language-groovy" data-language="groovy"><code class="language-groovy">android <span class="token punctuation">&#123;</span>  <span class="token punctuation">...</span>  compileOptions <span class="token punctuation">&#123;</span>    sourceCompatibility JavaVersion<span class="token punctuation">.</span>VERSION_1_8    targetCompatibility JavaVersion<span class="token punctuation">.</span>VERSION_1_8  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><p>所有使用 Hilt 的应用都必须包含一个带有 <code>@HiltAndroidApp</code> 注释的 <code>Application</code> 类。</p><pre class="language-none"><code class="language-none">@HiltAndroidApppublic class ExampleApplication extends Application &#123; ... &#125;</code></pre><blockquote><p>每当 Hilt 提供 <code>AnalyticsAdapter</code> 作为其他类型的依赖项或通过字段注入提供它（如在 <code>ExampleActivity</code> 中）时，Hilt 都会提供 <code>AnalyticsAdapter</code> 的一个新实例。</p></blockquote><pre class="language-none"><code class="language-none">@AndroidEntryPointpublic class ExampleActivity extends AppCompatActivity &#123;  @Inject  AnalyticsAdapter analytics;  ...&#125;&#x2F;&#x2F;在一个类的代码中，带有注释的构造函数的参数即是该类的依赖项。在本例中，AnalyticsService 是 AnalyticsAdapter 的一个依赖项。&#x2F;&#x2F;因此，Hilt还必须知道如何提供 AnalyticsService 的实例。那如何让Hilt知道如何提供这个Service呢？往下看。public class AnalyticsAdapter &#123;  private final AnalyticsService service;  @Inject  AnalyticsAdapter(AnalyticsService service) &#123;    this.service &#x3D; service;  &#125;  ...&#125;</code></pre><h3 id="使用-Binds-注入接口实例">使用 @Binds 注入接口实例</h3><pre class="language-none"><code class="language-none">public interface AnalyticsService &#123;  void analyticsMethods();&#125;&#x2F;&#x2F; Constructor-injected, because Hilt needs to know how to&#x2F;&#x2F; provide instances of AnalyticsServiceImpl, too.public class AnalyticsServiceImpl implements AnalyticsService &#123;  ...  @Inject  AnalyticsServiceImpl(...) &#123;    ...  &#125;&#125;&#x2F;&#x2F;设置ActivityComponent.class是将该依赖项注入 ExampleActivity&#x2F;&#x2F;设置后所有依赖项都可以在应用的所有Activity中使用，所有Activity，所有Activity.@Module@InstallIn(ActivityComponent.class)public abstract class AnalyticsModule &#123;&#x2F;&#x2F;&#96;@Binds&#96; 注释会告知 Hilt 在需要提供接口的实例时要使用哪种实现。  @Binds  public abstract AnalyticsService bindAnalyticsService(    AnalyticsServiceImpl analyticsServiceImpl  );&#125;</code></pre><h3 id="使用-Provides-注入实例">使用 @Provides 注入实例</h3><p>如果某个类不归您所有（因为它来自外部库，如 <a href="https://square.github.io/retrofit/">Retrofit</a>、<a href="https://square.github.io/okhttp/"><code>OkHttpClient</code></a> 或 <a href="https://developer.android.com/topic/libraries/architecture/room">Room 数据库</a>等类），或者必须使用构建器模式创建实例，也无法通过构造函数注入。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;接着前面的例子来讲。如果 AnalyticsService 类不直接归您所有，您可以告知 Hilt 如何提供此类型的实例，&#x2F;&#x2F;方法是在 Hilt 模块内创建一个函数，并使用 @Provides 为该函数添加注释。&#x2F;&#x2F;此种方式在各种APIService上用的很多。@Module@InstallIn(ActivityComponent.class)public class AnalyticsModule &#123;  @Provides  public static AnalyticsService provideAnalyticsService(    &#x2F;&#x2F; Potential dependencies of this type  ) &#123;      return new Retrofit.Builder()               .baseUrl(&quot;https:&#x2F;&#x2F;example.com&quot;)               .build()               .create(AnalyticsService.class);  &#125;&#125;</code></pre><h3 id="为同一类型提供多个绑定">为同一类型提供多个绑定</h3><p>如果您需要让 Hilt 以依赖项的形式提供同一类型的不同实现，必须向 Hilt 提供多个绑定。您可以使用限定符为同一类型定义多个绑定。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;仍然接着前面的例子来讲。如果需要拦截对 AnalyticsService 的调用，您可以使用带有拦截器的 OkHttpClient 对象。&#x2F;&#x2F;对于其他服务，您可能需要以不同的方式拦截调用。在这种情况下，您需要告知 Hilt 如何提供两种不同的 OkHttpClient 实现。@Qualifier@Retention(RetentionPolicy.RUNTIME)private @interface AuthInterceptorOkHttpClient &#123;&#125;@Qualifier@Retention(RetentionPolicy.RUNTIME)private @interface OtherInterceptorOkHttpClient &#123;&#125;</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F;然后，Hilt 需要知道如何提供与每个限定符对应的类型的实例。@Module@InstallIn(ActivityComponent.class)public class NetworkModule &#123;&#x2F;&#x2F;使用带有 @Provides 的 Hilt 模块  @AuthInterceptorOkHttpClient  @Provides  public static OkHttpClient provideAuthInterceptorOkHttpClient(    AuthInterceptor authInterceptor  ) &#123;      return new OkHttpClient.Builder()                   .addInterceptor(authInterceptor)                   .build();  &#125;  &#x2F;&#x2F;使用带有 @Provides 的 Hilt 模块  @OtherInterceptorOkHttpClient  @Provides  public static OkHttpClient provideOtherInterceptorOkHttpClient(    OtherInterceptor otherInterceptor  ) &#123;      return new OkHttpClient.Builder()                   .addInterceptor(otherInterceptor)                   .build();  &#125;&#125;</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F; As a dependency of another class.@Module@InstallIn(ActivityComponent.class)public class AnalyticsModule &#123;&#x2F;&#x2F;此处的okHttpClient就是上面NetworkModule类中provideAuthInterceptorOkHttpClient提供的，  @Provides  public static AnalyticsService provideAnalyticsService(@AuthInterceptorOkHttpClient OkHttpClient okHttpClient) &#123;      return new Retrofit.Builder()                  .baseUrl(&quot;https:&#x2F;&#x2F;example.com&quot;)                  .client(okHttpClient)                  .build()                  .create(AnalyticsService.class);  &#125;&#125;&#x2F;&#x2F; As a dependency of a constructor-injected class.public class ExampleServiceImpl ... &#123;  private final OkHttpClient okHttpClient;  @Inject  ExampleServiceImpl(@AuthInterceptorOkHttpClient OkHttpClient okHttpClient) &#123;    this.okHttpClient &#x3D; okHttpClient;  &#125;&#125;&#x2F;&#x2F; At field injection.@AndroidEntryPointpublic class ExampleActivity extends AppCompatActivity &#123;  @AuthInterceptorOkHttpClient  @Inject  OkHttpClient okHttpClient;  ...&#125;</code></pre><h3 id="Hilt-中的预定义限定符">Hilt 中的预定义限定符</h3><pre class="language-none"><code class="language-none">&#x2F;&#x2F;假设本例中的 AnalyticsAdapter 类需要 Activity 的上下文public class AnalyticsAdapter &#123;  private final Context context;  private final AnalyticsService service;  @Inject  AnalyticsAdapter(@ActivityContext Context context,AnalyticsService service) &#123;    this.context &#x3D; context;    this.service &#x3D; service;  &#125;&#125;</code></pre><h3 id="组件作用域">组件作用域</h3><table><thead><tr><th style="text-align:left">Android 类</th><th style="text-align:left">生成的组件</th><th style="text-align:left">作用域</th></tr></thead><tbody><tr><td style="text-align:left"><code>Application</code></td><td style="text-align:left"><code>ApplicationComponent</code></td><td style="text-align:left"><code>@Singleton</code></td></tr><tr><td style="text-align:left"><code>View Model</code></td><td style="text-align:left"><code>ActivityRetainedComponent</code></td><td style="text-align:left"><code>@ActivityRetainedScope</code></td></tr><tr><td style="text-align:left"><code>Activity</code></td><td style="text-align:left"><code>ActivityComponent</code></td><td style="text-align:left"><code>@ActivityScoped</code></td></tr><tr><td style="text-align:left"><code>Fragment</code></td><td style="text-align:left"><code>FragmentComponent</code></td><td style="text-align:left"><code>@FragmentScoped</code></td></tr><tr><td style="text-align:left"><code>View</code></td><td style="text-align:left"><code>ViewComponent</code></td><td style="text-align:left"><code>@ViewScoped</code></td></tr><tr><td style="text-align:left">带有 <code>@WithFragmentBindings</code> 注释的 <code>View</code></td><td style="text-align:left"><code>ViewWithFragmentComponent</code></td><td style="text-align:left"><code>@ViewScoped</code></td></tr><tr><td style="text-align:left"><code>Service</code></td><td style="text-align:left"><code>ServiceComponent</code></td><td style="text-align:left"><code>@ServiceScoped</code></td></tr></tbody></table><pre class="language-none"><code class="language-none">&#x2F;&#x2F;上面的例子每当 Hilt 提供AnalyticsAdapter作为其他类型的依赖项或通过字段注入提供它（如在ExampleActivity中）时，&#x2F;&#x2F;Hilt 都会提供AnalyticsAdapter的一个新实例。&#x2F;&#x2F;本例中，如果您使用 @ActivityScoped 将 AnalyticsAdapter 的作用域限定为 ActivityComponent，&#x2F;&#x2F;Hilt 会在相应 Activity 的整个生命周期内提供 AnalyticsAdapter 的同一实例：@ActivityScopedpublic class AnalyticsAdapter &#123;  private final AnalyticsService service;  @Inject  AnalyticsAdapter(AnalyticsService service) &#123;    this.service &#x3D; service;  &#125;  ...&#125;</code></pre><blockquote><p><strong>注意</strong>：将绑定的作用域限定为某个组件的成本可能很高，因为提供的对象在该组件被销毁之前一直保留在内存中。请在应用中尽量少用限定作用域的绑定。如果绑定的内部状态要求在某一作用域内使用同一实例，或者绑定的创建成本很高，那么将绑定的作用域限定为某个组件是一种恰当的做法。</p></blockquote><h3 id="在-Hilt-不支持的类中注入依赖项">在 Hilt 不支持的类中注入依赖项</h3><p>您可以使用 <code>@EntryPoint</code> 注释创建入口点。入口点是由 Hilt 管理的代码与并非由 Hilt 管理的代码之间的边界。它是代码首次进入 Hilt 所管理对象的图的位置。入口点允许 Hilt 使用它并不管理的代码提供依赖关系图中的依赖项。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;例如，Hilt并不直接支持内容提供程序。如果您希望内容提供程序使用Hilt来获取某些依赖项，需要为所需的每个绑定类型定义一个带有&#x2F;&#x2F;@EntryPoint 注释的接口并添加限定符。然后，添加 @InstallIn 以指定要在其中安装入口点的组件，如下所示：public class ExampleContentProvider extends ContentProvider &#123;  @EntryPoint  @InstallIn(ApplicationComponent.class)  interface ExampleContentProviderEntryPoint &#123;    public AnalyticsService analyticsService();  &#125;  ...&#125;</code></pre><pre class="language-none"><code class="language-none">&#x2F;&#x2F;如需访问入口点，请使用来自 EntryPointAccessors 的适当静态方法。参数应该是组件实例或充当组件持有者的 &#x2F;&#x2F;@AndroidEntryPoint对象。确保您以参数形式传递的组件和 EntryPointAccessors 静态方法都与 &#x2F;&#x2F;@EntryPoint 接口上的 @InstallIn 注释中的 Android 类匹配：public class ExampleContentProvider extends ContentProvider &#123;  @Override  public Cursor query(...) &#123;    Context appContext &#x3D; getContext().getApplicationContext();    ExampleContentProviderEntryPoint hiltEntryPoint &#x3D;      EntryPointAccessors.fromApplication(appContext, ExampleContentProviderEntryPoint.class);    AnalyticsService analyticsService &#x3D; hiltEntryPoint.analyticsService();  &#125;&#125;</code></pre><h3 id="Hilt-和-Jetpack-集成">Hilt 和 Jetpack 集成</h3><pre class="language-none"><code class="language-none">...dependencies &#123;  ...  implementation &#39;androidx.hilt:hilt-lifecycle-viewmodel:1.0.0-alpha01&#39;  &#x2F;&#x2F; When using Kotlin.  kapt &#39;androidx.hilt:hilt-compiler:1.0.0-alpha01&#39;  &#x2F;&#x2F; When using Java.  annotationProcessor &#39;androidx.hilt:hilt-compiler:1.0.0-alpha01&#39;&#125;</code></pre><blockquote><p>在 <code>ViewModel</code> 对象的构造函数中使用 <code>@ViewModelInject</code> 注释来提供一个 <a href="https://developer.android.com/topic/libraries/architecture/viewmodel"><code>ViewModel</code></a>。您还必须使用 <code>@Assisted</code> 为 <code>SavedStateHandle</code> 依赖项添加注释：</p></blockquote><pre class="language-none"><code class="language-none">public class ExampleViewModel extends ViewModel &#123;  private final ExampleRepository repository;  private final SavedStateHandle savedStateHandle;  @ViewModelInject  ExampleViewModel(ExampleRepository repository,@Assisted SavedStateHandle savedStateHandle)&#123;    this.repository &#x3D; repository;    this.savedStateHandle &#x3D; savedStateHandle;  &#125;  ...&#125;</code></pre><blockquote><p>然后，带有 <code>@AndroidEntryPoint</code> 注释的 Activity 或 Fragment 可以使用 <code>ViewModelProvider</code> 或 <code>by viewModels()</code></p></blockquote><pre class="language-none"><code class="language-none">@AndroidEntryPointpublic class ExampleActivity extends AppCompatActivity &#123;  private ExampleViewModel exampleViewModel;  @Override  protected void onCreate(Bundle savedInstanceState) &#123;    super.onCreate(savedInstanceState);    exampleViewModel &#x3D; new ViewModelProvider(this).get(ExampleViewModel.class);  &#125;  ...&#125;</code></pre><h3 id="使用-Hilt-注入-WorkManager">使用 Hilt 注入 WorkManager</h3><pre class="language-none"><code class="language-none">...dependencies &#123;  ...  implementation &#39;androidx.hilt:hilt-work:1.0.0-alpha01&#39;  &#x2F;&#x2F; When using Kotlin.  kapt &#39;androidx.hilt:hilt-compiler:1.0.0-alpha01&#39;  &#x2F;&#x2F; When using Java.  annotationProcessor &#39;androidx.hilt:hilt-compiler:1.0.0-alpha01&#39;&#125;</code></pre><blockquote><p>在 <code>Worker</code> 对象的构造函数中使用 <code>@WorkerInject</code> 注释来注入一个 <code>Worker</code>。您只能在 <code>Worker</code> 对象中使用 <code>@Singleton</code> 或未限定作用域的绑定。您还必须使用 <code>@Assisted</code> 为 <code>Context</code> 和 <code>WorkerParameters</code> 依赖项添加注释：</p></blockquote><pre class="language-none"><code class="language-none">public class ExampleWorker extends Worker &#123;  private final WorkerDependency workerDependency;  @WorkerInject  ExampleWorker(@Assisted @NonNull Context context,  @Assisted @NonNull WorkerParameters params,    WorkerDependency workerDependency) &#123;    super(context, params);    this.workerDependency &#x3D; workerDependency;  &#125;  ...&#125;</code></pre><blockquote><p>然后，让 <code>Application</code> 类实现 <code>Configuration.Provider</code> 接口，注入 <code>HiltWorkFactory</code> 的实例，并将其传入 <code>WorkManager</code> 配置，如下所示：</p></blockquote><pre class="language-none"><code class="language-none">@HiltAndroidApppublic class ExampleApplication extends Application implements Configuration.Provider &#123;  @Inject HiltWorkerFactory workerFactory;  @Override  public Configuration getWorkManagerConfiguration() &#123;    return Configuration.Builder()             .setWorkerFactory(workerFactory)             .build();  &#125;&#125;</code></pre><h3 id="结尾">结尾</h3><p>本来收集到几篇介绍Hilt的文章，打算看完官网介绍再看的，结果看完官网介绍后发现那几篇文章太垃圾了，就讲讲限定符、作用域什么的就完了。以前在公众号上看到的时候感觉好详细的文章啊，结果什么都看不懂。还是官方文档好啊，菜鸡专用文档，hiahiahia。</p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;首先声明我没有用过Dagger，去年用Dagger的时候被跳来跳去的设置搞迷了，还自动生成一大堆类，乱七八糟的太难使用，如今尝试使用Hilt，真的是爽啊，真的是爽啊，真的是爽啊！&lt;/p&gt;
&lt;p&gt;简单介绍，依赖注入是个什么东西？建一个新的接口，如果要调用的时候是不是要在别的方法中加入参数，还要设置类似setListener之类的设置？一大堆参数传来传去，是不是很麻烦。只需要用“@Binds”这几个字符，Hilt就可以很轻松解决。当然Hilt不单单作用于接口上，还可以在注入实例等，而且Hilt通过为项目中的每个 Android 类提供容器并自动为您管理其生命周期。&lt;/p&gt;
&lt;p&gt;本文大部分从官网介绍中摘抄过来，留作自用，摘抄完才发现官网的介绍很详细。前几次都是走马观花没看太明白，这次摘抄那是每句话恨不得看三遍搞个明白才知道复制哪粘贴到哪。如果是别人浏览，推荐&lt;a href=&quot;https://developer.android.com/training/dependency-injection&quot;&gt;查看官网&lt;/a&gt;。&lt;/p&gt;</summary>
    
    
    
    <category term="android" scheme="https://xtvj.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
    <category term="技术" scheme="https://xtvj.github.io/tags/%E6%8A%80%E6%9C%AF/"/>
    
    <category term="Hilt" scheme="https://xtvj.github.io/tags/Hilt/"/>
    
  </entry>
  
  <entry>
    <title>五笔拆字表</title>
    <link href="https://xtvj.github.io/2020/11/04/%E4%BA%94%E7%AC%94%E6%8B%86%E5%AD%97%E8%A1%A8/"/>
    <id>https://xtvj.github.io/2020/11/04/%E4%BA%94%E7%AC%94%E6%8B%86%E5%AD%97%E8%A1%A8/</id>
    <published>2020-11-04T06:58:56.000Z</published>
    <updated>2022-03-13T19:56:25.461Z</updated>
    
    <content type="html"><![CDATA[<p>记录时常想不起怎么编码、拆解的汉字。</p><table><thead><tr><th style="text-align:center">汉字</th><th style="text-align:center">拼音</th><th style="text-align:center">五笔编码</th><th style="text-align:center">五笔拆分图解</th></tr></thead><tbody><tr><td style="text-align:center">缺</td><td style="text-align:center">que</td><td style="text-align:center">rmn</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E7%BC%BA.gif" alt=""></td></tr><tr><td style="text-align:center">颜</td><td style="text-align:center">yan</td><td style="text-align:center">utem</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E9%A2%9C.gif" alt=""></td></tr><tr><td style="text-align:center">爬</td><td style="text-align:center">pa</td><td style="text-align:center">rhyc</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E7%88%AC.gif" alt=""></td></tr><tr><td style="text-align:center">辣</td><td style="text-align:center">la</td><td style="text-align:center">ugk</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E8%BE%A3.gif" alt=""></td></tr><tr><td style="text-align:center">即</td><td style="text-align:center">ji</td><td style="text-align:center">vcb</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%8D%B3.gif" alt=""></td></tr><tr><td style="text-align:center">鹿</td><td style="text-align:center">lù</td><td style="text-align:center">ynjx</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E9%B9%BF.gif" alt=""></td></tr><tr><td style="text-align:center">庸</td><td style="text-align:center">yong</td><td style="text-align:center">yveh</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%BA%B8.gif" alt=""><br/><img src="https://xtvj.github.io/images/庸笔画顺序.png" style="zoom: 33%;margin: 0 auto;" /></td></tr><tr><td style="text-align:center">谣</td><td style="text-align:center">yao</td><td style="text-align:center">yer</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E8%B0%A3.gif"/></td></tr><tr><td style="text-align:center">瓣</td><td style="text-align:center">ban</td><td style="text-align:center">ur</td><td style="text-align:center"><img src="https://xtvj.github.io/images/瓣.gif"/></td></tr><tr><td style="text-align:center">刻</td><td style="text-align:center">ke</td><td style="text-align:center">ynt</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%88%BB.gif"/></td></tr><tr><td style="text-align:center">曳</td><td style="text-align:center">ye</td><td style="text-align:center">jxe</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%9B%B3.gif"/></td></tr><tr><td style="text-align:center">舟</td><td style="text-align:center">zhou</td><td style="text-align:center">tei</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E8%88%9F.gif"/></td></tr><tr><td style="text-align:center">凹</td><td style="text-align:center">ao</td><td style="text-align:center">mmgd</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%87%B9.gif"/></td></tr><tr><td style="text-align:center">凸</td><td style="text-align:center">tu</td><td style="text-align:center">hgm</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%87%B8.gif"/></td></tr><tr><td style="text-align:center">戈</td><td style="text-align:center">ge</td><td style="text-align:center">agnt</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%88%88.gif"/></td></tr><tr><td style="text-align:center">戒</td><td style="text-align:center">jie</td><td style="text-align:center">aak</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%88%92.gif"/></td></tr><tr><td style="text-align:center">某</td><td style="text-align:center">mou</td><td style="text-align:center">afs</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%9F%90.gif"/></td></tr><tr><td style="text-align:center">浅</td><td style="text-align:center">qian</td><td style="text-align:center">igt</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%B5%85.gif"/></td></tr><tr><td style="text-align:center">晓</td><td style="text-align:center">xiao</td><td style="text-align:center">jat</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E6%99%93.gif"/></td></tr><tr><td style="text-align:center">套</td><td style="text-align:center">tao</td><td style="text-align:center">ddu</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%A5%97.gif"/></td></tr><tr><td style="text-align:center">善</td><td style="text-align:center">shan</td><td style="text-align:center">uduk</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%96%84.gif"/></td></tr><tr><td style="text-align:center">卫</td><td style="text-align:center">wei</td><td style="text-align:center">bg</td><td style="text-align:center"><img src="https://xtvj.github.io/images/%E5%8D%AB.gif"/></td></tr><tr><td style="text-align:center">巴</td><td style="text-align:center">ba</td><td style="text-align:center">cnh</td><td style="text-align:center"><img src="https://xtvj.github.io/images/巴.gif"/> <br/>  <img src="https://xtvj.github.io/images/ba_bihua.png" style="zoom: 33%;margin: 0 auto;" /></td></tr></tbody></table><hr><p>识别码表，打完编码输入识别码确定<strong>左右型</strong> 、<strong>上下型</strong>、<strong>杂合型</strong>。</p><img src="https://xtvj.github.io/images/五笔识别码表.gif" style="zoom: 100%;margin: 0 auto;" /><hr><img src="https://xtvj.github.io/images/五笔字根表.jpg" style="zoom: 100%;margin: 0 auto;" /><p>参考</p><p><a href="https://www.52wubi.com/wbbmcx/search.php">https://www.52wubi.com/wbbmcx/search.php</a></p><p><a href="https://wubizhijia.com/zigenbiao/66.html">https://wubizhijia.com/zigenbiao/66.html</a></p><p><a href="https://www.dazima.cn/jiaocheng/20110410271.html">https://www.dazima.cn/jiaocheng/20110410271.html</a></p><p><a href="https://www.hanzi5.com/">https://www.hanzi5.com/</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;记录时常想不起怎么编码、拆解的汉字。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:center&quot;&gt;汉字&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;拼音&lt;/th&gt;
&lt;th style=&quot;text-a</summary>
      
    
    
    
    <category term="技巧" scheme="https://xtvj.github.io/categories/%E6%8A%80%E5%B7%A7/"/>
    
    
    <category term="五笔" scheme="https://xtvj.github.io/tags/%E4%BA%94%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>Mac使用技巧</title>
    <link href="https://xtvj.github.io/2020/10/29/Mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://xtvj.github.io/2020/10/29/Mac%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2020-10-29T02:09:51.000Z</published>
    <updated>2022-03-13T12:49:58.234Z</updated>
    
    <content type="html"><![CDATA[<p>之前很多东西都懒得记录，现在发现改的东西多了，很多细节很容易就忘，故做此流水记录。</p><p>首选AppStore  &gt;次选Brew  &gt;再者Dmg  &gt;最后PKG。</p><p>由于我不用appstore安装应用，固能用brew方式安装的应用<strong>尽量用brew安装</strong>。</p><h3 id="软件：">软件：</h3><p>注：软件名带删除线的为备用软件，需要时再安装。</p><style>table th:nth-of-type(1) {    width: 100px;}table th:nth-of-type(2) {    width: 500px;}</style><table><thead><tr><th>软件</th><th>说明</th></tr></thead><tbody><tr><td>Chrome</td><td>下载Chrome使用<a href="https://www.google.com/intl/zh-CN/chrome/">国外地址</a>，国内地址下来的是国内版，已经与国际版有区别。<br/>1、在同步设置使用自定义同步，关闭同步“打开的标签页”，可以取消右键的“发送页面到XX设备”。<br/>2、DOH设置自定义：<a href="https://94.140.14.140/dns-query">https://94.140.14.140/dns-query</a></td></tr><tr><td>Chrome扩展uBlacklist</td><td>订阅中导入：<br/><a href="https://github.com/xtvj/uBlocklist-additional-settings/raw/master/uBlacklist_sub.txt">uBlacklist_sub</a> 列表仅自用</td></tr><tr><td>Chrome扩展Tampermonkey</td><td><a href="https://github.com/the1812/Bilibili-Evolved">Bilibili Evolved</a><br/><a href="https://greasyfork.org/zh-CN/scripts/402808-%E7%9F%A5%E4%B9%8E%E7%BE%8E%E5%8C%96">知乎美化</a><br/><a href="https://greasyfork.org/zh-CN/scripts/412612-open-the-f-king-url-right-now">外链去除重定向</a><br/><a href="https://greasyfork.org/zh-CN/scripts/419081-%E7%9F%A5%E4%B9%8E%E5%A2%9E%E5%BC%BA">知乎增强</a><br/><a href="https://greasyfork.org/scripts/425955">阿里云盘</a><br/><a href="https://greasyfork.org/scripts/431256">迅雷云盘</a></td></tr><tr><td><s>Rime</s></td><td><s><a href="https://rime.im/download/">https://rime.im/download/</a> 、<a href="https://segmentfault.com/a/1190000018344603">五笔设置教程</a>、<a href="https://www.xiebruce.top/1235.html">macOS安装配置RIME</a>、<a href="https://github.com/rime/weasel/issues/20">设置默认英文输入</a></s> 已切换为系统自带五笔输入法。</td></tr><tr><td>Homebrew</td><td><a href="https://brew.sh/">https://brew.sh/</a></td></tr><tr><td>终端iTerm</td><td><a href="https://xtvj.github.io/2020/10/19/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E5%8F%88%E6%BC%82%E4%BA%AE%E7%9A%84%E7%BB%88%E7%AB%AF/">Mac上好用又漂亮的终端</a>、<a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">打造 Mac 下高颜值好用的终端环境</a></td></tr><tr><td>Sublime Text 4</td><td><code>brew install sublime-text</code><br/><a href="https://www.sublimetext.com/download">官网</a> <br/><a href="https://blog.csdn.net/zhanglong_4444/article/details/104464070">使用GBK编码中文乱码问题</a> <br/><a href="https://www.jianshu.com/p/426745ad9fed">在命令行中打开Sublime Text 3</a></td></tr><tr><td>科学上网</td><td><a href="https://github.com/yichengchen/clashX/releases">ClashX</a></td></tr><tr><td>NeatDownloadManager</td><td><a href="http://neatdownloadmanager.com/index.php/en/">http://neatdownloadmanager.com/index.php/en/</a> <br/> 下载工具，非常简洁</td></tr><tr><td>Foobar2000 + LyricsX</td><td><a href="https://www.foobar2000.org/mac">https://www.foobar2000.org/mac</a> <br/> 播放器列表可以显示文件名和文件路径<br/><a href="https://github.com/ddddxxx/LyricsX">https://github.com/ddddxxx/LyricsX</a> <br/><code>brew install lyricsx</code><br/>歌词显示<br/> LyricsX偏好设置–通用–跟随播放器启动和退出</td></tr><tr><td>AndroidStudio</td><td><a href="https://developer.android.com/studio">https://developer.android.com/studio</a> <br/>或使用cn地址访问，下载后的SHA-256值相同</td></tr><tr><td>IINA</td><td>视频播放器，由于IINA是<a href="https://github.com/iina/iina">开源免费</a>的，方便<a href="https://iina.io/download/">下载安装</a>。4K播放稍弱。</td></tr><tr><td>Office</td><td>MicroSoft Office，别的不考虑。<br/>官方下载地址集合贴：<a href="https://macadmins.software/">https://macadmins.software/</a></td></tr><tr><td>PhotoShop</td><td>使用Adobe_Zii激活。搜索引擎出来的都是分发地址，Adobe_Zii没有官方网址。</td></tr><tr><td>MarkDown编辑</td><td><a href="https://github.com/marktext/marktext">MarkText</a><br/>目前还是BUG一大堆</td></tr><tr><td>qbittorrent</td><td>使用<a href="https://github.com/c0re100/qBittorrent-Enhanced-Edition">增强版</a>下载，可手动添加<a href="https://trackerslist.com/all.txt">trackers</a>或<a href="https://cdn.jsdelivr.net/gh/ngosang/trackerslist@master/trackers_all_ip.txt">trackers_all_ip</a><br/>或<a href="https://www.qbittorrent.org/download.php">官方原版</a>（目前原版更新速度特慢，而且有BUG）<br/>记得打开<br/>首选项-连接-IP过滤-勾选匹配tracker<br/>首选项-高级-启用内置Tracker-勾选<br/>首选项-高级-总是向同级的所有Tracker汇报、总是向所有等级的Tracker汇报-勾选<br/>如果经过以上设置后，下载速度还是很慢或无速度，可能原因有三：<br/>1、冷门资源无上传者分享(换个种子)。<br/>2、Tracker列表不合适此网络环境(更换Tracker列表)<br/>3、运营商屏蔽了bt(可在设置-连接中使用代理服务器连接tracker，不用代理连接用户)。</td></tr><tr><td>Rectangle</td><td><code>brew install cask rectangle</code><br/><a href="https://github.com/rxhanson/Rectangle">https://github.com/rxhanson/Rectangle</a><br/>窗口管理工具</td></tr><tr><td><s>Loopback</s></td><td><a href="https://rogueamoeba.com/loopback/">https://rogueamoeba.com/loopback/</a><br/>音频管理工具，配合command + shift + 5等热键可录屏，附带系统和外部麦克的声音。付费应用。<br/><a href="https://www.bilibili.com/video/BV1LJ411E7cm">B站视频教程</a></td></tr><tr><td>Nodejs + Hexo</td><td><code>brew install node</code><br/><code>sudo npm install hexo-cli -g</code></td></tr><tr><td><s>scrcpy</s></td><td>安卓手机投屏工具<br/><a href="https://github.com/Genymobile/scrcpy">开源地址</a><br/><code>brew install scrcpy</code></td></tr><tr><td>adb</td><td><code>brew install --cask android-platform-tools</code></td></tr><tr><td>sqlitebrowser</td><td><code>brew install --cask db-browser-for-sqlite</code></td></tr><tr><td>Meld</td><td><code>brew install meld</code><br/>文件比对工具</td></tr><tr><td>youtube-dl</td><td><code>brew install youtube-dl </code><br/>命令行工具，无GUI视图。下载命令<code>youtube-dl 视频网址</code></td></tr><tr><td>insomnia</td><td>免费好看接口调试工具<br/><a href="https://github.com/Kong/insomnia">https://github.com/Kong/insomnia</a><br/></td></tr><tr><td><s>licecap</s></td><td>GIF录制小工具<br/><a href="https://www.cockos.com/licecap/">https://www.cockos.com/licecap/</a></td></tr><tr><td>OBS Studio</td><td>屏幕录像<br/><a href="https://github.com/obsproject/obs-studio">https://github.com/obsproject/obs-studio</a><br/>开源工具，性能很好，录制视频质量很高。<br/>可使用窗口采集，在采集栏右键后选择“<strong>调整输出大小（到源大小）</strong>”录制单个窗口。</td></tr><tr><td>Android File Transfer</td><td><s><a href="https://www.android.com/filetransfer/">https://www.android.com/filetransfer/</a> <br/>Android与Mac之间文件传输（不使用工具的话可以用adb push或adb pull来操作，不过感觉有点麻烦）</s><br/>使用adb操作替代</td></tr><tr><td>Keka</td><td>开源解压工具<br/><a href="https://github.com/aonez/Keka">https://github.com/aonez/Keka</a></td></tr><tr><td>python3</td><td><code>brew install python</code><br/>.zshrc文件中添加<br/><code>alias python=/usr/local/bin/python3</code></td></tr><tr><td>OmniGraffle</td><td>思维导图<br/><a href="https://www.omnigroup.com/omnigraffle">https://www.omnigroup.com/omnigraffle</a></td></tr><tr><td>Calibre</td><td>书籍管理<br/><a href="https://github.com/kovidgoyal/calibre/releases">https://github.com/kovidgoyal/calibre/releases</a></td></tr><tr><td>App Cleaner &amp; Uninstaller Pro</td><td>卸载清理App，付费应用。</td></tr><tr><td>VMware Fusion</td><td>虚拟机<br/>官方下载地址：<br/><a href="https://www.vmware.com/go/getfusion">https://www.vmware.com/go/getfusion</a></td></tr></tbody></table><h3 id="快捷键">快捷键</h3><style>table th:nth-of-type(1) {    width: 200px;}table th:nth-of-type(2) {    width: 400px;}</style><table><thead><tr><th>快捷键</th><th>说明</th></tr></thead><tbody><tr><td>⌃（control）+ ⌘（command）+ 空格键</td><td>调出“显示表情与符号”窗口，快速输入Emoji表情或符号</td></tr><tr><td>⌃（control）+ ⌘（command）+ Esc</td><td>停止录制</td></tr><tr><td>⌘（command）+ u</td><td>终端中快速删除当前行</td></tr><tr><td>⌘（command）+ Tab</td><td>程序切换窗口</td></tr><tr><td>⌘（command）+ `</td><td>在当前应用程序内切换窗口</td></tr></tbody></table><h3 id="命令行技巧记录">命令行技巧记录</h3><style>table th:nth-of-type(1) {    width: 100px;}table th:nth-of-type(2) {    width: 400px;}</style><table><thead><tr><th>问题</th><th>方案</th></tr></thead><tbody><tr><td>终端中文件名太长</td><td>用<strong>Tab键</strong>选择，不用把文件名全部输入。甚至不用输入文件名，输入cd或vim等命令后空格再按Tab就可以选择文件夹或文件了。</td></tr><tr><td>curl</td><td>curl -o 文件名 https://***/1.zip 下载并保存文件</td></tr><tr><td>计算sha256</td><td>shasum -a 256 文件名<br/>或者sha256sum 文件名</td></tr></tbody></table><h3 id="修改Mac的键盘键位映射">修改Mac的键盘键位映射</h3><p>打开系统偏好设置-键盘-键盘-修改键(如果插入有线键盘/鼠标/USB适配器的鼠标，没有打错，请注意在上方选择是设置哪个键盘)</p><p>Option键：Command</p><p>Command键：Option</p><p>根据习惯，可以自行调整Control/Caps Lock(大小写)的位置</p><p>确定后，即刻生效</p><h3 id="检测机器硬解码能力">检测机器硬解码能力</h3><p><a href="https://www.imacpc.net/archives/548">如何得知開內顯＋GPU 硬件加速 HEVC</a></p><h3 id="使用终端下载Mac原版系统">使用终端下载Mac原版系统</h3><p>使用开源项目<a href="https://github.com/munki/macadmin-scripts">macadmin-scripts</a>下载原版系统，使用<a href="https://github.com/notpeter/apple-installer-checksums">apple-installer-checksums</a>里的信息来验证下载内容的SHA1值。</p><p>使用 <strong>/Users/Shared或子目录</strong>作为此工具的工作空间，使用Python在终端运行macadmin-scripts里的installinstallmacos.py脚本，如图</p><img src="https://xtvj.github.io/images/运行脚本.png" style="zoom: 50%;margin: 0 auto;" /><p>然后选择要下载的版本</p><img src="https://xtvj.github.io/images/选择下载工版本.png" style="zoom: 50%; margin: 0px auto;" /><p>下载完成后等待转换</p><img src="https://xtvj.github.io/images/下载转换完成.png" style="zoom: 50%; margin: 0px auto;" /><p>然后到脚本的目录里找下载的文件和<a href="https://github.com/notpeter/apple-installer-checksums">apple-installer-checksums</a>比对SHA1值，比对正确说明可用转换成功的镜像了。</p><img src="https://xtvj.github.io/images/比对SHA值.png" style="zoom: 50%; margin: 0px auto;" /><h3 id="黑苹果添加Intel的WiFi驱动和蓝牙驱动">黑苹果添加Intel的WiFi驱动和蓝牙驱动</h3><p><strong>WiFi驱动项目地址</strong>：<a href="https://github.com/OpenIntelWireless/itlwm">https://github.com/OpenIntelWireless/itlwm</a></p><p><strong>官方文档</strong>：<a href="https://docs.oiw.workers.dev/itlwm/">https://docs.oiw.workers.dev/itlwm/</a></p><blockquote><p>不要同时使用itlwm.kext和Airportltlwm.kext两个驱动</p></blockquote><p>测试驱动，下载解压后在文件夹内执行以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 给驱动分配执行权限</span><span class="token function">sudo</span> <span class="token function">chown</span> -R root:wheel itlwm.kext<span class="token comment"># 加载驱动</span><span class="token function">sudo</span> kextload -v itlwm.kext</code></pre><p>加载驱动后还看不到效果，要使用WiFi工具<a href="https://github.com/OpenIntelWireless/HeliPort">HeliPort</a>查看。安装HeliPort后查看到有WiFi列表就代表此驱动适合设备。将测试没有问题的驱动放到 CLOVER - kexts - Other 目录下即可，下次开机会自动加载。</p><img src="https://xtvj.github.io/images/heliport_wifi.png" style="zoom: 100%; margin: 0px auto;" /> <p><strong>蓝牙驱动项目地址</strong>：<a href="https://github.com/OpenIntelWireless/IntelBluetoothFirmware">https://github.com/OpenIntelWireless/IntelBluetoothFirmware</a></p><p>下载后可执行以下命令测试：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 驱动程序上传固件</span><span class="token comment"># 给驱动分配执行权限</span><span class="token function">sudo</span> <span class="token function">chown</span> -R root:wheel IntelBluetoothFirmware.kext<span class="token comment"># 加载驱动</span><span class="token function">sudo</span> kextload -v IntelBluetoothFirmware.kext<span class="token comment">#设置面板上启用打开/关闭开关</span><span class="token comment"># 给驱动分配执行权限</span><span class="token function">sudo</span> <span class="token function">chown</span> -R root:wheel IntelBluetoothInjector.kext<span class="token comment"># 加载驱动</span><span class="token function">sudo</span> kextload -v IntelBluetoothInjector.kext</code></pre><p>同样放在CLOVER - kexts - Other 目录下即可（我测试时没效果，由于蓝牙设备型号在项目上有列出，放在目录后重启还是成功加载蓝牙了。）。</p><img src="https://xtvj.github.io/images/mac_bluetooth.png" style="zoom: 100%; margin: 0px auto;" /> <h3 id="OpenCore工具添加驱动">OpenCore工具添加驱动</h3><p>检测EFI文件内的OpenCore版本和OpenCore Configurator是否匹配，如果提示EFI内的版本过低就下载使用正确版本的OpenCore Configurator</p><p>下载的驱动放在单独的文件夹内，并把下载的驱动文件(非文件夹)复制到EFI→OC→Kexts文件夹内。然后使用OpenCore Configurator打开EFI里的Config.plist文件→Kernel-内核设置→快照添加→选择刚才下载的驱动文件夹。工具会自动把驱动文件的配置信息添加到Config.plist文件中。记得保存。</p><h3 id="mac-bash-profile配置重启后不生效的解决方法">mac ~/.bash_profile配置重启后不生效的解决方法</h3><p>zsh加载的是 ~/.zshrc文件，而 ‘.zshrc’ 文件中并没有定义任务环境变量。</p><p>解决办法在~/.zshrc文件最后，增加一行：</p><p>source ~/.bash_profile</p><h3 id="GIt设置代理">GIt设置代理</h3><p>在终端中：</p><pre class="language-none"><code class="language-none">git config --global http.proxy &#39;socks5:&#x2F;&#x2F;127.0.0.1:7890&#39;git config --global --unset http.proxy</code></pre><p>如果使用的是Github Desktop，在设置用户根目录下的**.gitconfig**文件</p><pre class="language-none"><code class="language-none">[https]    proxy &#x3D; http:&#x2F;127.0.0.1:7890[http]    proxy &#x3D; http:&#x2F;&#x2F;127.0.0.1:7890[git]    proxy &#x3D; socks5:&#x2F;&#x2F;127.0.0.1:7890</code></pre><h3 id="删除系统自带的ABC输入法">删除系统自带的ABC输入法</h3><p>使用<a href="https://www.fatcatsoftware.com/plisteditpro/">PlistEditPro</a>工具打开com.apple.HIToolbox.plist文件</p><pre class="language-none"><code class="language-none">sudo open ~&#x2F;Library&#x2F;Preferences&#x2F;com.apple.HIToolbox.plist</code></pre><p>找到选中“ Root ”—“ AppleEnabledInputSources ”下面有 0，1，2 等文件夹，找到第1个文件夹，待找到出现“ ABC ”关键字样的文件夹时，删除整个以数字命名的文件。</p><h3 id="不使用第三方工具从iPhone传文件到Mac">不使用第三方工具从iPhone传文件到Mac</h3><ul><li>从Apple菜单中，打开<font color=#4169E1>系统偏好设置</font>。</li><li>单击<font color=#4169E1>共享</font>选项卡。</li><li>找到<font color=#4169E1>文件共享</font>列，打开<font color=#4169E1>文件共享</font>。</li><li>在iPhone<font color=#4169E1>文件</font>中点击右上角的三点图标<font color=#4169E1>打开菜单</font>。</li><li>点击<font color=#4169E1>连接服务器</font>，输入Mac上显示的共享地址。</li><li>在iPhone中输入Mac电脑的账号密码进行连接。</li></ul><h3 id="Adobe-genuine-message-版权弹窗">Adobe genuine message 版权弹窗</h3><ol><li>关闭所有 Adobe 软件</li><li>sudo rm /Library/Application\ Support/Adobe/AdobeGCClient/AdobeGCClient.app/Contents/MacOS/AdobeGCClient</li><li>sudo chmod 0444 /Library/Application\ Support/Adobe/AdobeGCClient</li></ol><h3 id="使用Android-Studio自带JDK设置JAVA-HOME">使用Android Studio自带JDK设置JAVA_HOME</h3><p>如果使用zsh则在.zshrc文件中添加：</p><pre class="language-none"><code class="language-none">export JAVA_HOME&#x3D;&#x2F;Applications&#x2F;Android\ Studio.app&#x2F;Contents&#x2F;jre&#x2F;Contents&#x2F;Home</code></pre><h3 id="参考：">参考：</h3><ol><li><a href="https://www.sqlsec.com/2020/08/xps15.html">XPS15 9550 黑苹果折腾记录</a></li><li><a href="https://blog.csdn.net/zhangvalue/article/details/89736604">删除自带ABC输入法</a></li><li><a href="https://www.reddit.com/r/AdobeZii/comments/ga47c1/guide_to_disable_adobe_genuine_message_on_macos/">Guide to disable adobe genuine message on macos</a></li><li><a href="https://stackoverflow.com/a/43237101">Using JDK that is bundled inside Android Studio as JAVA_HOME on Mac</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;之前很多东西都懒得记录，现在发现改的东西多了，很多细节很容易就忘，故做此流水记录。&lt;/p&gt;
&lt;p&gt;首选AppStore  &amp;gt;次选Brew  &amp;gt;再者Dmg  &amp;gt;最后PKG。&lt;/p&gt;
&lt;p&gt;由于我不用appstore安装应用，固能用brew方式安装的应用&lt;st</summary>
      
    
    
    
    <category term="Mac" scheme="https://xtvj.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://xtvj.github.io/tags/Mac/"/>
    
    <category term="技巧" scheme="https://xtvj.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>Hexo配置记录</title>
    <link href="https://xtvj.github.io/2020/10/20/Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2020/10/20/Hexo%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95/</id>
    <published>2020-10-19T18:02:06.000Z</published>
    <updated>2020-12-24T14:50:47.000Z</updated>
    
    <content type="html"><![CDATA[<p>环境：<strong>macOS Catalina</strong> 10.15.4  <strong>hexo</strong> 5.2.0 <strong>hexo-cli</strong> 4.2.0 <strong>Nodejs</strong> 12.19.0 <strong>Next</strong> 7.8.0</p><p>由Windows转到Mac后一直用Next3.X版本，并没有更新就一直使用，今天记录终端改造编辑图片时发现有个警告，就修改了下Hexo的配置，折腾起来就换了最新的版本。以前都不记录，到升级的时候发现改的太多，也不知道动了哪些就不敢升了。建了个新目录重新配置Hexo，缺点就是Git提交时覆盖了以往所有记录。</p><p>以下记录花费时间才找到方式解决的，对于大部分不用查阅就可修改使用的不作记录。</p><h3 id="1-修改页面宽度">1.修改页面宽度</h3><p>打开/themes/next/source/css/_variables/base.styl文件，找到Layout sizes字段修改如下</p><pre class="language-//" data-language="//"><div class="caption"><span>Layout sizes</span></div><code class="language-//">&#x2F;&#x2F; Layout sizes&#x2F;&#x2F; --------------------------------------------------$content-desktop                &#x3D; 82%;&#x2F;&#x2F;修改为占屏幕的82%，原先是固定值$content-desktop-large          &#x3D; 82%;$content-desktop-largest        &#x3D; 82%;</code></pre><span id="more"></span><h3 id="2-中文菜单">2.中文菜单</h3><p>默认language改为zh-Hans显示的是英文，改为zh-CN才显示中文。莫名其妙。</p><h3 id="3-Gitalk评论系统">3.Gitalk评论系统</h3><p>来得力在国内会偶尔加载不出来，转用Gitalk配置好后提交，发现Gitalk还是不能正常显示，提示“<strong>未找到相关的 Issues 进行评论</strong>”。直接上搜索引擎，搜索了半天没找到原因。再去点github上的仓库，发现很早前已经关闭了Issues。Gitalk使用Issues当评论存储，<strong>打开仓库Issues即可</strong>。</p><h3 id="4-Google-SEO配置">4.Google SEO配置</h3><p>安装sitemap生成插件</p><pre class="language-none"><code class="language-none">npm install hexo-generator-sitemap --save</code></pre><p>在站点_config.yml文件内添加：</p><pre class="language-none"><code class="language-none">sitemap:  path: sitemap.xml  # template: .&#x2F;sitemap_template.xml #不用默认模板，不然生成的是空文件。</code></pre><p>在source文件夹下添加robots.txt文件，内容如下（根据自己站点需要配置）：</p><pre class="language-none"><code class="language-none">User-agent: BaiduspiderDisallow: &#x2F;User-agent: baiduspiderDisallow: &#x2F;User-agent: Googlebot-imageDisallow: &#x2F;User-agent: *Disallow: &#x2F;resources&#x2F; Disallow: &#x2F;vendors&#x2F;Disallow: &#x2F;js&#x2F;Disallow: &#x2F;css&#x2F;Disallow: &#x2F;fonts&#x2F;Disallow: &#x2F;vendors&#x2F;Disallow: &#x2F;fancybox&#x2F;Disallow: &#x2F;images&#x2F;Disallow: .jpg$Disallow: .png$Disallow: .gif$Disallow: &#x2F;categories&#x2F;Sitemap: https:&#x2F;&#x2F;xtvj.github.io&#x2F;sitemap.xml</code></pre><p><code>Allow</code>字段的值即为允许搜索引擎爬区的内容，需要将<code>https://xtvj.github.io</code>改成自己的域名。</p><p>打开<a href="https://www.google.com/webmasters/">Google Search Console</a>，添加博客地址。下载谷歌的<code>HTML</code>文件，复制到public文件夹下，不要放在source文件夹内，因为在source内时，如果执行hexo g会在html文件上更改内容，导致验证失败。</p><p>如果站内外连过多，搜索引擎会降权，可安装插件不让搜索引擎爬取外连：</p><pre class="language-none"><code class="language-none">npm install hexo-autonofollow --save</code></pre><p>在站点_config.yml文件下加入：</p><pre class="language-none"><code class="language-none">nofollow:enable: trueexclude:    - exclude1.com #排除的网址，即可让搜索引擎爬取的外连</code></pre><p>再在谷歌站点地图中添加站点的sitemap页面即可。</p><h3 id="5-文章目录不能跳转">5.文章目录不能跳转</h3><p>这是Next7.8.0的Bug，英文目录可以跳转，中文不能。见<a href="https://github.com/theme-next/hexo-theme-next/issues/1543">Issues</a>和<a href="https://github.com/theme-next/hexo-theme-next/pull/1540">1540</a>。</p><hr><h3 id="更新">更新</h3><p>2020.12.24 由于Next主题的种种不友好，很多功能需要自己一点点的去修改配置，甚至一些简单的功能都不支持。改用<a href="https://github.com/jerryc127/hexo-theme-butterfly">Butterfly</a>。</p><h3 id="文章页top-img、cover设置">文章页top_img、cover设置</h3><p>top_img即文章页顶部图片的设置不在config文件内，而是在每个文章的md文件中配置。</p><p>主页中每个文章的图片也是在文章的md文件中设置cover。</p><pre class="language-none"><code class="language-none">title: Hexo配置记录date: 2020-10-20 02:02:06tags: Hexocategories: Hexotop_img: https:&#x2F;&#x2F;xtvj.github.io&#x2F;images&#x2F;hexoandgithub.jpgcover: https:&#x2F;&#x2F;xtvj.github.io&#x2F;images&#x2F;hexoandgithub.jpg</code></pre>]]></content>
    
    
    <summary type="html">&lt;p&gt;环境：&lt;strong&gt;macOS Catalina&lt;/strong&gt; 10.15.4  &lt;strong&gt;hexo&lt;/strong&gt; 5.2.0 &lt;strong&gt;hexo-cli&lt;/strong&gt; 4.2.0 &lt;strong&gt;Nodejs&lt;/strong&gt; 12.19.0 &lt;strong&gt;Next&lt;/strong&gt; 7.8.0&lt;/p&gt;
&lt;p&gt;由Windows转到Mac后一直用Next3.X版本，并没有更新就一直使用，今天记录终端改造编辑图片时发现有个警告，就修改了下Hexo的配置，折腾起来就换了最新的版本。以前都不记录，到升级的时候发现改的太多，也不知道动了哪些就不敢升了。建了个新目录重新配置Hexo，缺点就是Git提交时覆盖了以往所有记录。&lt;/p&gt;
&lt;p&gt;以下记录花费时间才找到方式解决的，对于大部分不用查阅就可修改使用的不作记录。&lt;/p&gt;
&lt;h3 id=&quot;1-修改页面宽度&quot;&gt;1.修改页面宽度&lt;/h3&gt;
&lt;p&gt;打开/themes/next/source/css/_variables/base.styl文件，找到Layout sizes字段修改如下&lt;/p&gt;
&lt;pre class=&quot;language-//&quot; data-language=&quot;//&quot;&gt;&lt;div class=&quot;caption&quot;&gt;&lt;span&gt;Layout sizes&lt;/span&gt;&lt;/div&gt;&lt;code class=&quot;language-//&quot;&gt;&amp;#x2F;&amp;#x2F; Layout sizes
&amp;#x2F;&amp;#x2F; --------------------------------------------------
$content-desktop                &amp;#x3D; 82%;&amp;#x2F;&amp;#x2F;修改为占屏幕的82%，原先是固定值
$content-desktop-large          &amp;#x3D; 82%;
$content-desktop-largest        &amp;#x3D; 82%;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Hexo" scheme="https://xtvj.github.io/categories/Hexo/"/>
    
    
    <category term="Hexo" scheme="https://xtvj.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Mac上好用又漂亮的终端</title>
    <link href="https://xtvj.github.io/2020/10/19/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E5%8F%88%E6%BC%82%E4%BA%AE%E7%9A%84%E7%BB%88%E7%AB%AF/"/>
    <id>https://xtvj.github.io/2020/10/19/Mac%E4%B8%8A%E5%A5%BD%E7%94%A8%E5%8F%88%E6%BC%82%E4%BA%AE%E7%9A%84%E7%BB%88%E7%AB%AF/</id>
    <published>2020-10-19T11:45:27.000Z</published>
    <updated>2022-02-22T02:40:05.615Z</updated>
    
    <content type="html"><![CDATA[<p>由于zsh可使用插件，并且Github上有很多搭配iTerm的开源项目，由此iTerm + zsh是Mac 终端利器一点不为过。</p><img src="https://xtvj.github.io/images/Iterm2.png" style="zoom: 50%;margin: 0 auto;" /><h4 id="iTerm2">iTerm2</h4><p>安装brew：</p><pre class="language-none"><code class="language-none">&#x2F;bin&#x2F;bash -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;Homebrew&#x2F;install&#x2F;master&#x2F;install.sh)&quot;</code></pre><p>安装iTerm2：</p><pre class="language-none"><code class="language-none">brew install iterm2</code></pre><p>或去官网下载安装：<a href="https://iterm2.com/downloads.html">https://iterm2.com/downloads.html</a></p><span id="more"></span><h4 id="代码配色">代码配色</h4><p>使用 <a href="https://github.com/mbadolato/iTerm2-Color-Schemes">iTerm2-Color-Schemes</a> 的配色合集</p><pre class="language-none"><code class="language-none">mkdir ~&#x2F;.iterm2 &amp;&amp; cd ~&#x2F;.iterm2git clone https:&#x2F;&#x2F;github.com&#x2F;mbadolato&#x2F;iTerm2-Color-Schemes</code></pre><h4 id="导入配色方案">导入配色方案</h4><p>Preferences…→Profiles→Colors→Color Presets…→Import…→选择刚才.iterm2的子文件夹schemes下的所有文件。</p><p>导入后重新打开iTerm2再在Colors Presets中选择想用的配色。上图所用配色为Dracula</p><h4 id="字体">字体</h4><p>如果不装字体，配置中有非ascii字符编码，会显示问号乱码，这两个问号本来是好看的箭头，但是箭头在当前字体中是不会被显示的……所以解决方法是重新下载一个支持非ascii编码的字体。</p><pre class="language-none"><code class="language-none"># git clonecd ~&#x2F;.iterm2git clone https:&#x2F;&#x2F;github.com&#x2F;powerline&#x2F;fonts.git# installcd fonts.&#x2F;install.sh</code></pre><p>然后按照下面的设置（记得选一个名字后面有for Powerline的字体）</p><img src="https://xtvj.github.io/images/字体.png" style="zoom: 50%;margin: 0 auto;" /><h4 id="设置默认窗口大小：">设置默认窗口大小：</h4><p>Preferences…→Profiles→Window→Settings for New Windows ：120：30</p><h4 id="安装zsh">安装zsh</h4><pre class="language-none"><code class="language-none">brew install zsh</code></pre><p>默认的 shell 是 bash，需要修改为 zsh：</p><pre class="language-none"><code class="language-none">sudo sh -c &quot;echo $(which zsh) &gt;&gt; &#x2F;etc&#x2F;shells&quot;chsh -s $(which zsh)</code></pre><p>使用<a href="https://github.com/robbyrussell/oh-my-zsh">oh-my-zsh</a>配置zsh</p><pre class="language-none"><code class="language-none">sh -c &quot;$(curl -fsSL https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;robbyrussell&#x2F;oh-my-zsh&#x2F;master&#x2F;tools&#x2F;install.sh)&quot;</code></pre><p>安装好后可以看到界面发生了变化，同时会在用户根目录下面产生一个名为 <code>.zshrc</code> 的配置文件，以后主要就是修改它了。</p><h4 id="配置主题">配置主题</h4><p>主题文件存储在 <code>~/.oh-my-zsh/themes</code> 目录下，你也可以使用其他的。</p><p>推荐 <a href="https://github.com/bhilburn/powerlevel9k">powerlevel9k</a> 的高颜值主题</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;bhilburn&#x2F;powerlevel9k.git ~&#x2F;.oh-my-zsh&#x2F;custom&#x2F;themes&#x2F;powerlevel9k</code></pre><p>然后修改 <code>zsh</code> 主题配置：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;修改.zshrc文件（在Mac用户根目录）ZSH_THEME&#x3D;&quot;powerlevel9k&#x2F;powerlevel9k&quot;</code></pre><p>修改配置文件后一定要记得让配置生效，使用 <code>source</code> 命令：</p><pre class="language-none"><code class="language-none">source ~&#x2F;.zshrc</code></pre><h4 id="zsh-插件">zsh 插件</h4><p><strong>插件使用方式：编辑.zshrc文件，文件中有一行plugins=(git)，在括号中添加想使用的插件名，记得加空格分开</strong></p><h5 id="extract">extract</h5><p>用于解压，不用另行安装，直接在plugins中加就行 <a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/extract">官方说明</a></p><h5 id="autojump">autojump</h5><p>自动跳转目录，只能当使用cd命令进入文件夹后，才能使用<code>j 文件夹名</code>进入文件夹</p><p>安装：<code>brew install autojump</code></p><p>再执行一句命令：</p><pre class="language-none"><code class="language-none">[[ -s $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh ]] &amp;&amp; . $(brew --prefix)&#x2F;etc&#x2F;profile.d&#x2F;autojump.sh</code></pre><h5 id="zsh-syntax-highlighting">zsh-syntax-highlighting</h5><p>亮亮功能，安装</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</code></pre><h5 id="zsh-autosuggestions">zsh-autosuggestions</h5><p>安装：</p><pre class="language-none"><code class="language-none">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</code></pre><p>自动提示。历史记录可在用户根目录.zsh_history文件内查看到。</p><h5 id="macos">macos</h5><p>Mac下快捷命令应用，参考<a href="https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/macos">官方说明</a>，可实现在终端快速定位到访达目录等操作。</p><p>自用.zshrc中的plugins字段：plugins=(git extract autojump zsh-syntax-highlighting zsh-autosuggestions macos)</p><p>最后再执行一次</p><pre class="language-none"><code class="language-none">source ~&#x2F;.zshrc</code></pre><hr><h4 id="完成上面设置后终端会提示："><s>完成上面设置后终端会提示</s>：</h4><p>目前已无此提示</p><pre class="language-none"><code class="language-none">[oh-my-zsh] Insecure completion-dependent directories detected:drwxrwxr-x  7 **  admin  224 Nov  3 12:31 &#x2F;usr&#x2F;local&#x2F;share&#x2F;zshdrwxrwxr-x  5 **  admin  160 Nov  3 12:34 &#x2F;usr&#x2F;local&#x2F;share&#x2F;zsh&#x2F;site-functions[oh-my-zsh] For safety, we will not load completions from these directories until[oh-my-zsh] you fix their permissions and ownership and restart zsh.[oh-my-zsh] See the above list for directories with group or other writability.[oh-my-zsh] To fix your permissions you can do so by disabling[oh-my-zsh] the write permission of &quot;group&quot; and &quot;others&quot; and making sure that the[oh-my-zsh] owner of these directories is either root or your current user.[oh-my-zsh] The following command may help:[oh-my-zsh]     compaudit | xargs chmod g-w,o-w[oh-my-zsh] If the above didn&#39;t help or you want to skip the verification of[oh-my-zsh] insecure directories you can set the variable ZSH_DISABLE_COMPFIX to[oh-my-zsh] &quot;true&quot; before oh-my-zsh is sourced in your zshrc file.</code></pre><p><s>按照说明在.zshrc文件<strong>第一行</strong>中添加 ZSH_DISABLE_COMPFIX=true即可。</s></p><p>参考文章：</p><p><a href="https://blog.biezhi.me/2018/11/build-a-beautiful-mac-terminal-environment.html">打造 Mac 下高颜值好用的终端环境</a></p><p><a href="https://blog.csdn.net/gggg989898/article/details/108882880">Mac terminal终端或iterm2出现问号解决方案</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;由于zsh可使用插件，并且Github上有很多搭配iTerm的开源项目，由此iTerm + zsh是Mac 终端利器一点不为过。&lt;/p&gt;
&lt;img src=&quot;https://xtvj.github.io/images/Iterm2.png&quot; style=&quot;zoom: 50%;margin: 0 auto;&quot; /&gt;
&lt;h4 id=&quot;iTerm2&quot;&gt;iTerm2&lt;/h4&gt;
&lt;p&gt;安装brew：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;bin&amp;#x2F;bash -c &amp;quot;$(curl -fsSL https:&amp;#x2F;&amp;#x2F;raw.githubusercontent.com&amp;#x2F;Homebrew&amp;#x2F;install&amp;#x2F;master&amp;#x2F;install.sh)&amp;quot;&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装iTerm2：&lt;/p&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;brew install iterm2&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或去官网下载安装：&lt;a href=&quot;https://iterm2.com/downloads.html&quot;&gt;https://iterm2.com/downloads.html&lt;/a&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="Mac" scheme="https://xtvj.github.io/categories/Mac/"/>
    
    
    <category term="Mac" scheme="https://xtvj.github.io/tags/Mac/"/>
    
    <category term="技巧" scheme="https://xtvj.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>设置Markdown表格各列的列宽</title>
    <link href="https://xtvj.github.io/2020/09/08/%E8%AE%BE%E7%BD%AEMarkdown%E8%A1%A8%E6%A0%BC%E5%90%84%E5%88%97%E7%9A%84%E5%88%97%E5%AE%BD/"/>
    <id>https://xtvj.github.io/2020/09/08/%E8%AE%BE%E7%BD%AEMarkdown%E8%A1%A8%E6%A0%BC%E5%90%84%E5%88%97%E7%9A%84%E5%88%97%E5%AE%BD/</id>
    <published>2020-09-08T04:28:24.000Z</published>
    <updated>2020-09-09T04:25:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>在表格前面加入以下代码，有几列就加入几个参数，nth-of-type(1)第一列，nth-of-type(2)第二列。在width中加入想要设置的列宽。每列都设置一下，起初少设置一两列结果没显示成功，以为此方式不能用，后来全设置后显示效果不错。</p><pre class="language-none"><code class="language-none">&lt;style&gt;table th:nth-of-type(1) &#123;    width: 30px;&#125;table th:nth-of-type(2) &#123;    width: 100px;&#125;table th:nth-of-type(3) &#123;    width: 120px;&#125;table th:nth-of-type(4) &#123;    width: 60px;&#125;&lt;&#x2F;style&gt;</code></pre><p>效果页面：<a href="https://xtvj.github.io/2020/07/06/%E8%A7%82%E7%9C%8B%E7%94%B5%E5%BD%B1%E8%AE%B0%E5%BD%95/"> 观看电影记录</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在表格前面加入以下代码，有几列就加入几个参数，nth-of-type(1)第一列，nth-of-type(2)第二列。在width中加入想要设置的列宽。每列都设置一下，起初少设置一两列结果没显示成功，以为此方式不能用，后来全设置后显示效果不错。&lt;/p&gt;
&lt;pre class</summary>
      
    
    
    
    
    <category term="Markdown" scheme="https://xtvj.github.io/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>Markdown图片居中并添加超链接</title>
    <link href="https://xtvj.github.io/2020/08/20/Markdown%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%B6%85%E9%93%BE%E6%8E%A5/"/>
    <id>https://xtvj.github.io/2020/08/20/Markdown%E5%9B%BE%E7%89%87%E5%B1%85%E4%B8%AD%E5%B9%B6%E6%B7%BB%E5%8A%A0%E8%B6%85%E9%93%BE%E6%8E%A5/</id>
    <published>2020-08-20T08:09:16.000Z</published>
    <updated>2020-10-19T18:53:17.000Z</updated>
    
    <content type="html"><![CDATA[<pre class="language-none"><code class="language-none">&lt;center&gt;    &lt;img style&#x3D;&quot;zoom: 33%;&quot;    src&#x3D;&quot;https:&#x2F;&#x2F;xtvj.github.io&#x2F;images&#x2F;Git和GitHub1.jpg&quot;    &lt;div onclick&#x3D;&quot;window.open(&#39;https:&#x2F;&#x2F;www.bilibili.com&#x2F;video&#x2F;BV1kg4y187VP&#39;)&quot;&gt;&lt;br&gt;    &lt;div &gt;第51集 Git和GitHub（1）&lt;&#x2F;div&gt;&lt;&#x2F;center&gt;</code></pre><p>效果如下：</p><center>    <img style="zoom: 33%;"    src="https://xtvj.github.io/images/Git和GitHub1.jpg"    <div onclick="window.open('https://www.bilibili.com/video/BV1kg4y187VP')"><br>    <div >第51集 Git和GitHub（1）</div></center>]]></content>
    
    
      
      
    <summary type="html">&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;lt;center&amp;gt;
    &amp;lt;img style&amp;#x3D;&amp;quot;zoom: 33%;&amp;quot;
    src&amp;#x3D;&amp;quot;https</summary>
      
    
    
    
    
    <category term="Hexo" scheme="https://xtvj.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>影视观后记录</title>
    <link href="https://xtvj.github.io/2020/07/06/%E5%BD%B1%E8%A7%86%E8%A7%82%E5%90%8E%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2020/07/06/%E5%BD%B1%E8%A7%86%E8%A7%82%E5%90%8E%E8%AE%B0%E5%BD%95/</id>
    <published>2020-07-06T08:20:22.000Z</published>
    <updated>2022-03-14T01:24:42.891Z</updated>
    
    <content type="html"><![CDATA[<p>看过的电影太多了，好多都想不起来当初观看时的印象，2020年4月萌生记录日常的想法，随写下此文。记录只是写下记录的那一个时间点的个人想法，存到自己风烛残年之时用来回忆。</p><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">影片名</th><th style="text-align:center">中文名</th><th style="text-align:center">年代</th><th style="text-align:center">观看日期</th><th style="text-align:center">类型</th><th>观后记录</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">Just Mercy</td><td style="text-align:center">正义的慈悲</td><td style="text-align:center">2019</td><td style="text-align:center">2020/4/8</td><td style="text-align:center">剧情，真实事件改编</td><td>讲一位黑人律师为贫困罪犯洗冤的故事。电影没有大的波澜，主要是伸张正义，有抨击美国种族歧视的味道。和《白皮书》差不多。电影一般般，主要是以真实事件为背景的故事，真实事件才动人。不会看第二遍。</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">Bad Boys</td><td style="text-align:center">绝地战警</td><td style="text-align:center">1995</td><td style="text-align:center">2020/4/9</td><td style="text-align:center">动作片，警察与毒贩</td><td>毒贩偷了警局里的毒品，然后警察破案的过程。电影1小时58分，只有开头十几分钟和结尾二十来分钟动作好看，中间大部分时间很拖，看的我连按快进。</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">The Gentlemen</td><td style="text-align:center">绅士们</td><td style="text-align:center">2020</td><td style="text-align:center">2020/4/10<br/>(0-14分钟)<br>2020/10/13<br/>(全部)</td><td style="text-align:center">剧情，毒贩</td><td>2020.4.10一大段讲述的画面，看不下去了。<br />2020.10.13四月份下载的蓝光版本(8.53G)没舍得删，今天就想看看，为避免再次看不懂就先在B站看了小片片解说版，对剧情了解了后再从头看，就一目了然了。从开头两个男人在房间里谈话，一直到一个男人要走，这两个男人的画面是当下的时间线，别的画面都是其中一个男人讲出来了。这样就容易让没看过解说的懂剧情了。虽然看过解说再看的电影，但看的过程中一点也不乏味，超好看吧。至于之前为什么没看进去，可能是语言不通看到14分钟没明白讲什么。</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">名探偵コナン 瞳の中の暗殺者</td><td style="text-align:center">名侦探柯南：瞳孔中的暗杀者</td><td style="text-align:center">2000</td><td style="text-align:center">2020/4/25</td><td style="text-align:center">刑侦，破案</td><td>N年前看过，只记得一个场景，就是硝化反应没测出来是因为凶手开枪时用伞挡着了。今天重看，感觉电影的好多逻辑有点完美。</td></tr><tr><td style="text-align:center">5</td><td style="text-align:center">The Invisible Man</td><td style="text-align:center">隐形人</td><td style="text-align:center">2020</td><td style="text-align:center">2020/4/28</td><td style="text-align:center">科幻，惊悚</td><td>一个披着科幻的外衣来拍的惊悚片，就是写隐形衣，然后人隐形而已，别的跟科幻不沾边，也没有什么大场面。电影的前几分钟看的想关掉播放器，电影的中后部分的有些剧情也能看着前面的猜到后面的。没片的时候可以一看，不会再看第二次。</td></tr><tr><td style="text-align:center">6</td><td style="text-align:center">American History X</td><td style="text-align:center">美国X档案</td><td style="text-align:center">1998</td><td style="text-align:center">2020/4/30</td><td style="text-align:center">剧情，种族歧视</td><td>故事讲的很连贯，没有出现前一段跟后一段内容看不明白说什么的地方。讲黑人与白人之间的歧视。看过太多美国种族歧视的电影了，今天再看这部感觉也就一般般吧。没有什么特别的地方。可能是电影是22年之久前拍的才在IDMB上评分这么高吧。</td></tr><tr><td style="text-align:center">7</td><td style="text-align:center">El hoyo</td><td style="text-align:center">饥饿站台</td><td style="text-align:center">2019</td><td style="text-align:center">2020/5/6</td><td style="text-align:center">惊悚</td><td>在一栋333层的楼里，上下楼房间中间是通的，有一个上下运动的站台来给各个楼层里的人送食物。整个电影画面有时候带一点血腥，剧情单一。快进看的才看完。</td></tr><tr><td style="text-align:center">8</td><td style="text-align:center">Das Boot</td><td style="text-align:center">从海底出击</td><td style="text-align:center">1981</td><td style="text-align:center">2020/5/10</td><td style="text-align:center">战争/剧情（三小时版）</td><td>一德国潜艇作战过程，电影全程绝大部分视角都是在潜艇里。看完回味一下感觉剧情简单枯燥，没什么意思。但在看的过程中，没停顿过，过程都很合理，不至于看不下去。</td></tr><tr><td style="text-align:center">9</td><td style="text-align:center">Extraction</td><td style="text-align:center">惊天营救</td><td style="text-align:center">2020</td><td style="text-align:center">2020/7/4</td><td style="text-align:center">动作</td><td>雷神的主演演的这部电影，剧情简单，就是一个黑帮绑架了另一个黑帮老大的儿子，而后被绑架的这一方找雇佣兵解救人质的过程。场面还算可以，过程看的还算顺畅，不像国产电影里前后剧情跳跃很大。</td></tr><tr><td style="text-align:center">10</td><td style="text-align:center">容疑者Xの献身</td><td style="text-align:center">嫌疑人X的献身</td><td style="text-align:center">2008</td><td style="text-align:center">2020/7/5</td><td style="text-align:center">剧情 / 悬疑 / 犯罪</td><td>看过东野的书，也看过国产的那部电影，电影网站上更新了才发现的。电影情节和书中写的很一致，不像国产的那部有很多出入。看过书后能很好的融入这部电影。感情戏也很丰富。</td></tr><tr><td style="text-align:center">11</td><td style="text-align:center">Greyhound</td><td style="text-align:center">灰猎犬号</td><td style="text-align:center">2020</td><td style="text-align:center">2020/9/3</td><td style="text-align:center">战争</td><td>跟《从海底出击》差不多，不过正好是从水下来到水面上，一支护送商船的舰队与潜艇之间的对战，剧情不罗嗦，甚至开头对主角的背景介绍和感情戏都很短，看的还是很过瘾的。另外头一次对电影的主角进行关注，发现看过的《阿甘正传》、《幸福终点站》、《萨利机长》都是同一主角。</td></tr><tr><td style="text-align:center">12</td><td style="text-align:center">Raised by Wolves</td><td style="text-align:center">异星灾变（第一季）</td><td style="text-align:center">2020</td><td style="text-align:center">2020/9/12<br/>(1-5)<br/>2020/9/18<br/>(6-7)<br/>NULL<br/>(8-9)<br/>2020/10/01<br/>(10)</td><td style="text-align:center">科幻</td><td>前三集看的很过瘾，4 、5、6、7感觉越来越俗套。观望中。8-9集还凑合吧，跟前面几集差不多，没有什么震撼的画面，也没有什么震撼的剧情。父亲手指不停的敲动，还真的是摩斯码，提前想到了。第10集简直了，什么鬼啊，像别人一直安利我一部国产剧，我不看好，一直不愿意看，最后实在是别人太热情就去看了下，认认真真看完后发现是雷人剧还浪费了很久的时间，想捶他的那种感觉。这剧就是那种垃圾剧吧。当我看到一条蛇飞出来时，直接惊呆了，是蛇，蛇，不是龙，没有脚，没有翅膀，还是会飞的蛇，有机物组成的会吸奶的蛇。异形的电影我都看过，这出入太大接受不了，更何况剧情不太通。跟谁有仇就推荐这部剧给他吧。</td></tr><tr><td style="text-align:center">13</td><td style="text-align:center">沉默的真相</td><td style="text-align:center">沉默的真相</td><td style="text-align:center">2020</td><td style="text-align:center">2020/9/28</td><td style="text-align:center">警黑</td><td>以前在微博上看到吹这个剧那个剧好的，有时也忍不住看看，结果就是垃圾片，次数多了就不信任微博中的此类信息。但这次在别的如V2、知乎、B站影评等站点看到推荐此剧，加上播完了后豆瓣评分高居不下就下来看看。第一集感觉还行，不怎么拖泥带水，第二集感觉就有点下划，然后在我意识中就看不下去了，就频繁地按着快进键看完拉下来的十集。对，都看完了，都是快进着看完的，遇到有些感觉有内容的就停下来看，也是1.5倍速。张超在判决时说自己无罪这个我猜到了；手机发贴在几个地方出现时，就猜到多人合伙，而且猜测前面出现的人全部参与；最后伸张正义，歌颂工作成绩之类的更是猜到了。豆瓣上的评论‘站着过审’、‘年度最佳’之类的只能说太年轻。</td></tr><tr><td style="text-align:center">14</td><td style="text-align:center">추격자</td><td style="text-align:center">追击者</td><td style="text-align:center">2008</td><td style="text-align:center">2020/10/17</td><td style="text-align:center">犯罪</td><td>看到电影网站上这电影评分不低，就下载来看，但又静不下心来看，就先看了电影解说，感觉剧情一般般，但故事抨击了韩国警力，才有这么高的评分吧。韩国电影就是敢写敢拍敢播。</td></tr><tr><td style="text-align:center">15</td><td style="text-align:center">黑社会</td><td style="text-align:center">黑社会</td><td style="text-align:center">2005</td><td style="text-align:center">2020/10/20</td><td style="text-align:center">黑社会(100分钟)</td><td>有一种感觉，就像长大后回想小时候做的事，发现以前做的事特蠢，特别不理解的那种感觉。2020年第一次看这部2005年的电影就是这种感觉。这种电影有这么多明星帮衬浪费了。不过也是啊，毕竟15年前的电影了，那个时候我刚上高中，学校附近的学生还非主流呢，听别人讲还有半夜拿刀在网吧挨个抢钱的呢。</td></tr><tr><td style="text-align:center">16</td><td style="text-align:center">변호인</td><td style="text-align:center">辩护人</td><td style="text-align:center">2013</td><td style="text-align:center">2020/10/28</td><td style="text-align:center">政治，真实事件改编</td><td>一年之前我是很少看韩国电影的，这一年看了不少韩国电影。拍的确实不错。像《出租车司机》、《熔炉》等一些才是真正的电影，国内拍的那些打来打去，爱来爱去的那顶多算是个故事会。据维基百科说此电影公映一年后，法院还平反了五个孩子的罪名。这种引起改变的东西，是最有价值的。记得还有一部韩国电影讲的是找失踪小孩的，也是真事改编，那部和这部电影里的情节在国内也有吧。看到这样的电影就不免要和国内的环境做对比，平时说话都不敢说真实想法，甚至在这个没人访问的外网网站上都不敢多写一点真实的观点，而人家可以拍出这样的电影还公映了，光说中国世界第二第二的，感觉都还没超过一直被大多数国人蔑视的韩国。</td></tr><tr><td style="text-align:center">17</td><td style="text-align:center">소원</td><td style="text-align:center">素缓</td><td style="text-align:center">2013</td><td style="text-align:center">2020/10/30<br/>(0-45分钟)</td><td style="text-align:center">犯罪，真实事件改编</td><td>看了四十五分钟，实在不忍看下去了。当素缓看到自己排泄袋在床上破裂时，那种心痛真的无法抑制，只能停下播放器，去网上找电影解说版本去看。查了百科，现实中的罪犯，是17项前科的惯犯，但过两个月就要被释放了，百科上的说法是这个案件韩国人都公愤了，也迫使了韩国法律的修改。单讲电影一般般吧，但这是事实事件改编的电影，背后的真事却令人发指。</td></tr><tr><td style="text-align:center">18</td><td style="text-align:center">The Mandalorian</td><td style="text-align:center">曼达洛人</td><td style="text-align:center">2020</td><td style="text-align:center">2020/10/31<br/>(S02E01)<br/>2020/11/07<br/>(S02E02)<br/>2020/11/14<br/>(S02E03)<br/>2020/11/20<br/>(S02E04)<br/>2020/11/29<br/>(S02E05)<br/>2020/12/05<br/>(S02E06)<br/>2020/12/12<br/>(S02E07)<br/>2020/12/19<br/>(S02E08)</td><td style="text-align:center">星战，科幻</td><td>S02E01、还是一集一个Boss，这集是主角在寻找同类的路上打莽蛇，他们称为龙。看来是不是只要体型大的都被外国人称为龙哈。<br/>S02E02、这集的期待程度已经没有第一集强，但还是第一时间下载高清版本，今天等不到单独字幕就看了在线版本。依然一集一个Boss，但这集有点短，结束的时候有种“就这么没了”的感觉，剧情一般般，画面效果好。<br/>S02E03、前两集基本都是守着时间等更新，这一集出来一天了我才想起来去看，正好字幕也出来了。还是一集一个任务，这集是帮别人抢武器和飞船。风暴兵很多，很有星战的味道。<br/>S02E04、这集是看的时候没带中文字幕，英文字幕加画面能大致看懂。感觉这集太短，战斗画面也不太利索，甚至这集结束的那几十秒还要挖个坑，感觉这种一集一个Boss然后结束时挖坑是这部剧固定模式了。 第二天带上中文字幕重看，发现之前漏掉了很多细节，之所以觉得战斗不利索是因为那个人不是战士，是为减刑来帮忙的，那个实验室是用绝地武士的血来做实验的，还有星球上有个奸细在主角的飞船上安了追踪器。果然语言真的是一大障碍。<br/>S02E05、这集出现了绝地武士，剧集时长太短、场面太小、打斗也不怎么精彩，感觉唯一的作用就是说出了小尤达的名字。<br/>S02E06、一集比一集短了，这集去掉结束曲还不到30分钟，再去掉前集回顾就更少了。<br/>S02E07、同上一集一样，很短，打斗场面也不激烈，就是去一个基地取了一个坐标，期间打了一架而已。对剧情帮助就这么点用。<br/>S02E08、跟前面几集水平差不多，就是luke出场的时候还是有点精彩。</td></tr><tr><td style="text-align:center">19</td><td style="text-align:center">The Social Dilemma</td><td style="text-align:center">监视资本主义：智能陷阱</td><td style="text-align:center">2020</td><td style="text-align:center">2020/11/12</td><td style="text-align:center">纪录片</td><td>今天凌晨睡不着，就拿着iPad看起这部已经下载好的纪录片了。说实话我的感受就是没有什么感受，甚至这个观后感都懒的写。这部纪录片之所以在国内很流行，应该是国内人的思想比较局限吧，也可能认知比较少，我只能这么相当然的理解。下午写代码的时候，来了一条骚扰短信，看了一眼号码就不想再解锁手机去看内容了。可是几十秒不到的时间还是打开手机拉黑号码，然后索性彻底关闭短信的通知。现代的科技是好的，被别有心机的人利用了才成了智能陷阱。比如说在网上看到过很多关于游戏的争执，一边说游戏好，沉迷了是自己自制力不行，别怪游戏，一边说游戏不好，想尽办法不去玩，但最后还是忍不住去玩。在我看来封杀大部分游戏，只留对自己业务正相关的几个，这种操作才是毒瘤，才是智能的陷阱。</td></tr><tr><td style="text-align:center">20</td><td style="text-align:center">Escape from the Planet of the Apes</td><td style="text-align:center">逃离猩球</td><td style="text-align:center">1971</td><td style="text-align:center">2020/11/24</td><td style="text-align:center">科幻片</td><td>这个系列的电影在我上大学的时候都看过，当时就图个新鲜。现在再重看，就不单单从科幻角度图个视觉感了。刚才看的时候好多感悟，但没立即暂停电影来写东西，过了一会就忘了个大概，赶紧用笔写下一点再等一会码字。电影给我的感觉还是表现美国社会状态的。法律真的很重要，职位再高也没滥用权力，还是从法律角度去解决问题，跟当下美国大选的胶着状态很应景。一个“猴子宇航员”怀孕，要不要堕胎来避免以后人猿大战，还要讲法？这些都是骨子里潜意识的东西，先考虑法律还是先考虑问题。1971年的电影，历史比我年龄大到将近两倍电影，真的还不错。</td></tr><tr><td style="text-align:center">21</td><td style="text-align:center">Conquest of the Planet of the Apes</td><td style="text-align:center">猩球征服</td><td style="text-align:center">1972</td><td style="text-align:center">2020/11/24</td><td style="text-align:center">科幻片</td><td>这部不怎么好看，剧情乏味，乏味，乏味。而且不单单是剧情乏味，还有歧视的感觉在里面，一群白人警察打猩猩，黑人出来叫喊反抗，一个白人老大的公司管理猩猩，黑人手下出来解救猩猩。上部的良知与平衡在这部里一点也没有体现。</td></tr><tr><td style="text-align:center">22</td><td style="text-align:center">Planet of the Apes</td><td style="text-align:center">人猿星球</td><td style="text-align:center">1968</td><td style="text-align:center">2020//11/25</td><td style="text-align:center">科幻片</td><td>这部跟《逃离猩球》给我的感觉差不多，电影描绘出的新世界还是法制的世界，尽管老大是有私心抵制探索发现真相。</td></tr><tr><td style="text-align:center">23</td><td style="text-align:center">Tenet</td><td style="text-align:center">信条</td><td style="text-align:center">2020</td><td style="text-align:center">2020/11/30</td><td style="text-align:center">科幻片</td><td>如果有评分的话，我只能给一半的分，影片故意玩时间转换，靠着视频剪辑来把场面做大，然而剪辑后的画面也不算是什么大场面。近年来的一些科幻片打着与真实理论结合的旗号去拍，真去思考的话这些个理论都是胡扯，时间倒着走么，有两个时空的人同时存在同一物理空间，一个正着走路，一个倒着走，镜头一转倒着走的又正着走干着倒流时间的事。故意说这是烧脑的片子，看不懂就是自己没人家想的多，难道导演真的能自圆其说，只怕是打着这个幌子拍新奇的情节来吸引眼球罢了。现在的媒体不都是这样么，影响力大了就随心所欲，这样说那样说的，反正他们的话语权最大，他们说什么都是对的，甚至拍个电影还可以花钱来找个教授来搞理论基础，而后宣传做广告说《星际穿越》画面符合理论，甚至还专门出书，给人以假象。电影就是电影，花里胡哨的玩观众还把观众当傻子就很不爽了。导演可能只想拍个电影而已，可前些时候看到网上的宣传真的是吹过了天，实在让我恶心。目不转睛地看完，前后逻辑加起来算是合格的电影，但也没太多的新鲜感。只是挺佩服这剪辑和导演，这么多个重合的画面安排在同一是时间去拍，拍完后还剪辑来剪辑去的，放在电影两个不同时间去，故意迷惑观众，还让我这个不敢十分明白的大感被玩弄。唉！</td></tr><tr><td style="text-align:center">24</td><td style="text-align:center">Kung Fu Panda</td><td style="text-align:center">功夫熊猫</td><td style="text-align:center">2008</td><td style="text-align:center">2020/12/05</td><td style="text-align:center">动画片</td><td>对中国文化描绘很深，甚至鸭子们把熊猫抬到大殿上后退出的时候都是倒着走的，已经很细节了。</td></tr><tr><td style="text-align:center">25</td><td style="text-align:center">The Shawshank Redemption</td><td style="text-align:center">肖申克的救赎</td><td style="text-align:center">1994</td><td style="text-align:center">2020/12/05<br/>2021/09/18<br/>(第二遍)</td><td style="text-align:center">剧情</td><td>2020/12/05(中文配音版)：怎么这么巧下水道破的洞能钻下人。是我太胖了才考虑到这个问题了吗！？<br/>2021/09/18(英文原版)：看出了4K的资源就下来再看一遍，这次看感觉是个爽片，正义虽然没有得到正规渠道的降临，但用这种本不想干坏事，本不想反抗，但不得不反抗而又很成功的模式达到爽片的感觉。像近年来的《小人物》之类的，当然这电影没有那么明显。至于看百科上说，修屋顶时有十二个工人，跟最后的晚餐有十二人一样的寓意，但这是后人加上去的，导演都没承认拍片时有这想法。这次没看出新东西来。</td></tr><tr><td style="text-align:center">26</td><td style="text-align:center">American Factory</td><td style="text-align:center">美国工厂</td><td style="text-align:center">2019</td><td style="text-align:center">2020/12/05</td><td style="text-align:center">纪录片</td><td>观看过程中感觉这部纪录片拍的东西真丰富，不像以前看的纪录片来来去就说不到点子上。中美是有很大的文化差异，更多的体现在“拿人不当人”上面。我以前也在好几个工厂内做过普工，做过流水线工人，甚至大学毕业后的第一份工作也是在一家比较大的工厂内当技术员。所有的工厂都有一个习惯，上班前开会，那种排在一起听组长或是部长训话的场景，有些要齐涮涮地拍手才解散，还有些公司是每天固定播放同样的音乐，就像小时候喂鸡时发出固定声音来刺激鸡跑到面前一样，播放同一音乐来形成条件反射来让员工开工。有时走在大街上还能看到好多餐饮业的训话，那个更狠，还要喊类似“加油，加油，加油”的口号，听起来更像洗脑。纪录片中一位中国员工在开会时说的几句话，带了三四个“TMD”之类的脏话，而且从他说话的内容来看完全不尊重在他手下工作的员工。是的，这样的情景在中国遍地都是，但，他对么，就应该这样么。中国历来这样么？不见得吧。还有美国工厂内一个中国领导训斥了一个美国员工，那位女孩找到了美国领导谈话，反而这个中国领导满脸疑惑。里面的一句台词很好“美国人去解决问题，而中国人去找是谁弄出的问题”。还有在工会那里的演讲，最后一位皮肤不怎么黑也不怎么白的那个，讲的太对了，70年前美国改变的不是普通人，而是改变了上层人支配普通人的规则，说白了就是改变了割韭菜的难度。里面还有一些细节是我很触动的，就是美国人来中国工厂学习，然后接待美国人的那些中国员工，上来就讲安排了什么美食，什么酒店，一大堆这类的东西，可他们在开会，重点不是在研究如何让美国工厂盈利吗？还有美国工厂把领导换成中国人后，那个中国领导后来说有十个人可以去上海，可以住什么什么样的酒店，酒店有什么什么样的设备，仿佛这酒店成了这要去的十个人的似的，仿佛这十个人去了上海就要升仙似的。看完发现美国开工厂好不划算哦，很多都被限制，成本很高。但我一查是奥巴马公司拍的就警惕起来了。如果中国人与美国人处境对换，中国人有工会的福利，而美国人没有，那中国人还会不把员工不当人么。中国人也是被逼无奈啊。水往下流，人往上走，哪有好日子不过要过苦日子的，不也是自己本不是上层人，也只能帮着上层人割下层人的韭菜来让自己被少割点么。</td></tr><tr><td style="text-align:center">27</td><td style="text-align:center">贞观之治</td><td style="text-align:center">贞观之治</td><td style="text-align:center">2006</td><td style="text-align:center">2020/12/18<br/>至<br/>2020/12/20</td><td style="text-align:center">电视剧<br/>50集</td><td>里面没有权谋的算计，没有令人厌恶的三角恋，没有那种让人想爆捶的一直做傻事来延续剧情的角色，没有太多宫斗戏，全是在平淡地在讲治国，但这个平淡并不会让我疲倦于看这部电视剧，反而看了两集之后我就想一直看完这部剧。现在看电视剧都是两倍速播放了，这部剧的不臃肿并不是从我播放速度上改变的。比如让去抓一个人来对峙，画面一切这个人就在面前对峙了，而别的电视剧还会加上去抓捕，士兵领着人走到面前的页面，这样一集下面也没多少事情。贞观之治这部剧有很多剧情，也很吸引我。只是最后几集看的时候没全神贯注，讲的是唐僧跟李世民讲佛法，再有就是李世民病入膏肓到死去的过程。</td></tr><tr><td style="text-align:center">28</td><td style="text-align:center">国殇</td><td style="text-align:center">国殇</td><td style="text-align:center">未知</td><td style="text-align:center">2020/12/20<br/>至<br/>2020/12/23</td><td style="text-align:center">纪录片<br/>40集</td><td>两倍速看完的。但也很震撼。我在大学的时候就下载过，只是当时看了半集感觉都是在讲抗日，然后一点看下去的兴趣都没有。现在发现这跟平时看的抗日剧完全是颠覆性的对比。尤其是这一年三观有很大变化后再看的这部纪录片，真的很震撼。</td></tr><tr><td style="text-align:center">29</td><td style="text-align:center">The Vietnam War</td><td style="text-align:center">越南战争</td><td style="text-align:center">2017</td><td style="text-align:center">2020/12/25<br/>(S01E01)<br/>2020/12/27<br/>(S01E02)<br/>2020/12/28<br/>(S01E03、<br/>E04、E05)<br/>2021/01/01<br/>(S01E06)<br/>2021/08/19<br/>(S01E07)<br/>2021/08/22<br/>(S01E08)<br/>2021/08/22<br/>(S01E09)<br/>2021/09/10<br/>(S01E10)</td><td style="text-align:center">纪录片<br/>10集</td><td>S01E01：叙事有点乱，或者是我对越南战争一点也不了解的原因，这集看下来还是只了解个大概。<br/>S01E02：读史可以明智，一点没错。这集说的一些事情似曾相识，看来以后要多学点历史，不排斥去了解历史了。<br/>S01E03、E04、E05：没记住什么，就一个印象，战争是残酷的。<br/>S01E06：这集是使用迅雷下载的，当时还看到迅雷上网友分享的评论说这集有对中国不利的内容，所以才被迅雷限速，搞得是这部剧最难下载的一集。结果看完毛都没有，看来国内网友的评论真的一个标点符号都不能信。<br/>S01E07：这集当初是跟着前面一起看的，这集看了一小半就看不下去了，原因嘛就是看字幕不在意，大多情节没细心看，就没意思了。后来也断断续续看了一点，也没看完的意愿。最近阿富汗那边美国撤军，表现很糟糕，别人说跟当年在越南战争里很相似，就拿出来从头看了这集，想把这个系列看完。今天观看的感觉真的比以前多，人嘛，可能总是感觉当下比以前的思想更进步，比以前更会思考。这集里说的好多问题当下美国就在复现。这也颠覆了对美国的认知，以前总觉得美国是世界霸主，各方面全球第一，可现在想想，自己太天真了吧。他们总统候选人也能跟南越暗地联系不让他们合谈来促使自己当选，并掩盖事实，军人烂杀无辜，没人追责，扶持的政府腐败贪污，战争利好军官，却让自己国家19岁的年经军人当炮灰，长官为了自己的猫能打死饥饿的下属。这些以前都不在我的想像之列，总觉得美国不至于那么不堪。可现在我只认为任何人都是有人性的，贪婪地人性，部分人的坏可以往全人类身上想，一切都是利益。<br/>S01E08：这纪录片拍的真好，很中立，不遮遮掩掩。美军在越南，各自也有自自的不公平。种族歧视、不公平之类的事情导致很多长官或战友被士兵反抗炸死。也有军官逼迫士兵烂杀无辜平民百姓的事情。这让我想到很多年前看到的一个新闻，说是美军在阿富汗还是什么地方，用炮弹炸一栋房子来消灭里面的恐怖分子，当时有一个路人正好经过，美军完全可以等那个人走过去后再炸，可偏偏就不等人走过就炸了。这还是近些年曝出来的事。越南战争几十年前那样，现在还那样，不说明什么，就只说明美国人不是神，还是普普通通的人，不像别人说的那么有友爱，那么公平，那么有人性，他们也是有性本恶的那一面。这集纪录片还讲了越南战争时，美国国内的反战情况，很是激烈。甚至集会时有被自己国家的警察开枪打死的，虽然死的人不多，但这事情的性质不和国内的那事一样么。不同的是美国发生这事后全国的学生也游行反战了。但另一方面的感觉是，这边派人去别的国家打仗，那边国内全国游行反战，太民主也难办事啊。最后没打完就撤军了，等于白忙活。<br/>S01E09：这集大多讲战俘的事情，从战俘家人的角度来阐述战争。当战俘回国后并没有煽情之类的剧情，只是比较普通的叙述。也有越南平民的角度去展现战争的残酷，那张光着身子的小女孩在马路上伸开双臂从大火里跑出来的照片就在这集里有介绍。<br/>S01E10：这集讲战后人们对这场战争的反思，看的时候没有太认真，没有太多的感触。</td></tr><tr><td style="text-align:center">30</td><td style="text-align:center">Soul</td><td style="text-align:center">心灵奇旅</td><td style="text-align:center">2020</td><td style="text-align:center">2020/12/27<br/>2021/02/08<br/>(第二遍)</td><td style="text-align:center">动画</td><td>今年这个情况根本没想到还会有好的电影上映，这部电影跟《疯狂动物城》水准差不多，不过这部里的隐喻更多。生活的意义本身就是一个抽象的东西，不好讲也不好形容，拿这个来拍一部动画片难度应该很高吧。但这部电影既好看也很有内涵。但看完后的现在让我说有什么内涵，有什么意义，我还是说不上来。可能就是电影内容让我们来追求内心向往的目的，别让自己沉浸在生活的忙碌中吧。虽说是动漫，但显然不是给小孩子看的。<br/>2021/02/08、第二遍看了，制作非常精良了，在内容扎实的情况下还有那么多的搞笑场景也是非常厉害啊。看完我又去浏览了《疯狂动物城》的大部分片段。</td></tr><tr><td style="text-align:center">31</td><td style="text-align:center">陆小凤传奇之<br/>大金鹏王<br/>剑神一笑<br/>幽灵山庄</td><td style="text-align:center"></td><td style="text-align:center">2007</td><td style="text-align:center">2021/01/02</td><td style="text-align:center">武侠</td><td>大金鹏王、以前看过，重看。最近转而喜欢看这种古龙的有情节有悬疑的电影了。<br/>剑神一笑、这部感觉就一般般了，可能是已经看同样套路剧情的电影。再看同样的有点审美疲劳。除了最后几分钟解说前面各种反杀操作精彩外，前面的一百来分钟有点枯燥。<br/>幽灵山庄、这部还可以。</td></tr><tr><td style="text-align:center">32</td><td style="text-align:center">陆小凤传奇<br/>陆小凤前传<br/>铁鞋传奇<br/>决战前后<br/>绣花大盗<br/>银钩赌坊</td><td style="text-align:center"></td><td style="text-align:center">2007<br/>2006</td><td style="text-align:center">2021/01/03</td><td style="text-align:center">武侠</td><td>一天啥事没干，就看电影了。如果不好看的话真的会看不下去。</td></tr><tr><td style="text-align:center">33</td><td style="text-align:center">江湖情</td><td style="text-align:center">江湖情</td><td style="text-align:center">1987</td><td style="text-align:center">2021/01/03</td><td style="text-align:center">剧情</td><td>竟然还有我没看过的周润发和刘德华主演的电影，也或许很小的时候看过但现在忘得一干二净了吧。还算可以，是那个时候的电影风格。</td></tr><tr><td style="text-align:center">34</td><td style="text-align:center">江湖情2英雄好汉</td><td style="text-align:center">江湖情2英雄好汉</td><td style="text-align:center">1987</td><td style="text-align:center">2021/01/04</td><td style="text-align:center">剧情</td><td>香港典型黑帮片，现在看有点点俗套的感觉。看完也不知道电影要讲什么，可能就是个拼火画面激烈好看吧。</td></tr><tr><td style="text-align:center">35</td><td style="text-align:center">火烧岛</td><td style="text-align:center">火烧岛</td><td style="text-align:center">1991</td><td style="text-align:center">2021/01/04</td><td style="text-align:center">动作片</td><td>这部电影相对江湖情2的剧情更明了，逻辑也更完美点，虽然中间有几处看着比较尬，但整体还是很好，动作画面也有劲。</td></tr><tr><td style="text-align:center">36</td><td style="text-align:center">监狱风云</td><td style="text-align:center">监狱风云</td><td style="text-align:center">1987</td><td style="text-align:center">2021/01/04</td><td style="text-align:center">动作片</td><td>其实一二两部都看了，只是第二部是跳着看的，一直在快进，几分钟就看完了。第二部水准比第一部差太多。</td></tr><tr><td style="text-align:center">37</td><td style="text-align:center">上海滩电影版</td><td style="text-align:center">上海滩</td><td style="text-align:center">1983</td><td style="text-align:center">2021/01/05</td><td style="text-align:center">动作、剧情</td><td>上下两部，网上资源好少啊。搜索了好久才找到能用的下载资源。看的时候感觉许文强好有头脑，想事情都是那么全面。</td></tr><tr><td style="text-align:center">38</td><td style="text-align:center">旺角卡门</td><td style="text-align:center">旺角卡门</td><td style="text-align:center">1988</td><td style="text-align:center">2021/01/06</td><td style="text-align:center">动作片</td><td>看完才发现网上一张表情图出自这部电影，剧情就一般般吧。毕竟比自己年龄还大的电影了。</td></tr><tr><td style="text-align:center">39</td><td style="text-align:center">Kung Fu Panda 3</td><td style="text-align:center">功夫熊猫3</td><td style="text-align:center">2016</td><td style="text-align:center">2021/01/06</td><td style="text-align:center">动画片</td><td>前些天回看了功夫熊猫第一部，那是我看的第一部外国动漫电影，也是从那一部开始观注外国动画片的。功夫熊猫2的剧情还有点印象，但3的剧情就一点想不起来了。于是就下载了第三部看。认真看完才发现第三部也看过。</td></tr><tr><td style="text-align:center">40</td><td style="text-align:center">名探偵コナン 時計じかけの摩天楼</td><td style="text-align:center">名侦探柯南：引爆摩天楼</td><td style="text-align:center">1997</td><td style="text-align:center">2021/01/07</td><td style="text-align:center">动画片</td><td>说不上来好坏，剧情说它复杂有条理并合理这也对，说它剧情牵强也不为过。反正剧情不累赘，没什么多余的。可观性很强，只是看之后没什么感触。</td></tr><tr><td style="text-align:center">41</td><td style="text-align:center">名探偵コナン 14番目の標的</td><td style="text-align:center">名侦探柯南：第十四个目标</td><td style="text-align:center">1998</td><td style="text-align:center">2021/01/08</td><td style="text-align:center">动画片</td><td>障眼法，一切都是障眼法。</td></tr><tr><td style="text-align:center">42</td><td style="text-align:center">名探偵コナン ベイカー街の亡霊</td><td style="text-align:center">名侦探柯南：贝克街的亡灵</td><td style="text-align:center">2002</td><td style="text-align:center">2021/01/08</td><td style="text-align:center">动画片</td><td>看了剧场版第二部就觉得这系列电影没什么好看的了。尤其是大部分都看过一遍的情况下。但看豆瓣的评论说这部是整个系列最有意义的。结果看完也没什么。这个系列就是悬疑破案的，没有深层次的东西，不用多想。</td></tr><tr><td style="text-align:center">43</td><td style="text-align:center">青蛇</td><td style="text-align:center">青蛇</td><td style="text-align:center">1993</td><td style="text-align:center">2021/01/09</td><td style="text-align:center">奇幻片</td><td>B站一UP主做成的知名鬼畜的画面就出自这个电影画面。这部电影是我第一次看，小时候的印象一点也没有。</td></tr><tr><td style="text-align:center">44</td><td style="text-align:center">剑啸江湖</td><td style="text-align:center">剑啸江湖</td><td style="text-align:center">1996</td><td style="text-align:center">2021/01/09<br/>至<br/>2021/01/11</td><td style="text-align:center">电视剧</td><td>两倍速播放，后面还有些是放着声音在睡觉时听的。看前面几集时，桥上有毒雾这个情节在小时候有印象，所以才看下去的。至于后面的情节全没小时候的印象了，大概是后面的剧集没有看过吧，毕竟那个时候还是常常跑去别人家看电视剧的年代。中间的剧情就是《流星、蝴蝶、剑》的剧情。再后面的剧情就是纯粹的比武，也就不好看了。说白了就是《流星、蝴蝶、剑》的翻版，准确说《流星》是这部剧的翻版。</td></tr><tr><td style="text-align:center">45</td><td style="text-align:center">陽光普照</td><td style="text-align:center">阳光普照</td><td style="text-align:center">2019</td><td style="text-align:center">2021/02/01</td><td style="text-align:center">剧情 / 家庭 / 犯罪</td><td>电影两个半小时时长，感觉时间太长了，但看的过程中又不觉得哪里是多余的。看的时候很投入，着急想着菜头怎么不被阿合干掉，那种很入戏的感觉。但看过之后感觉电影内容也就一般般，没有什么感触，可能是体会不到电影所要表达的深意吧。或许本就没什么深意吧。</td></tr><tr><td style="text-align:center">46</td><td style="text-align:center">Drishyam</td><td style="text-align:center">误杀瞒天记</td><td style="text-align:center">2015</td><td style="text-align:center">2021/02/02</td><td style="text-align:center">剧情 / 悬疑 / 犯罪</td><td>前面看的时候就觉得跟东野写的《嫌疑人X的献身》内容相似，《嫌疑人》是让警察错误判断作案时间，这部是让警察错误判断作案后时间段内的不在场证据。这部的逻辑没有《嫌疑人》的逻辑那么合理，我感觉这部里有好几处不合理，或是经不起推敲的地方。但还是不影响电影的品质，好看。就是最后一幕，把尸体埋在新警局下面，不还是一样迟早有一天会被发现吗！只是发现的时间可能是几十年后或是上百年后，大概外国的房子使用寿命不像国内房子动不动不到二十来年就拆吧，哈哈哈。</td></tr><tr><td style="text-align:center">47</td><td style="text-align:center">再戰江湖</td><td style="text-align:center">再战江湖</td><td style="text-align:center">1990</td><td style="text-align:center">2021/02/03</td><td style="text-align:center">动作</td><td>打发时间看的，老一代香港黑社会题材电影。</td></tr><tr><td style="text-align:center">48</td><td style="text-align:center">解救吾先生</td><td style="text-align:center">解救吾先生</td><td style="text-align:center">2015</td><td style="text-align:center">2021/02/03</td><td style="text-align:center">警匪片</td><td>主要是想看刘德华的老电影了，结果这部是没看过的，看的时候弹幕上造谣了好多，看完去浏览了豆瓣的评论，再去看了维基百科，唉，国内网友真喜欢造谣。</td></tr><tr><td style="text-align:center">49</td><td style="text-align:center">绝代双骄</td><td style="text-align:center">绝代双骄</td><td style="text-align:center">1979</td><td style="text-align:center">2021/02/05</td><td style="text-align:center">古装</td><td>四十二年前的电影了，看画面好多都是棚景拍摄，观感一般，但是剧情还算是可以的。</td></tr><tr><td style="text-align:center">50</td><td style="text-align:center">绝代双骄</td><td style="text-align:center">绝代双骄</td><td style="text-align:center">1992</td><td style="text-align:center">2021/02/08</td><td style="text-align:center">古装</td><td>里面太多淫秽台词了，这电影着实让我感觉在打擦边球，过分的这样让我感觉这电影降了一个很大的层次。</td></tr><tr><td style="text-align:center">51</td><td style="text-align:center">山海情</td><td style="text-align:center">山海情</td><td style="text-align:center">2021</td><td style="text-align:center">2021/02/18<br/>至<br/>2021/02/19<br/>(1-18集，<br/>共23集)</td><td style="text-align:center">电视剧</td><td>后悔看了这部剧。真的很后悔。大概14、15集之后吧，跳着看了每集各段的几秒画面，最后跳着翻看也懒得翻了。</td></tr><tr><td style="text-align:center">52</td><td style="text-align:center">拆弹专家2</td><td style="text-align:center">拆弹专家2</td><td style="text-align:center">2020</td><td style="text-align:center">2021/02/20</td><td style="text-align:center">动作片</td><td>真的是片荒了才看的，没仔细看，大部分是按着快进键看的。总的来说一个字------“俗”。</td></tr><tr><td style="text-align:center">53</td><td style="text-align:center">侠僧探案传奇（1-10）</td><td style="text-align:center">侠僧探案传奇</td><td style="text-align:center">2015</td><td style="text-align:center">2021/02/21</td><td style="text-align:center">古装、探案</td><td>除了第一部外都是两倍速看的。比《陆小凤》系列差，但又不是看不下去的那种国产电影，总体看下来的评论也就一般般吧，打发时间可以看。</td></tr><tr><td style="text-align:center">54</td><td style="text-align:center">碧血剑</td><td style="text-align:center">碧血剑</td><td style="text-align:center">2007</td><td style="text-align:center">2021/02/22<br/>至<br/>2021/02/25</td><td style="text-align:center">电视剧</td><td>无</td></tr><tr><td style="text-align:center">55</td><td style="text-align:center">冲天</td><td style="text-align:center">冲天</td><td style="text-align:center">2015</td><td style="text-align:center">2021/03/02</td><td style="text-align:center">纪录片</td><td>估计是禁片，一般下载途径下载不了。看完之后感觉内容似曾相识，原来和国殇里面讲的部分节选内容是相同的，只是我角度不同。</td></tr><tr><td style="text-align:center">56</td><td style="text-align:center">剑雨</td><td style="text-align:center">剑雨</td><td style="text-align:center">2010</td><td style="text-align:center">2021/03/03</td><td style="text-align:center">武侠</td><td>之前看过吧，印象很淡了。剧情还可以，武打场面还蛮好看的。对爱情戏的诠释也有那么点意思。可以回味。</td></tr><tr><td style="text-align:center">57</td><td style="text-align:center">少年包青天</td><td style="text-align:center">少年包青天</td><td style="text-align:center">2000</td><td style="text-align:center">2021/03/04<br/>至<br/>2021/03/<br/>(1-34<br/>共40集)</td><td style="text-align:center">电视剧</td><td>最后几集狸猫换太子的戏在直播中看了个大概就没重看。这部剧跟陆小凤的那个系列电影水平差不多吧，推理很精彩，武戏也很有水平，只是没陆小凤系列那么强的武侠元素。</td></tr><tr><td style="text-align:center">58</td><td style="text-align:center">1、白眉大侠<br/>2、神鬼八阵图</td><td style="text-align:center"></td><td style="text-align:center">1995<br/>2006</td><td style="text-align:center">2021/03/<br/>至<br/>2021/03/08</td><td style="text-align:center">电视剧</td><td>两部部都是走马观花的看完。在我看来白眉大侠并不是一个武侠剧，本是冲着武侠剧看的，结果认真看完大部分剧集后发现不对劲，就没心思认真看全了。八阵图是我小时候看过里面一个场景，一直回想不到具体是什么电视剧，那天在豆瓣上问别人，才知道是这部剧，就重温下。发现并不好看，剧情什么的不怎么样。</td></tr><tr><td style="text-align:center">59</td><td style="text-align:center">Dial M for Murder</td><td style="text-align:center">电话谋杀案</td><td style="text-align:center">1954</td><td style="text-align:center">2021/03/09<br/>(国语版)</td><td style="text-align:center">悬疑</td><td>1954年的电影啊，看的时候丝毫没有想停顿的想法，国语版，没有语言的障碍，全程全神贯注。在我看来剧情一点也不邋遢，能秒杀现在的国产片。</td></tr><tr><td style="text-align:center">60</td><td style="text-align:center">Raya and The Last Dragon</td><td style="text-align:center">寻龙传说</td><td style="text-align:center">2021</td><td style="text-align:center">2021/03/11</td><td style="text-align:center">动画</td><td>本来看评分和评价是不想看这电影的，但这是迪士尼的，忍了好几天还是下载看了。内容就是反派害怕一个龙珠世界才平静，但几个部落抢这个龙珠时摔成四五片，反派就出来把人都石化了。由于反派害怕水，几个部落的人各抢一个碎片分别在水上或隐蔽处定居。五年后主角想把碎片集合起来还原龙珠，就同一条龙去各个部落斗争抢回碎片。就这。无非是穿插着“信任”这个东西。说一定要相信别人balabalabala。电影一般般吧，没什么内涵。</td></tr><tr><td style="text-align:center">61</td><td style="text-align:center">La grande vadrouille</td><td style="text-align:center">虎口脱险</td><td style="text-align:center">1966</td><td style="text-align:center">2021/03/12</td><td style="text-align:center">喜剧、战争</td><td>里面确实有几处很搞笑的片段，但电影总体来看也就那样吧。如果说一个电影看完了只哈哈笑过，然后一点感觉没了，那这个电影就算是爆米花电影吧。至少我没体会到别的什么，再说搞笑片段又不多。女主特别漂亮。。。。</td></tr><tr><td style="text-align:center">62</td><td style="text-align:center">神雕俠侶</td><td style="text-align:center">神雕侠侣</td><td style="text-align:center">1983</td><td style="text-align:center">2021/03/13<br/>至<br/>2021/03/15<br/>(刘德华<br/>50集)</td><td style="text-align:center">武侠电视剧</td><td>以前没看这这个版本，跟古天乐版的比多很多剧情，可能在原著的基础上改动小的原因吧，但我觉得这版神雕太差了，好多演员的演技不行，也可能是配音太差的原因。老顽童根本没有古天乐那版有趣。加上很多情节可有可无，而且杨过的左手老穿帮，这剧真的一般般。</td></tr><tr><td style="text-align:center">63</td><td style="text-align:center">芙蓉镇</td><td style="text-align:center">芙蓉镇</td><td style="text-align:center">1986</td><td style="text-align:center">2021/03/15<br/>(151分钟版)</td><td style="text-align:center">剧情</td><td>之前看过这电影的，今天做饭的时候想打发时间点开这部电影，后来发现画质不好搜索了下发现还有未删减版，就下载了继续看。前面基本都没太大感触了，直到最后一个疯子敲着锣说“运动了，运动了”我才有震撼感。是啊，事情过去了就过去了。没有什么痕迹，但是对人的伤害却留了下来抹不去。我小时候临村就有一个疯婆子，那是我很小的时候，可能刚上学或是没上学的时候吧。我们小孩都不知道她为什么疯的，都害怕她，问大人她为什么疯，但没一个人回答我，现在想想也许那样疯的吧。</td></tr><tr><td style="text-align:center">64</td><td style="text-align:center">Monster Hunter</td><td style="text-align:center">怪物猎人</td><td style="text-align:center">2020</td><td style="text-align:center">2021/03/16</td><td style="text-align:center">动作、奇幻</td><td>剧情就没什么剧情了，全是特效，画面感很强。打完一个BOSS以为电影没了，结果一看还有四十多分钟进度条呢，再打完一个以为没了，结果还有，再打完一个以为还有，结果电影没了。</td></tr><tr><td style="text-align:center">65</td><td style="text-align:center">Nomadland</td><td style="text-align:center">无依之地</td><td style="text-align:center">2021</td><td style="text-align:center">2021/03/16</td><td style="text-align:center">剧情</td><td>这就是普通生活吧，穷，但还抱有很好的愿望，还憧憬着创造些东西，还去在一起探讨几十光年外的星星，不让人生虚度。哪个国家都有穷人，再富的国家也有贫富差距，也有低收入或没收入的穷人，但他们或她们过的很好，人性中还有很多善念，互相帮助，互相理解，互相支持。这，要在国内，呵呵，不拆台就不错了。我知道电影就是电影，跟事实可能有很大出入，也许美国人没有那么多的善意，也许，谁知道呢，我又没去过，没见过。但那些社会的福利保障应该不会错，房车队伍在一起有人管理，有基本电力、场地使用保障。在国内不是有低端人口驱离么，这差距就不是一点半点了。</td></tr><tr><td style="text-align:center">66</td><td style="text-align:center">Curfew</td><td style="text-align:center">宵禁</td><td style="text-align:center">2012</td><td style="text-align:center">2021/03/18</td><td style="text-align:center">真人短片</td><td>还凑合吧</td></tr><tr><td style="text-align:center">67</td><td style="text-align:center">Skin</td><td style="text-align:center">肤色</td><td style="text-align:center">2018</td><td style="text-align:center">2021/03/20</td><td style="text-align:center">真人短片</td><td>太垃圾了，种族歧视电影看的太多了，再看这短片就感觉太俗套。一点新意也没有。</td></tr><tr><td style="text-align:center">68</td><td style="text-align:center">Way Down</td><td style="text-align:center">沿路而下</td><td style="text-align:center">2021</td><td style="text-align:center">2021/03/23</td><td style="text-align:center">盗宝</td><td>一个二十来岁的工科生参于盗窃最安全银行宝库的事情。宝库设定是70年前建造，安全机制就是天平功能。整个电影不怎么累赘，只是没有太刺激的场面，惊险程度不是太高。爆米花电影吧。</td></tr><tr><td style="text-align:center">69</td><td style="text-align:center">Who Am I - Kein System ist sicher</td><td style="text-align:center">我是谁：没有绝对安全的系统</td><td style="text-align:center">2014</td><td style="text-align:center">2021/03/24</td><td style="text-align:center">黑客</td><td>这电影看过两次了吧，今天又看了一遍，很过瘾啊。身为程序员，谁不想有主角那样的技术呢！！</td></tr><tr><td style="text-align:center">70</td><td style="text-align:center">桃姐</td><td style="text-align:center">桃姐</td><td style="text-align:center">2011</td><td style="text-align:center">2021/03/24</td><td style="text-align:center">剧情</td><td>体会不到电影要表达的亲情，看的时候挺投入，但对刘德华的角色有点出戏，不知道是真实刘德华的角度，还是在别的明星真事的角度。看百科说是一位明星的事情改编。但看完电影又没什么感触。</td></tr><tr><td style="text-align:center">71</td><td style="text-align:center">岁月神偷</td><td style="text-align:center">岁月神偷</td><td style="text-align:center">2010</td><td style="text-align:center">2021/03/26</td><td style="text-align:center">剧情</td><td>没有太理解电影的深意。看网上评论都说看哭了什么的。我已经很认真地看完了，心里一点波动都没有，一度怀疑是不是自己太冷血什么的。评价这么高的电影，我没感触，大概是心里麻木了吧。或是电影没那么好？还是自己经历的太少不明白那种情景下的“难”和“佳”。</td></tr><tr><td style="text-align:center">72</td><td style="text-align:center">蓝风筝</td><td style="text-align:center">蓝风筝</td><td style="text-align:center">1993</td><td style="text-align:center">2021/03/26</td><td style="text-align:center">剧情</td><td>对文革那段时间的故事审美疲劳了。看了太多反映那段时间的电影了，再看这部也没什么波澜。再去看别人写的影评、与别的电影的对比，从这部电影里各人的角度分析电影，铁头先是对校长的批斗，再是自己的继父被批斗来对比，无非是反映人性和人的无知方面的东西。可是在我心里人性已经是“比你你所想像的恶还要恶千万倍了”。所以对电影所反映的东西，只能说没什么感触。</td></tr><tr><td style="text-align:center">73</td><td style="text-align:center">高山下的花环</td><td style="text-align:center">高山下的花环</td><td style="text-align:center">1985</td><td style="text-align:center">2021/03/27</td><td style="text-align:center">红色、战争</td><td>唉，看这电影完全是因为豆瓣的评分。第一次看的时候大概两三个月前吧，当时只看了五十五分钟，然后就看不下去了，最近下载下来，今天补看完了。想不出用什么词来形容。就说一段同样的感受吧。刚上大一时，那时流行QQ空间，经常看别人转载的文章，有一段是大概这样说的：“在……之后，脖子上的红领巾瞬间鲜艳了许多”，每次读到这句话就哈哈大笑。然后我看完这电影之后也是那感受想笑。</td></tr><tr><td style="text-align:center">74</td><td style="text-align:center">Captain Phillips</td><td style="text-align:center">菲利普船长</td><td style="text-align:center">2013</td><td style="text-align:center">2021/04/01</td><td style="text-align:center">剧情、传记</td><td>看的过程中没有走神，剧情一步一步的很连贯。前面的时候只有船长和海盗的情节，以为就他们之间的周旋，当出现海军时，他们说“他们受到的压力很大，必需和平解决”后，才感受到背后还有强大的国家在保护公民的安全。最后的片段就打死了三个绑匪，有点太突然了，我真的还没反应过来电影就结束了。刚开始对船长最后的精神崩溃有点不屑，但想想在那样的环境下，应该是一两天的时间内都被绑架，正常人都会崩溃的。男主是阿甘正传中的男主，电影开始没几分钟就认出来了，但整个电影看完也没出戏，演技真好。</td></tr><tr><td style="text-align:center">75</td><td style="text-align:center">Godzilla vs Kong</td><td style="text-align:center">哥斯拉大战金刚</td><td style="text-align:center">2021</td><td style="text-align:center">2021/04/01</td><td style="text-align:center">科幻、动作</td><td>看前半小时的剧情时感觉拖拉，想看打斗场面，快进看到打斗场面后又太枯燥，又快进。总之要剧情没什么剧情，要场面是有场面的，但太枯燥，两个怪物打架就像奥特曼打怪兽一样，看多了就没意思了。</td></tr><tr><td style="text-align:center">76</td><td style="text-align:center">Fantastic Mr. Fox</td><td style="text-align:center">了不起的狐狸爸爸</td><td style="text-align:center">2009</td><td style="text-align:center">2021/04/02<br/>(国语配音)</td><td style="text-align:center">动画</td><td>好像之前看过一次，这次看也没什么体会，就写代码的时候打发时间播放的。</td></tr><tr><td style="text-align:center">77</td><td style="text-align:center">聽說</td><td style="text-align:center">听说</td><td style="text-align:center">2009</td><td style="text-align:center">2021/04/02</td><td style="text-align:center">爱情</td><td>很温馨，有时笑点也很多。当男主在女主背后表白后，女主流泪了，我只猜到女主能听到，后来看到女主说我愿意才知道她听说都能。还算可以的爱情片了吧，我想应该不算顶级水准。还有一点就是台湾的餐馆自己做的菜自己也吃吗，这么放心自己的卫生，我平时吃饭的餐馆估计没人吃自己做的菜，更别提那些街边摊了。</td></tr><tr><td style="text-align:center">78</td><td style="text-align:center">我這樣過了一生</td><td style="text-align:center">我这样过了一生</td><td style="text-align:center">1985</td><td style="text-align:center">2021/04/02</td><td style="text-align:center">家庭片</td><td>本来看评论说没有什么狗血剧情，可还是有男人赌博、出轨，当然如果不出点什么事这故事也就编不下去了。说普通的故事吧，可人家很多事都经历了，虽然我不懂那个时代背景下的台湾，但这整个故事也不太明白电影要表达什么，女人的坚强吗？这样的女人多了去了。电影整个过程看的很投入，没有看不下去的片段，但它就是个故事会，讲了一个女人这不太幸运地一生，没看出什么深意，看完也没有什么好回味的。</td></tr><tr><td style="text-align:center">79</td><td style="text-align:center">花样年华</td><td style="text-align:center">花样年华</td><td style="text-align:center">2000</td><td style="text-align:center">2021/04/04</td><td style="text-align:center">爱情片</td><td>一般吧，感觉。太深沉的电影就不太容易明白了。这爱情感觉像初恋那样扭扭捏捏。好真实又好滑稽。</td></tr><tr><td style="text-align:center">80</td><td style="text-align:center">笑傲江湖</td><td style="text-align:center">笑傲江湖</td><td style="text-align:center">1990</td><td style="text-align:center">2021/04/05</td><td style="text-align:center">武侠</td><td>不知道是第几次看这电影了，反正还不错。改编很通顺，也很有武侠味。</td></tr><tr><td style="text-align:center">81</td><td style="text-align:center">笑傲江湖2</td><td style="text-align:center">笑傲江湖2</td><td style="text-align:center">1992</td><td style="text-align:center">2021/04/05</td><td style="text-align:center">武侠</td><td>同是看了多次了，想当初第一次看的时候还觉得东方不败让诗诗与令狐冲过一晚，真是个好爱情故事。现在看也就普普通通的电影吧。</td></tr><tr><td style="text-align:center">82</td><td style="text-align:center">The Father</td><td style="text-align:center">困在时间里的父亲</td><td style="text-align:center">2020</td><td style="text-align:center">2021/04/06</td><td style="text-align:center">剧情</td><td>这个中文译名真的垃圾，我看电影时一直以为是个科幻类的电影，有时空交错的镜头，可是看着看着就感觉不对，原来是有老年症的父亲，以父亲的角度去拍的电影。看完电影感觉也就一般般吧，无非是角度不同，从病人角度拍的一部电影。我没那么感性，对亲情也没有特别激烈的感受。所以没有太大的共鸣。补充一点就是男主用咖啡送药吃的那个镜头，明显咖啡杯里面是空的嘛，除了这个镜头，别的演技都很强，没有出过戏。</td></tr><tr><td style="text-align:center">83</td><td style="text-align:center">Serenity</td><td style="text-align:center">冲出宁静号</td><td style="text-align:center">2005</td><td style="text-align:center">2021/04/06<br/>(国语配音)</td><td style="text-align:center">科幻</td><td>看到后面的情节才想起来以前看过，整体来看还可以吧。剧情还算合理，太空镜头也还凑合。</td></tr><tr><td style="text-align:center">84</td><td style="text-align:center">On Children</td><td style="text-align:center">你的孩子不是你的孩子</td><td style="text-align:center">2018</td><td style="text-align:center">2021/04/06<br/>(S01E01)<br/>2021/04/07<br/>(S01E02)<br/>[NF五集版]</td><td style="text-align:center">剧情</td><td>S01E01、这集的名字叫《妈妈的遥控器》，感觉还算不错的剧集了，整个过程可以感受到孩子受到母亲的控制，以及孩子的反抗，来阐明大小与小孩之间的矛盾。这集我是很喜欢的，我也是从小就是经常受到父亲的打骂，尤其是他在外面受气了后就回来找我出气，长大了之后我也是从没怎么反驳过父亲，甚至想收拾一下家里的东西，也是被一句话怼的什么也不想动、不敢动，一言难尽。<br/>S01E02、这集叫猫的孩子，起初看的也还好，但是看到孩子出现幻想、出现平行世界之类的精神类症状后就反感了，总拿这些来拍电影电视剧的，看腻了，没什么实质的东西。就像我上学的时候写作文，不会写也不知道写什么，就瞎编写一些没经历过的天马行空的东西，别人一看就知道是乱写的，看这电集就有点这种感觉。</td></tr><tr><td style="text-align:center">85</td><td style="text-align:center">大佛普拉斯</td><td style="text-align:center">大佛普拉斯</td><td style="text-align:center">2017</td><td style="text-align:center">2021/04/10</td><td style="text-align:center">剧情</td><td>情色镜头看的我&amp;@&amp;！&amp;#&amp;*&amp;，别的也就没什么了，就是两个人偷看老板汽车记录仪的，发现老板杀人还把尸体藏在大佛里面，这两个人没有选择曝光，一个人被老板灭口，后来大佛在被众人诵经的时候有敲击声传出来，人没死。故事一般般吧，我的评价这就是一个故事会，讲了一个故事而已。</td></tr><tr><td style="text-align:center">86</td><td style="text-align:center">逆光飞翔</td><td style="text-align:center">逆光飞翔</td><td style="text-align:center">2012</td><td style="text-align:center">2021/04/14</td><td style="text-align:center">剧情</td><td>别人的评价是励志，全片看完也没看到哪励志了。只是感觉是很正常的一个故事，讲的很好，也很温馨，没有虐人的恋爱情节，很真实。毕竟一个失明的人生活很多种不便，正常人很难体会到。</td></tr><tr><td style="text-align:center">87</td><td style="text-align:center">Nobody</td><td style="text-align:center">小人物</td><td style="text-align:center">2021</td><td style="text-align:center">2021/04/19</td><td style="text-align:center">动作</td><td>爽片，剧情还算合理，就是主角+主角小舅子+上了年纪的岳父三个人可以干倒一大票人就有点离谱。看的时候就有那种感觉，怎么就打的过了，别的电影虽然有主角光环但还不至于太怀疑，这电影看的时候就有点疑虑，可能是导演没处理好的原因吧。也可能是主角是绝命毒师里的风骚律师一时跳戏误以为主角不能打。在IMDB上看到有说主角为了这角色练了两年拳，但在电影里没有腹肌，也就不太容易让人联想到他能打。电影总体来说好看，爽片，打的还算精彩。</td></tr><tr><td style="text-align:center">88</td><td style="text-align:center">V for Vendetta</td><td style="text-align:center">V字仇杀队</td><td style="text-align:center">2005</td><td style="text-align:center">2021/04/22</td><td style="text-align:center">剧情、政治</td><td>貌似大学期间看过这电影，印象不深了。这次重温颇为震撼，还有国家能拍出这么强烈反抗的影视作品，而且在他们国家也没被禁什么的，但看完过在豆辨上搜索了一下发现没有词条，各大网站上也没有相关信息，一查是去年被禁了，跟当下国内发生的事情太像了，才在十多年后的去年被禁。</td></tr><tr><td style="text-align:center">89</td><td style="text-align:center">Crash</td><td style="text-align:center">撞车</td><td style="text-align:center">2004</td><td style="text-align:center">2021/04/23<br/>(国语配音)</td><td style="text-align:center">种族歧视</td><td>某一年的奥斯卡电影，上学的时候英语老师还播放过，但没什么印象了。这次看也就那样吧，不过看的时候很投入，大概剧本写的好，很能让人身临其境的思考。</td></tr><tr><td style="text-align:center">90</td><td style="text-align:center">3：10 To Yuma</td><td style="text-align:center">决战尤马镇</td><td style="text-align:center">2007</td><td style="text-align:center">2021/04/24<br/>(国语配音)</td><td style="text-align:center">西部牛仔</td><td>其实电影不完全是西部片，感觉他是用西部的外壳来讲更深入一点点的东西。这个东西有东西方文化的差异，就像国内很多大人处理事情不回避小孩，甚至当着小孩的面骂人打架也是很平常的，但我在影视中了解的外国场景是在一些场面都尽量回避小孩，避免小孩受到精神或身体的伤害。而且国外的父母在孩子面前一般表现的很强，不让小孩担心受怕之类的。但在国内完全没那种习惯。这电影讲了一个很普通很普通的父亲在孩子面前一直很要强，保护孩子为家着想。父亲与匪首相处时，从小就没感受过家庭中父母呵护的匪首向往那种家庭的幸福，也就成全了这位父亲的愿望。所以这不完全是一个西部片，虽然这部电影的西部元素很满很精彩。</td></tr><tr><td style="text-align:center">91</td><td style="text-align:center">城市的边缘</td><td style="text-align:center">城市的边缘</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/02<br/>(30集)</td><td style="text-align:center">诈骗类</td><td>《毛骗》的原班人马拍的衍生类剧集。风格跟《毛骗》类似，水平整体还行，就是有些地方看不下去要快进。在我的意识里，如果一部影视作品能让观众按快进键，要么这镜头血腥或辣眼睛不敢看，要么就是这镜头枯燥拍的很烂。你能想像三个大男人为了不让一个一两岁的小孩子哭而去哄她三五分钟的镜头么，看了个大概好像就是来晒孩子的，反正我是看不下去的，这跟剧情豪无关系，《绝命毒师》里有一整集都在拍苍蝇，也是很烂，但这剧跟《毒师》不是一个量级的。多年前看过这个团队的另一部剧《杀不死》，大概是这个名，风格也是类似，都是喜欢把一些线索放在前面让一些人不经意说出来，然后后面再解密反转剧情，这种套路用多了就容易让人猜到要怎么反转，看这部剧时有几个地方还是猜到了，但还是有很多剧情处理地很好，反转之后再反转，或是看之前猜不出会怎么反转。</td></tr><tr><td style="text-align:center">92</td><td style="text-align:center">Mission Impossible</td><td style="text-align:center">碟中碟</td><td style="text-align:center">1996</td><td style="text-align:center">2021/05/03</td><td style="text-align:center">动作</td><td>看起来一般般，本来下载了后续几部，但已经没看下去的想法了。</td></tr><tr><td style="text-align:center">93</td><td style="text-align:center">The Simpsons Movie</td><td style="text-align:center">辛普森一家</td><td style="text-align:center">2007</td><td style="text-align:center">2021/05/04</td><td style="text-align:center">动画</td><td>内涵太多，不是给小孩子看的电影。这个系列有几十年的历史了，在美国长久不衰大概也是因为这电影展露太多人性。只看过电影版，剧集版什么样就不清楚了。</td></tr><tr><td style="text-align:center">94</td><td style="text-align:center">你好，李焕英</td><td style="text-align:center">你好，李焕英</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/08</td><td style="text-align:center">剧情</td><td>玩游戏时看的，多数是听声音听出来的。但也不影响对剧情的理解，由此可以知道这电影多么的通俗，是的，我不喜欢这电影。这电影出来快大半年了，而且一直很热门，本来就不喜欢国产电影，但对这电影并没有歧视，没有另类眼光看它。时不时切屏回来看画面，但真的没有多少出彩的地方。前面多数可以说是抄，可以说是模仿，有点俗，看的时候真的很尴尬，后面一点故意煽情，就是那种故意弄一些哭戏来让你不自主的动容。当时看到最后的时候我一点也不感兴趣，对这个结果并不能深入理解和体会，但还是想流泪，对，就是那种很鄙视这种剧情但看了画面自己身体会不自主的流泪的处境，这就是故意煽情嘛。就像一些外国电影一样，实现一个目的后很多人站在一起激动、拍手、庆贺，来让观众动情，可这真的很俗套。</td></tr><tr><td style="text-align:center">95</td><td style="text-align:center">辑魂</td><td style="text-align:center">辑魂</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/09<br/>(NF版)</td><td style="text-align:center">剧情</td><td>电影的点子还是很新奇的。一直在电影网站上看到这部电影，但一直没去下载观看。一直以为是内地电影就排斥。结果在福利吧被推荐去看才知道是台湾电影，而且和大陆版有两个不同的结局。然后就想去看。还是很精彩的，这种电影类型还是不多的，借2031年的科技来实现灵魂移位，在人与人之间转换，借此让案件复杂程度更上一层楼。</td></tr><tr><td style="text-align:center">96</td><td style="text-align:center">The Green Mile</td><td style="text-align:center">绿里奇迹</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/09<br/>(国语配音)</td><td style="text-align:center">奇幻</td><td>看评分和主演是汤姆汉克斯才去下载的，看的时候很能投入进入。可以这么说吧，电影是个好故事，但就是个好故事，仅此而已。一个人有神奇的力量可以让死老鼠复活，可以用类似魔法的力量给人治病。然后电影拍的又很现实，不是全部魔幻，就有点让人不懂，这电影到底想要表达什么。说是个很好的故事吧，确实看的时候能沉迷于情节之中，说有什么感受吧，真没什么感觉，没明白这电影要干嘛的。看了之后就没有然后了，什么思考都没有。</td></tr><tr><td style="text-align:center">97</td><td style="text-align:center">The Da Vinci Code</td><td style="text-align:center">达芬奇密码</td><td style="text-align:center">2006</td><td style="text-align:center">2021/05/11<br/>(导演加长<br/>国语配音)</td><td style="text-align:center">悬疑</td><td>汉克斯的电影，这电影我是三天看完的，电影实在没能吸引我一口气看完。剧情没有多少反转，也没有多少的惊悚，更没有奇特的地方。看完又看了电影解说，然后就删了电影。不推荐看。感觉有点烂。</td></tr><tr><td style="text-align:center">98</td><td style="text-align:center">The Mitchells vs The Machines</td><td style="text-align:center">智能大反攻</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/12</td><td style="text-align:center">动画</td><td>还算有点搞笑。这电影是给小孩子看的，讲家里的亲情、父爱母爱。</td></tr><tr><td style="text-align:center">99</td><td style="text-align:center">명량</td><td style="text-align:center">鸣梁海战</td><td style="text-align:center">2014</td><td style="text-align:center">2021/05/13<br/>(国语配音)</td><td style="text-align:center">战争</td><td>韩国票房第一的电影，讲在朝鲜鸣梁这个地方用30多艘战船抗击日本300百艘战船的故事，以少胜多。具体胜多少这个有争议，看维基百科上有双方不同观点，日本说只有小损伤，韩国说有大胜利。单纯说电影吧，感觉一般吧，如果历史片拍不出真实性也就没了历史片的这层价值，海战镜头确实还有点看头，从炮弹的第一视角看它从炮台发出在空中发出弧线砸到对面战船上，把躺炸的粉碎，这镜头还是很壮观的，这电影讲了一个好故事，可以沉浸其中，没有煽情，没有做作，拍的有血有肉。只是对别国的历史不是太在意，更何况是个有争议的历史，所以对这电影也就没有过高的评价吧。</td></tr><tr><td style="text-align:center">100</td><td style="text-align:center">더 테러 라이브</td><td style="text-align:center">恐怖直播</td><td style="text-align:center">2013</td><td style="text-align:center">2021/05/16<br/>(国语配音)</td><td style="text-align:center">人性</td><td>这电影，啧啧啧，怎么才看到呢。又一次提高对韩国电影的认知。以前是一点不懂韩语，又在网上看很多人批评嘲讽韩国，一直也没在意韩国电影，除非是特别出众的电影，就是那种在国内也火起来的电影，对去看一下评价再决定要不要看。当然，这部电影不太可能在国内火吧。国内哪天能再拍这样的电影啊。同等水平的都是几十年前拍的了。</td></tr><tr><td style="text-align:center">101</td><td style="text-align:center">신세계</td><td style="text-align:center">新世界</td><td style="text-align:center">2013</td><td style="text-align:center">2021/05/17<br/>(台配国语)</td><td style="text-align:center">黑社会</td><td>这电影真的很好看呀，没有具体好人和坏人的区分，刚开始看没几分钟就发现看过这电影的解说版，知道卧底要当黑帮老大，但丝毫不影响我看下去，看完整部电影又去豆辨看了影评文章，真的评价很好，也说到很多点子上。跟《无间道》的对比让这部电影更真实，更加合理，更显得人性真实的一面。彻底成了韩国电影的粉丝了。</td></tr><tr><td style="text-align:center">102</td><td style="text-align:center">김복남 살인사건의 전말</td><td style="text-align:center">金福南杀人事件始末</td><td style="text-align:center">2010</td><td style="text-align:center">2021/05/17</td><td style="text-align:center">剧情</td><td>电影很血腥，很暴力。目前还没看影评，也没看百科，不知道是不是真实故事改编。反正这电影讲了一点点人性，也讲了很深的家庭矛盾激化。没看影评前还没看出更深的东西。一会看了影评再补充吧。<br/>看了百科，韩文百科翻译过来的，中文维基里没有这些内容。可怕的是这电影基于事实事件改编的，关键词为岛奴。唉。</td></tr><tr><td style="text-align:center">103</td><td style="text-align:center">让子弹飞</td><td style="text-align:center">让子弹飞</td><td style="text-align:center">2010</td><td style="text-align:center">2021/05/23<br/>2021/10/28<br/>2021/12/19</td><td style="text-align:center">剧情</td><td>2021/05/23：应该是第二次看吧，暗喻比较多，那种揣着明白装糊涂的剧情，实在不太懂里面的东西。<br/>2021/10/29：这次看是因为看了关于这电影的解说视频，说了很多电影内容的现实背景，所以才去再看一遍。电影拍的不错，以前没这个感觉，看了解说后认真看一遍电影，然后就感觉这电影还行。<br/>2021/12/19：今年第三遍看这电影了，是由于看了一个B站的视频，里面剪辑了一些这电影的镜头，然后又来重温的。</td></tr><tr><td style="text-align:center">104</td><td style="text-align:center">Wrath of Man</td><td style="text-align:center">人之怒</td><td style="text-align:center">2021</td><td style="text-align:center">2021/05/28</td><td style="text-align:center">动作</td><td>电影从三个角度拍一件事，这电影讲一个黑帮头目的儿子在歹徒抢劫运钞车时被杀，黑帮头目卧底运钞公司，打歹徒的过程。一个角度是黑帮头目，一个角度是运钞公司，一个角度是歹徒。黑帮头目儿子被杀的过程从这三个角度拍了三次。还算有新意吧。有点爽片的感觉，但不是全程爽片。</td></tr><tr><td style="text-align:center">105</td><td style="text-align:center">Catch me if you can</td><td style="text-align:center">猫鼠游戏</td><td style="text-align:center">2002</td><td style="text-align:center">2021/06/07</td><td style="text-align:center">剧情</td><td>还行吧，如果不是基于事实改编就有点爽片的感觉了。</td></tr><tr><td style="text-align:center">106</td><td style="text-align:center">The Pianist</td><td style="text-align:center">钢琴家</td><td style="text-align:center">2002</td><td style="text-align:center">2021/06/08</td><td style="text-align:center">剧情</td><td>网上的评分很高，看后我感觉也就一般般吧，电影展现了纳粹对犹太人的种种劣迹，仅次而已。而钢琴家在里里面的角色就不太重要，他只是一个生存者，只是目睹了悲惨的一切。虽然是真实事件改编的，但不是上上乘作品。</td></tr><tr><td style="text-align:center">107</td><td style="text-align:center">Loki</td><td style="text-align:center">洛基</td><td style="text-align:center">2021</td><td style="text-align:center">2021/06/17<br/>(S01E01、<br/>S01E02)<br/>2021/06/24<br/>(S01E03)<br/>2021/06/30<br/>(S01E04)<br/>2021/07/07<br/>(S01E05)<br/>2021/07/14<br/>(S01E06)</td><td style="text-align:center">科幻<br/>剧集</td><td>S01E01：时间管理局？强行在复联上面加上一个局外控制单元，合不合理我就不知道了，整集看着还算好吧，能自圆其说。<br/>S01E02：看了上集的解说，说这集可能出来女版洛基，还真出来了。<br/>S01E03：这集特效很好看。<br/>S01E04：这集感觉一般吧，也没多少好看的特效。剧情嘛跟别人解说猜测的好多都吻合了。<br/>S01E05：这集感觉好水啊，就是从虚空里出来而已。没什么逻辑，没什么转折的。<br/>S01E06：对这集很失望，中间有一点点还快进看了，能让我按快进的作品我都是很厌恶的。真的很失望。甚至动摇了以后追美剧的想法。</td></tr><tr><td style="text-align:center">108</td><td style="text-align:center">Luca</td><td style="text-align:center">夏日友晴天</td><td style="text-align:center">2021</td><td style="text-align:center">2021/06/19<br/>(国配版)<br/>(0-63分钟<br/>总95分钟)</td><td style="text-align:center">动画</td><td>前些时候看豆辨上的预告知道这是皮克斯的动画，那时候还蛮期待的。今天看了一个小时，发现剧情好幼稚，但又不相信皮克斯水准这么差，就去看IMDB的评论，结果，哈哈，真的低啊。还以为跟《疯狂动物城》、《心灵奇旅》一样的好片呢。</td></tr><tr><td style="text-align:center">109</td><td style="text-align:center">The Tomorrow War</td><td style="text-align:center">明日之战</td><td style="text-align:center">2021</td><td style="text-align:center">2021/07/03</td><td style="text-align:center">科幻</td><td>昨天还是前天看IMDB上的评价很低就没下载，今天看中文网上的评价很高就下来看看怎么样。看的还算凑合吧，不算差也不算很好。就是打外星怪兽这种比较俗的剧情，还好文戏拍的还算顺滑吧，看的时候不怎么卡壳，没有昏昏欲睡的感觉。武戏吧就那样，特效不算太好，打发时间看的话这片还算可以。</td></tr><tr><td style="text-align:center">110</td><td style="text-align:center">Boss Level</td><td style="text-align:center">领导水准</td><td style="text-align:center">2020</td><td style="text-align:center">2021/07/07</td><td style="text-align:center">动作</td><td>剧情有点老套，就是主角死了就从同一天的床上复活，在这同一天内尝试去干掉反派，主角如果被干掉了但记忆还在，就这样循环上百次去杀大反派。因为很多场面都是重复的，看起来也不过瘾，加上最后结尾实在太无聊，整体感觉这电影不怎么样。</td></tr><tr><td style="text-align:center">111</td><td style="text-align:center">Black Widow</td><td style="text-align:center">黑寡妇</td><td style="text-align:center">2021</td><td style="text-align:center">2021/07/09</td><td style="text-align:center">科幻</td><td>动作和特效很好，剧情嘛就不那么紧凑了，甚至有些感觉有点俗套。电影还是值得看的。</td></tr><tr><td style="text-align:center">112</td><td style="text-align:center">差馆</td><td style="text-align:center">差馆</td><td style="text-align:center">2011</td><td style="text-align:center">2021/07/12</td><td style="text-align:center">纪录</td><td>分为一、二两集，讲一个火车站警察局内关于社会底层人民的见闻。就是一个摄像头记录比较真实的一面，也没有旁白，比较中立。因为不知道是不是拍的片面，反正跟我在多数新闻上看到的警察不太一样，我也不知道该怎么评价这纪录片。</td></tr><tr><td style="text-align:center">113</td><td style="text-align:center">太极张三丰</td><td style="text-align:center">太极张三丰</td><td style="text-align:center">1993</td><td style="text-align:center">2021/07/14</td><td style="text-align:center">动作</td><td>小时候看过这电影。今天重看，感觉电影从开始打到结尾，以前的动作片真的是有血有肉，实力满满。</td></tr><tr><td style="text-align:center">114</td><td style="text-align:center">Rick and Morty</td><td style="text-align:center">瑞克和莫蒂</td><td style="text-align:center">2013</td><td style="text-align:center">2021/07/15<br/>(S01E01)<br/>2021/07/16<br/>(S01E02.<br/>E03.E04)</td><td style="text-align:center">二维动画</td><td>S01E01：一集二十来分钟，看的我真是无语，就这内容评分还这么高？实在有点恶心了，这剧情。还有主角说话的声音，像是嘴巴里有一大堆粘液似的，说话说不清的样子。<br/>S01E02.03.04：三四集剧情还算新颖，但还是没打消我弃剧的念头。</td></tr><tr><td style="text-align:center">115</td><td style="text-align:center">无敌幸运星</td><td style="text-align:center">无敌幸运星</td><td style="text-align:center">1990</td><td style="text-align:center">2021/07/20</td><td style="text-align:center">无厘头</td><td>小时候看过好几遍这电影。看一眼现在的画面就能想出来接下来会出现什么画面，电影的绝大多数场景都记得。只是再来品味这电影的时候感觉不像小时候那么有趣了。甚至感觉有点低俗。</td></tr><tr><td style="text-align:center">116</td><td style="text-align:center">Rope</td><td style="text-align:center">夺魂索</td><td style="text-align:center">1948</td><td style="text-align:center">2021/07/27</td><td style="text-align:center">剧情</td><td>不怎么样，更讨厌的是剧里面有一个烦人的角色。就像那种没发继续剧情了，让一个人故意做傻事来延续剧情。就像现在一般的电影里面小孩为了捡掉了的娃娃而害大家一起身陷囹圄，众人感觉没事了的时候一个人咋咋呼呼的乱蹦乱跳搞出事情来让剧情发展下去。不过电影里有大量的长镜头，看的时候就让人更入戏，长镜头下更能感觉演员功底真的好强啊。不会再看第二遍。</td></tr><tr><td style="text-align:center">117</td><td style="text-align:center">The Bleeding Edge</td><td style="text-align:center">尖端医疗的真相</td><td style="text-align:center">2018</td><td style="text-align:center">2021/07/27</td><td style="text-align:center">纪录</td><td>没有看原片，看的是视频网站上的解说版。总结就是只要是利益的东西，不管有没有伤天害理，都会在各个社会中出现，美国并不是完美的，有途径制约恶的一面就是优势，性本善还是性本恶这就不重要了。</td></tr><tr><td style="text-align:center">118</td><td style="text-align:center">走向共和</td><td style="text-align:center">走向共和</td><td style="text-align:center">2003</td><td style="text-align:center">2021/08/01<br/>至<br/>2021/08/10<br/>(总68集<br/>海外版)</td><td style="text-align:center">电视剧</td><td>2021.08.01：以前看过两遍吧，现在打算重新看一遍。这电视剧比较接地气，跟《贞观之治》差不多，里面说话语气比较正常，不像现在的宫斗电视剧动不动万死、万岁、下跪那种腔调。<br/>2021.08.08：看到二十集了，感觉跟之前看的感受有很大的不同，之前是走马观花，也不知道是不是倍速播放了看看大概，这次是正常速度播放，也对很多细节剧情有所了解。原来袁世凯去见李鸿章是替翁同龢当说客。还有更多更多的感受，是在看的时候的感觉，清朝之所以败是由于多年的党争，还有慈禧的一票否决权。平时遇事她都插一杠子，遇到大战事了，她又不管不问撇的干净。体制问题，这电视剧表达的淋漓尽致。<br/>2021.08.09：看到四十来集了，跟前面二十来集看的感受不太一样，前面看的时候感觉是真实事件，现在感觉电视剧就是电视剧，有那么一丢丢的不太全信这电视剧内容了，好多宫斗啊，一个大反派下去又上来一个，这个下去又上来一个专搞事的。感觉不太真实，当然，其他方面还挺好的。<br/>2021.08.10：这电视剧也就那样，由于三观近年来变化较大，这次看的感受没以前的感受强。只是更能体会到各个细节中的无奈。我也不太认同孙文的观点，他太理想太乐观，共和跟国情不符，当时的环境搞不起来的。</td></tr><tr><td style="text-align:center">119</td><td style="text-align:center">无间道</td><td style="text-align:center">无间道</td><td style="text-align:center">2002</td><td style="text-align:center">2021/08/02</td><td style="text-align:center">警匪</td><td>以前看过，这次重看感觉第一部就把内容都拍完了，接下来两部拍的什么内容啊。还有法子拍两部？看来我是都忘完了。</td></tr><tr><td style="text-align:center">120</td><td style="text-align:center">无间道2</td><td style="text-align:center">无间道2</td><td style="text-align:center">2002</td><td style="text-align:center">2021/08/02</td><td style="text-align:center">警匪</td><td>这部太差了。剧情烂了点。感觉这部是匆忙之间拍出来搞钱的。</td></tr><tr><td style="text-align:center">121</td><td style="text-align:center">无间道3</td><td style="text-align:center">无间道3</td><td style="text-align:center">2003</td><td style="text-align:center">2021/08/03</td><td style="text-align:center">警匪</td><td>比第二部强一点点，但还是比第一部差太远。就像《蝴蝶效应》一样，二三四部拍的跟第一部一个样，甚至很多情节都一样，就很让人烦了。这《无间道》也差不多，更悲的是，感觉无间道二、三是乱编的，第二部就不说了，太垃圾，第三部吧，好像是无病呻吟，强行装逼，一句”对不起，我是警察“能说一万遍。剧情还玩起了精神分裂，在我看来电影里出现精神分裂，人物多重人格的，已经是垃圾剧情了，这电影竟然也这样。</td></tr><tr><td style="text-align:center">122</td><td style="text-align:center">The Suicide Squad</td><td style="text-align:center">X特遣队：全员集结</td><td style="text-align:center">2021</td><td style="text-align:center">2021/08/08</td><td style="text-align:center">科幻<br/>动作</td><td>超好看，剧情、动作、场面，都很有水准。前面的剧情还有很多搞笑的部分，能很快入戏。整部电影主线很清晰，没有太多能猜到剧情的地方。感觉在视觉效果比较好的电影里面这部是最好看的电影了。《复仇者联盟》之类的跟这个比会逊色一些的。就是不太认同这电影结尾的一点剧情，拿到硬盘来保命，而不是公布出来，这点很不认同，可能这是一个动作电影吧，在这方面不方便过多展开吧。</td></tr><tr><td style="text-align:center">123</td><td style="text-align:center">Jungle Cruise</td><td style="text-align:center">丛林奇航</td><td style="text-align:center">2021</td><td style="text-align:center">2021/08/11</td><td style="text-align:center">奇幻</td><td>爆米花电影，不值得一看。</td></tr><tr><td style="text-align:center">124</td><td style="text-align:center">Snowpiercer</td><td style="text-align:center">雪国列车</td><td style="text-align:center">2013</td><td style="text-align:center">2021/08/14<br/>(英语版)</td><td style="text-align:center">剧情</td><td>韩国的电影，看评分高才下载看的。但感觉拍的并不是特别的好。像国内大多数的电影那样，看的时候很容易走神，时不时几秒的镜头拍的乏味，就让人不那么入戏了。电影整体来说也一般般吧，设定能造出永动机这个就不说，电影把一整个列车上的人比喻全人类，尾车前车各车厢的人表示各阶层，然后车头与车尾的人全作造反来让人口均衡，这也太直白，就感觉电影没什么深度了。因为除了这些看不到别的内涵了。</td></tr><tr><td style="text-align:center">125</td><td style="text-align:center">国产凌凌漆</td><td style="text-align:center">国产凌凌漆</td><td style="text-align:center">1994</td><td style="text-align:center">2021/08/22</td><td style="text-align:center">无厘头</td><td>在9GA看到这电影的一个片段后才发现这电影隐喻那么好的，然后就下载看一遍，以前是看过这电影的，应该很多遍吧。小时候看一点没什么感觉，就是搞笑，不知道电影还要表达那么多东西。</td></tr><tr><td style="text-align:center">126</td><td style="text-align:center">做工的人</td><td style="text-align:center">做工的人</td><td style="text-align:center">2020</td><td style="text-align:center">2021/08/31<br/>S01E01<br/>2021/09/01<br/>S01E02、<br/>S01E03、<br/>S01E04、<br/>S01E05、<br/>S01E06<br/></td><td style="text-align:center">剧情</td><td>S01E01：这电视剧去年就下载过高清资源，看了第一集感觉一般般就没看下去，还把全部资源都删除了，最近看评价很高就疯狂找高清资源，结果网上高清的都没有了，看了第一集感觉很拉，就是那种有点作的人，以前好多电视剧都是那种比较作的女生搞事情来推动剧情发展，现在感觉是男人在作，如果是用这种焦虑来表现做工的人的困境，那一两次作也就可以了，结果一直这样作下去，到第二集一大半了还在作，就看不下去了。<br/>S01E02-E06：边玩边看的。男主太作，先是搞神庙被骗，再去养鳄鱼，卖古董(事后发现是假的)。前两个都是有很大成本的，还把自己家的地契拿去抵押换钱，赔钱了还去买鳄鱼之类的。感觉主角被骗之后没有怎么收敛自己。最后儿子在便利店买的彩票中了大奖，两百万哎，说送人就全送人了，不知道分配一下，拿怕是拿绝大部分出来给工友的家庭，只留一点点给自己也能让自己家人过的好一点，人家再穷再难毕竟是两百万，解决多少事情了。真TM作。也不知道编剧是怎么写的，真离谱，一点也不真实。刻意地让故事悲惨让人情感上同情这剧情，可这剧情已经脱离了现实，就已经没有《做工》这层人民生活的内涵了。<br/>以前看第一集没看下去隔了快一年又来看这电视剧是因为网上的资源都没了，以为是电视剧描写做工人的境遇太真实太讽刺才被全网删资源的，然后得不到的永远在骚动，就拼命找资源下来看，结果，这是版权方删资源有办法吧，这种剧情太水了。就是一故事会，如果有人看故事会哭的稀里哗啦，那这个人也太感性了，太容易骗了。何况这故事很离谱。</td></tr><tr><td style="text-align:center">127</td><td style="text-align:center">九一一改变美国历史</td><td style="text-align:center">台灣啟示錄第 893集</td><td style="text-align:center">2020</td><td style="text-align:center">2021/09/12</td><td style="text-align:center">纪录</td><td>回想起上初中时听到的911新闻，那时正在和几个同学一起吃早餐，有人说袭击的好，人死了我们高兴，也有人说好多美国科学家死了，对世界都是很大的损失，当时我一点也没感觉。根本不知道具体发生什么大事，也不知道要站哪一边。只大概知道有人劫持飞机撞了美国的五角大楼，里面的好多科学家死了。这就是当时一个十来岁的小孩子的感受。跟当时王维撞机事件一样，有人说他没死，被人接到一个隐蔽地方藏起来了，来要挟美国要他们的飞机零件。哈哈，那时候一点也不关心新闻，道听途说，别人说什么我就信什么。现在看911的画面，好凄惨啊，看的时候真的动容。看到一个个人从高楼跳下的画面，那种无法形容颤抖的心境。还有这片子挺好，有一个人讲解为什么要直接杀掉本拉登，为什么直接丢入海中，好多操作都是有考虑的，美国做事还是有分寸的，只是当下撤军跟那时候对比令人唏嘘。</td></tr><tr><td style="text-align:center">128</td><td style="text-align:center">Seaspiracy</td><td style="text-align:center">渔业阴谋</td><td style="text-align:center">2021</td><td style="text-align:center">2021/09/17</td><td style="text-align:center">纪录</td><td>其实看的过程中就一点点不赞同电影的观点，电影说不吃鱼，来保护环境，保护海洋，也保护整个人类地球。但我几年前看过梁宏达的节目中说，日本大概上个世纪大量抹杀鲸鱼是日本人当时没有大量脂肪摄入的来源，现在有了替代品，也就减少或是不捕杀了。又想起《雍正王朝》里弘历小时候说的那几句话“大自然天生万物，本来就是供人取用的”。电影说不吃鱼那整个捕鱼从业人成千上万的工作没了。当然电影中纪录的一些捕鱼公司跟政府部门合作，欺骗消费者，而且使用非法手段捕鱼的，确实颠覆了我的一些认知，以前想也就是个别部门的人跟个别公司勾搭赚钱，现在看来是有些国家是整个行业都非法捕鱼。没想到一个捕鱼业也有上升到灭口，追杀之类的黑帮作风，甚至还有些地方有奴工被迫做事，真的是有人的地方就有江湖，有利益就有人去做。</td></tr><tr><td style="text-align:center">129</td><td style="text-align:center">Free Guy</td><td style="text-align:center">失控玩家</td><td style="text-align:center">2021</td><td style="text-align:center">2021/09/24</td><td style="text-align:center">科幻</td><td>视觉效果好，与游戏联动内容多。剧情嘛，一般般吧，不会再看第二遍。</td></tr><tr><td style="text-align:center">130</td><td style="text-align:center">Attack of the Hollywood Cliches!</td><td style="text-align:center">好莱坞俗套大吐槽</td><td style="text-align:center">2021</td><td style="text-align:center">2021/09/29</td><td style="text-align:center"></td><td>主持人吃口苹果也要吐出来？太另类了。没有get到点上，不知道电影要表达什么，说好莱坞电影俗套的各种类型么，作为主要观看欧美电影的一个观众来说，事先已经清楚很多种俗套的类型了，甚至这电影里没讲到的一些，只是没有概括出具体类型。还有一点体会就是我在iPad上使用VLC看的这电影，VLC的字幕好像有关键字过滤的情况，像“杀”这个字就只能显示一个框框，切到繁体字幕就能正常显示。不知是不是字体编码的问题，反正对VLC的印象打了很大的折扣。</td></tr><tr><td style="text-align:center">131</td><td style="text-align:center">Squid Game</td><td style="text-align:center">鱿鱼游戏</td><td style="text-align:center">2021</td><td style="text-align:center">2021/10/03<br/>S01E01<br/>S01E02<br/>S01E03<br/>S01E04<br/>S01E05<br/>S01E06<br/>S01E07<br/>S01E08<br/>2021/10/04<br/>S01E09<br/>英语版</td><td style="text-align:center">电视剧</td><td>S01E01:没什么剧情，感觉像是残暴的杀戮，来吸引一群人来观看，这群人随意玩弄着另一群被生活所迫的人。演员的演技很好，剧情上有点拖拉，而且目前只看了这一集，这集只交代了游戏，没有对游戏运作的背景做任何说明，所以就让我感觉这是简单地杀戮游戏，电视剧也是以残暴来搏眼球。<br/>S01E02:这集也没讲多少东西，就是讲从游戏场地出来的人为什么又回去了。没别的原因，还全部都是生活所迫。所以这集是看了个寂寞。<br/>S01E03:这集进行了六场游戏的第二场，跟第一集的感觉差不多，只是比第一集内容好一些，起码有个警察去调查了，算是给这个运作游戏的团体有个简单地介绍。就是最后主角舔饼干后好多人都舔饼干，有点搞笑，我已经沉浸在这杀戮中了，已经不再觉得这个残暴的杀戮有那么残暴了，已经觉得有点享受这种残暴，现在想想有点叹息。<br/>S01E04:这集是拔河比赛，还有就是怀疑这个警察为什么那么久都没被别人发现，主角光环么？组织这么大一个游戏，参于人数巨大，而里面的安保却有这么大的漏洞。警察还能冒充长官训斥别人，面具真是个好东西。<br/>S01E05:警察终于被发现了。<br/>S01E06:这集表达的东西很多。两人一组挑队友，以为在一起合作的，挑的时候找信任的人，结果游戏开始是彼此对战，淘汰对方，也就是杀死对方，各个人立马跟本来要合作的人变脸。还有男主、男二、胖大哥、女主貌似都要被淘汰了，但主角光环就知道他们都不会死。可反转的时候都把人性描绘的淋漓尽致。男主跟老头玩，可以看出老头故意放水，男主还逼迫人家把游戏进行到底，男二绝望时想起诈骗，甚至把过往对对手的一点点好都拿来道德绑架人家，胖大哥这个倒没有多少内涵东西，女主跟对手这组很有韵味，对方跟她聊了半小时的天，一局定输赢，人家自己放水，结合悲惨的命运，与其说成全女主，不好说是对生活的绝望。就是那对夫妻怎么淘汰对方的没有说，如果拍出来也是很无情或是很无私的吧。<br/>S01E07:果然是给上流人士表演的游戏，让人体验杀戮的快感。<br/>S01E08:这集太短了，也没任何反转的剧情。<br/>S01E09:没深意。<br/>2021/10/04:看完了也写完记录，但不得不吐槽下中文字幕，英文配音很多地方很简单，不看字幕也能听的懂，就是由于听懂的太多了，才发现太多中文字幕翻译的太烂。跟机翻的差不了多少。</td></tr><tr><td style="text-align:center">132</td><td style="text-align:center">Galaxy Quest</td><td style="text-align:center">惊爆银河系</td><td style="text-align:center">1999</td><td style="text-align:center">2021/10/08</td><td style="text-align:center">科幻</td><td>有点点恶搞的感觉，但搞得很硬核，是个很不错的硬核科幻片。</td></tr><tr><td style="text-align:center">133</td><td style="text-align:center">Taxi Driver</td><td style="text-align:center">出租车司机</td><td style="text-align:center">1976</td><td style="text-align:center">2021/10/14</td><td style="text-align:center">剧情</td><td>看的时候没太明白为什么这电影的评价那么高，不明白电影要表达些什么，一个小人物的英雄主义么？于是就翻这电影的解说去看，有一点点了解，但还不足以让我认为这电影有多好，于是去看百科，去看IMDB的介绍，呵，这电影还真有影响力。电影里那个十二岁妓女的扮演者当时真的是十三岁，不是成人扮演，一些画面是她的姐姐做的替身，现实中有一个精神病迷上了她，为了引起她的注意，去刺杀了当时的总统里根。个人认为这电影本来就受一些人欢迎，加上这事更是受到更多人留意，才让评价这么多的，至于电影本身，也就是一个反应退伍老兵孤独生活的一面，拍的很好，没上面事情的加成不至于流行这么久。</td></tr><tr><td style="text-align:center">134</td><td style="text-align:center">Dune</td><td style="text-align:center">沙丘</td><td style="text-align:center">2021</td><td style="text-align:center">2021/10/19</td><td style="text-align:center">科幻</td><td>垃圾。</td></tr><tr><td style="text-align:center">135</td><td style="text-align:center">택시운전사</td><td style="text-align:center">出租车司机</td><td style="text-align:center">2017</td><td style="text-align:center">2021/10/22</td><td style="text-align:center">剧情</td><td>这电影很早之前就看过解说版，知道电影的大致内容就 一直没有看原片的愿望。最近没好电影看就下载了这部。这主演的电影作品好多都是很出名的哦，就像我在大学时看美国演员威尔·史密斯一样，也是所有出的作品都是很优秀的。为什么强调那个时候的威尔·史密斯呢，因为现在不那么认为他的电影都很优秀了。至于这电影的感受嘛。不太明白一个原因就是别的国家曝光出来了然后国家一点点变好了，国内的事情曝光了这么多，为什么一点也没变好呢。这是很重要的一点思考。也没想明白。</td></tr><tr><td style="text-align:center">136</td><td style="text-align:center">Intouchables</td><td style="text-align:center">无法触碰</td><td style="text-align:center">2011</td><td style="text-align:center">2021/10/26<br/>法国原版</td><td style="text-align:center">剧情</td><td>已经不是第一二三次看这电影了吧。以前看的时候有点感动、佩服，现在再次看这电影，只觉得男二有点幽默搞笑，为人处事有点本事，别的就感觉不出来了。虽然电影不怎么煽情，以前总会被电影中的情感所迷恋，这次看，完全没了那种感觉。也许是自己太理性了吧，也许是自己无情？反正现在不怎么喜欢这电影了。</td></tr><tr><td style="text-align:center">137</td><td style="text-align:center">我不是药神</td><td style="text-align:center">我不是药神</td><td style="text-align:center">2018</td><td style="text-align:center">2021/10/29</td><td style="text-align:center">剧情</td><td>疫情开始没多久，宅在家的时候看过这电影，当时忍不住流了很多泪。这次重看就没感觉煽情的味道，一点想流泪的感觉都没有。电影内容根本不会在现实中这样进行，“案子查不下去了”、“药进医保了，没人再吃那玩意了”，想想都是为了过审才这样拍的。我知道现实中男主做了很多无私的事，药也进了医保，但导演的完美拿捏，让我开始有点不喜欢这电影。</td></tr><tr><td style="text-align:center">138</td><td style="text-align:center">Joker</td><td style="text-align:center">小丑</td><td style="text-align:center">2019</td><td style="text-align:center">2021/11/01</td><td style="text-align:center">剧情</td><td>这电影刚出资源的时候看过一次，当时还觉得这是2019年最好看的电影了，结果被《寄生虫》拿了最佳电影。今天是第二次看。当然之间隔了差不多两年吧，正好自己世界观也变化不少，对这电影的理解感觉更深了一点。当他发现自己是领养的并且自己多笑的症状是养母对小时候的自己虐待所致，觉得自己不被世人疼爱，不被关怀，甚至，搞笑节目也是拿别人的不幸来增加观众的笑点。外面示威那么强烈，电影院里的富人还是正常欢欢喜喜看喜剧电影，福利被砍，病人没有医生开单买不了必需的药品。看电影的时候想起韩国一部电影《金福南杀人事件始末》里女二杀女主前说女主没关爱的心，平时对别人不可爱，到别人反击的时候才发现想可爱也晚了。亚瑟也差不多这样，他并没有主动找事情，甚至地铁上三个人找他事的时候他没有事先拿出枪，他只是去解析自己为什么发笑，但人家就是欺负你。电影后面的部分更有深意、内涵，只是看的时候很有感触，现在真的来写观后感了，却忘了要说什么。</td></tr><tr><td style="text-align:center">139</td><td style="text-align:center">Finch</td><td style="text-align:center">芬奇</td><td style="text-align:center">2021</td><td style="text-align:center">2021/11/06</td><td style="text-align:center">科幻</td><td>中规中矩吧，像《我是传奇》一样，电影从头到尾基本主角一人，穿梭在未来世界的公路片，未来感还行，没有太多硬科幻的东西，就两个CGI的机器人比较科幻点。如果是硬科幻迷的话可能对这电影不是很感兴趣。但这电影好像主要讲人与狗的感情，又好像不是，因为我是硬科幻迷，对这个讲宠物的感情的不是很喜欢，也或许是我没看懂电影要讲的东西。</td></tr><tr><td style="text-align:center">140</td><td style="text-align:center">007 no time to die</td><td style="text-align:center">007无暇赴死</td><td style="text-align:center">2021</td><td style="text-align:center">2021/11/11</td><td style="text-align:center">动作</td><td>电影太长了，实在有点枯燥，如果电影在两小时内还行，这三个小时多的时长，一直是打一下停一下打一下停一下，虽然剧情还算合理，逻辑还说的过去，可是太长了，后面再有文戏的时候就没耐心好好看了，以至于武戏的时候觉得也不过瘾。</td></tr><tr><td style="text-align:center">141</td><td style="text-align:center">Shang Chi and the Legend of the Ten Rings</td><td style="text-align:center">尚气与十环传奇</td><td style="text-align:center">2021</td><td style="text-align:center">2021/11/11<br/>2021/11/13<br/>第二遍</td><td style="text-align:center">奇幻</td><td>2021/11/11：在网上下电影的时候看到很多国人在骂这电影、抵制这电影，搜了一大圈不知道为什么要抵制，说是排斥男主的也没什么原因，说是电影内容对华人有诋毁的，看完也没发现。总体来说这电影吧，很能体现中国的文化底蕴，可能没有太多讲文化内涵吧，但个人感觉就是很接地气，应该这么形容。电影内容与过往国内电影特色吻合，就像当初看《功夫熊猫》时的感觉，为什么外国人也能拍出那么有中国特色的东西呢，这电影给我的感觉就是那种感觉。撇开文化方面，这电影的剧情很清晰，主线剧情明朗就不会让人看的不明不白，而且各个片段都很有吸引力，不像刚才看《007无暇赴死》时那么没趣。电影结束时开始唱歌了还不想关播放器，就是那种意犹未尽的感觉，结果还看到了两个彩蛋。由于演员大多是华人演出，里面有大量的中文对白，好多英文不容易说的台词是用中文对白说出来的，对于母语是中文的观众来说应该能特别容易理解电影内容，这也是对这电影喜爱的一点。喜欢这电影，whatever.<br/>2021/11/13：隔两天就重刷看了第二遍，电影里动作很漂亮，画面感很强，视觉效果比较好。再一次感受到剧情很接地气。女主男主他们开车逃出来进村时开的车方向盘在右边。还有一点是看网上评论说是巴士司机肩膀上的标识是违禁词，一看还真是。重看一遍连结尾的音乐也没放过，刚结束的那首好听。</td></tr><tr><td style="text-align:center">142</td><td style="text-align:center">Arcane</td><td style="text-align:center">英雄联盟：双城之战</td><td style="text-align:center">2021</td><td style="text-align:center">2021/11/14<br/>S01E01<br/>S01E02<br/>S01E03<br/>S01E04<br/>S01E05<br/>S01E06<br/>2021/11/21<br/>S01E07<br/>S01E08<br/>S01E09<br/>NF英文版</td><td style="text-align:center">动画<br/>剧集</td><td>S01E01-06：之前是很不想看这剧的，看评论太多，就下载来看下，看完六集后一个感觉：以后再有国内同步上映的影视作品，不管是国内还是国外的，一率不看中文评论，水军太多。这剧集是还可以，不是拍给儿童看的，剧情也就合理很多，但内容太拖拉，剧情进展太缓慢，六集看下来，每集四十来分钟，几度都想关了播放器。另一方面，这动画的3D风格很好看，就像是fortnite的风格。<br/>S01E07-09：这三集看下来最大的一个印象是这剧集复制了大量的游戏元素，像艾克用大招两极反转制造时间返回来打金克丝，蔚拿到了拳击手套，还能蓄力打人，那个说不上来是什么角色的人释放技能后为武器加蓝，最后剧集结束在金克丝的大招上。这一切都是英雄联盟的元素，当然这剧集本来就是英雄联盟拳头公司委托人家做的功画，角色几乎完全复制了游戏里的画面。抛开打斗场面复制游戏元素的话，这剧集的内核东西就是在一个叫皮尔特沃夫的地方，有上城来底城区分，上城就是在底城上面，有新鲜空气，有阳光，底城贴着地，没阳光，空气不好。上下城两层的人有勾结，在底城做非法买卖，底城人反击上城，上城科技好，要发动战争灭底城bulabula，其实剧集讲内核的东西讲的很少，侧重点不在上下城之战，在于各个角色的武器来源和制造，也就是讲游戏时角色的起源。这样就吸引大量玩过游戏的人，如果没玩过或不了解英雄联盟，那感觉这剧情对那部分人一点也不友好。下载了NF原版文件本想存着呢，看完后就删除，没有看第二遍的想法。</td></tr><tr><td style="text-align:center">143</td><td style="text-align:center">逆局</td><td style="text-align:center">逆局</td><td style="text-align:center">2021</td><td style="text-align:center">2021/11/29<br/>S01E01-02<br/>2021/11/30<br/>S01E03-24</td><td style="text-align:center">刑侦<br/>剧集</td><td>今天刷了一天的剧，刷完了，前面大半的剧集还不错，但到后面感觉有一点拖拉，看前面部分的时候就感觉跟国内其它剧集不太一样，不怎么废话，大部分剧情都很有必要，看的时候也很舒服，感觉不是在糊弄观众，就想一直看下去。但到后面的几集，感觉就不太一样了，有些很煽情，也有些剧情进展有点慢，看的时候就有点不耐烦了，煽情的时候就跳个二三十秒看，跳完发现还在煽情，很无奈。这电视剧总体来说可以用来打发时间，可以无聊的时候看一看，不过里面很多血腥的画面，有点看不了，就是一些血肉模糊的画面他们拍的很清楚，很逼真，看的时候就有点抵触吧。说完大致的剧情类别就说下刑侦的方面吧，我看过不少破案的电视剧，有些是像《大宋提刑官》一样解剖尸体来找证据，有些像一部香港电视剧那样，做梦或是神怪通灵才找到的证据，一类严谨，一类搞笑，这部偏向于严谨吧，但程度不能跟美剧《犯罪现场调查》比，这部剧里还是穿插了一些情感戏，但不多。可以一看但不会二刷。</td></tr><tr><td style="text-align:center">144</td><td style="text-align:center">射雕英雄传之<br/>铁血丹心<br/>东邪西毒<br/>华山论剑</td><td style="text-align:center">83版射雕</td><td style="text-align:center">1983</td><td style="text-align:center">2021/12</td><td style="text-align:center">武侠</td><td>杨康第一次带穆念慈走，在乘凉地遇到大宋百姓时，杨康反驳他们不知道反抗，不知道团结，就会任人鱼肉，那一大段话说的好有理，也很符合现今的人们。当时看的时候想到以前看的一个视频，说金庸的一些作品是反应他那个年代时的中国，可能这段也是他要表达的东西？再往后看，越来越不喜欢郭靖，做事不也尝试新东西，不敢主动冒险，遇到点困难就先问黄蓉怎么办，自己从小到大有主见的时候很少。</td></tr><tr><td style="text-align:center">145</td><td style="text-align:center">Dont look up</td><td style="text-align:center">千万别抬头</td><td style="text-align:center">2021</td><td style="text-align:center">2021/12/15</td><td style="text-align:center">科幻<br/>人性</td><td>在网上这部电影的标签标的是喜剧，我看的时候看到有一点点搞笑的时候就下意识的去笑，可笑的下一秒就感觉不那么好笑啊，也可能是根电影内容一样，两个主持人刻意地去抖机灵让你不自主的笑。其实电影讲的事情还是很严肃的，只是要拍的很严肃就没多少人看了，拍成这种讽刺的风格才更复合现实。去IMDB看了这电影的拍摄日期是在2020.11.18到2021.2.18，这个期间正好美国大选闹的很凶，也在疫情大流行的时候，这电影正好讽刺美国国内的事情，也不知道有没有因现实而改编过电影内容。演员阵容包括五位奥斯卡奖得主和两位奥斯卡提名人，应该很能说明电影的质量了吧，哪个说电影不好，接戏的演员又不是傻子。</td></tr><tr><td style="text-align:center">146</td><td style="text-align:center">楚留香传奇</td><td style="text-align:center">楚留香传奇</td><td style="text-align:center">2012</td><td style="text-align:center">2021/12/23-<br/>2021/12/26</td><td style="text-align:center">武侠剧</td><td>2倍速看完的。电视剧整体节奏太慢，风格就是陆小凤那种，注重剧情，不太在意武侠，古龙风格跟金庸风格的很大区别在于，古龙风格的你看的时候要看全剧情，而金庸的作品可能不需要看太明白，小时候或是前几年以前都是喜欢金庸的作品，很崇拜，看了一遍又一遍，现在比较喜欢古龙风格的，甚至有点讨厌金庸的大多数作品。这部楚留香传奇拍的挺好，1月5日才写的记录。</td></tr><tr><td style="text-align:center">147</td><td style="text-align:center">边城浪子</td><td style="text-align:center">边城浪子</td><td style="text-align:center">1989</td><td style="text-align:center">2021/12/30-<br/>2022/01/01</td><td style="text-align:center">武侠剧</td><td>只能说凑合吧。现在不太喜欢那种一个仇恨隔了二十年再让子孙以寻仇的方式来推进剧情的剧集。金庸的作品好几个是这种，讲了很多，最后感觉看了个寂寞，这剧集也是，虽然二十年后儿子报杀父之仇，展开的剧情也不新鲜，就算最后一集有点古龙的风格，像破案那样说出一点点故事，可太单薄了，也是点到为止的那种感觉，说是武侠剧吧，不太武侠，说是很古龙风格吧，又不是，只有最后一集的几分钟像一点点。</td></tr><tr><td style="text-align:center">148</td><td style="text-align:center">The Year Earth Changed</td><td style="text-align:center">这一年，地球变得不一样</td><td style="text-align:center">2021</td><td style="text-align:center">2022/01/08</td><td style="text-align:center">纪录片</td><td>可以说这部纪录片就是《动物世界》吧，只是它讲的是疫情下的动物世界，在大部分人都在旅行限制下时动物世界的变化。由于没有人类在海边沙滩上的活动，海龟可以自由上岸产卵，企鹅可以无所顾忌的穿过沙滩去海里捕鱼带回来哺育孩子，豹子捕到拖不动的大猎物后发出的叫声不会被游玩人的声音覆盖，就能更容易让小豹子过来享用食物。这一种种一件件，都是没有人类干预后带来的正反馈。全球含氧量上升，空气能见度提高，近在家门口几十公里外的山三十来年被雾霾笼罩，现在也能清晰可见，多让人心旷神怡啊。然后纪录片到后面就没有了，没有讲旅行限制后，人类活动增加了，动物的世界会不会又回去了。可能现在这个时候好多国家还没放开旅行限制才没展开来讲吧。</td></tr><tr><td style="text-align:center">149</td><td style="text-align:center">泪痕剑</td><td style="text-align:center">泪痕剑</td><td style="text-align:center">2005</td><td style="text-align:center">2022/01/09-<br/>2022/01/11</td><td style="text-align:center">剧集</td><td>1.5倍速看完的。不怎么样，电视剧三观太乱，玩弄女人、蹂躏小孩、各种性暗示明示，不适合平常人看。剧情也一般般吧，没有多少悬疑面，只是点武侠味道，古龙风格不足。这部剧不像别的电视剧为了一把传奇武器江湖上争来争去来发展剧情，这部剧不太在意这把泪痕剑，这点还算好点，剧情还算可以，只是感觉有点不顺畅，可能是没有仔细看的缘故吧。</td></tr><tr><td style="text-align:center">150</td><td style="text-align:center">The Book of Boba Fett</td><td style="text-align:center">波巴·费特之书</td><td style="text-align:center">2021</td><td style="text-align:center">2022/01/12<br/>S01E01<br/>S01E02<br/>2022/01/13<br/>S01E03<br/>2022/01/21<br/>S01E04<br/>2022/01/27<br/>S01E05<br/>2022/02/02<br/>S01E06<br/>2022/02/09<br/>S01E07</td><td style="text-align:center">剧集</td><td>2022/01/12：这剧刚开播的时候我就想看了，但查了下IMDB的评价，好多人打了很低的分，我就没看，最近看第二集的评分比较高，就下载下来看。第一集看着还行吧，但那个抓刺客的跑酷实在有点不好看，时间长了点，而且没什么视觉观感。还有一点就是主角从怪物肚子里出来这点以前就从一个影视解说视频那里分析得知了，好像是看曼达洛人第二季解说时说的，曼达洛人主角打怪兽取蛋时从怪兽肚子里飞出来，UP主说可能会把以前星战电影里被吞的一个角色复活，而且角色是谁也分析出来了。可能是看了外网的分析吧。这集看了感觉星战系列很多不起眼的剧情也能很圆满，甚至以前看过解说说里面的语言也打磨的很好，不是乱来的。可见这国外剧跟国内剧根本不能放在一个层面上比的。第二集打斗来升级装备，比第一集的半个小时长了十多分钟，剧情也丰富了点，深刻的印象就没了。<br/>2022/01/13：第三集看了个寂寞，下载的时候就看到文件比第一二集都小，就感觉这集时长比第一集还要短，结果看的时候，咦，怎么感觉要结束了，一看进度条，妹的，真没了。这集就一小段刺杀的片段，加上一段飞车戏吧。别的就没什么了，剧情交代的也不多，而且飞车戏拍的不怎么样，没什么激情。感觉这集是前三集里最差的一集了。<br/>2022/01/21：这集凑合，本来这集的命名就大概是暴风将至或大战将至之类的名字，看了之后也就是那种感觉，要有大的动作戏了，但又没看到的感觉。现在回想起视频内容的感觉，外国戏的动作太没水准了，打斗的时候没什么力的感觉，动作也不像练家子。<br/>2022/01/27：这集没有波巴费特，全是曼达洛人的那个主角，看的时候还疑惑呢，怎么，官方是看前几集的评价不高放出这集来了？这集都在讲另一个剧的主角哇，激动哇，以为小尤达要出来了，结果只是波巴费特手下人去找他支援的。剧情嘛，有点简单，不过视频效果很不错，而且以前曼达洛人剧集的那个主角是这集的主演，看着过瘾。<br/>2022/01/29：今天看9gag的时候看别人说这剧女主58岁了，当时一点也不信，就去IMDB上查看了一下演员信息，妹的，真的是58岁，一直以为这女主才二三十，，，为什么有些外国电影的女生看着二三十了，实际才十五六，还有这些，看着二三十了，实际，实际五十八。。。<br/>2022/02/02：这集小尤达终于出来了，也是意料中的事，Luke也出来了，当时很激动哇，然后看的时候就在想我是不是已经超出平常看视频的冷静了，这就是一平平常的电视剧而已，为什么已经让自己变得激动起来了，可能这就像那些追星或是痴迷一种东西的人一样吧，我也在痴迷于星战电影，所以才更青睐这集，至于剧情来说跟前几集差不多，也是往波巴费特与派克人对战上靠拢。<br/>2022/02/09：这集前部分的剧情转折很多，像是剧情片，很精彩，不俗套，但中后部分都是打斗场面也没有什么出奇的地方。不得不吐槽的地方有：每次黑丝女和眼镜男出镜我就出戏，他们俩的演技好像有点差，太容易让人出戏了，就像国内电影一样，看的时候让人有点尬，男的掩护人开枪还转个身再开枪，女的演技更差，懒得说了。这集别的都还好，曼达洛人躺那不动让古古去救有点说不过去，算了，剧情需要。</td></tr><tr><td style="text-align:center">151</td><td style="text-align:center">Sing</td><td style="text-align:center">欢乐好声音</td><td style="text-align:center">2016</td><td style="text-align:center">2022/01/18<br/>国语</td><td style="text-align:center">动画</td><td>最近续集出来了，我顺便查看了第一部的评价，看着评价人数和评分都还不错，就下载看了。感觉吧，不是很好，因为是一个人看的，如果是一家人陪小孩子看还行，这电影就是给小朋友看的，画面制作上感觉还行，就是剧情太弱，成年人会烦的。</td></tr><tr><td style="text-align:center">152</td><td style="text-align:center">Ron’s Gone Wrong</td><td style="text-align:center">天赐灵机</td><td style="text-align:center">2021</td><td style="text-align:center">2022/01/28<br/>国语</td><td style="text-align:center">动画</td><td>太垃圾，不适合成年人看。剧情幼稚了点，也没什么深意。</td></tr><tr><td style="text-align:center">153</td><td style="text-align:center">Jai Bhim</td><td style="text-align:center">杰伊·比姆</td><td style="text-align:center">2021</td><td style="text-align:center">2022/01/29</td><td style="text-align:center">剧情，事实事件改编</td><td>剧荒，去一个电影网站看下2021年IMDB评分最高电影是啥，结果就是这部。当时看觉得这不会是刷出来的评价吧，就像油管上好多时候音乐排行榜前几个都是印度的歌曲，而人家的CEO或是很多高管是印度人，感觉上也就是从印度人在大科技公司有了几个高管后印度的歌曲信息之类的东西才频繁占据榜单的。于是就去看了IMDB的评论，结果有172K的评价，这也太多了，而且评分也很高，刷也不太会刷这么多的评价吧，又看了那个电影网站上的评价也不错，就下载来看了。看的时候内心临时的感受写在了本子上，华人，大多喜欢引经据典，不管是老子、孔子还是孟子之类的话，都喜欢引用，来增加自己观点的强度，但有时候他们的话都对吗？中华五千年的历史到底是促进我们文化呢，还是已经阻碍了我们的发展？为什么人家西方，没什么历史进步那么多那么快，为什么连印度也是，人家历史没有五千年吧，但是怎么就这么接近现代社会，而感觉大陆还在封建社会，有时甚至连封建社会都不如。你反驳一下就有人引经据典，就有顺口溜，说的一套一套的，很顺嘴，很好听，似乎就是对的就是真理，可一点也经不起推敲。现在的印度有言论自由，能拍出批评时政的电影，像韩国一样，也是走在文化水平的前列。这电影就像韩国的《辩护人》，但比后者好看很多，这电影剧情进展比较吸引人，韩国的《辩护人》是看的爆满青筋愤慨地让人想看下去，这电影也是正义感很强吸引人，但更多的是剧情的发展很吸引人，没有太多的赘述部分，剧情转折都很顺畅，编剧写的好，导演导的好，演员演技强，看的时候也没有出戏，都是生面孔也不太可能出戏。写完记录又去看了下IMDB的信息，草，这是根据真实事件改编的电影，瞬间对这电影又是多几分佩服。</td></tr><tr><td style="text-align:center">154</td><td style="text-align:center">Peacemaker</td><td style="text-align:center">和平使者</td><td style="text-align:center">2022</td><td style="text-align:center">2022/01/29<br/>S01E01<br/>S01E02<br/>2022/01/30<br/>S01E03<br/>(前几分钟)</td><td style="text-align:center">剧集</td><td>2022/01/29：这是《自杀小队全员集结》的衍生剧，电影是很好看了，拍的很有节奏，现在还记忆犹新，可是看了这两集剧集，感觉一般般，电影是没什么大片段的对白，故事进展也很快，可是剧集就不一样了，一大段一大段的对白，说完了也没交待多少东西，都是在刻意的去搞笑，但又不怎么搞笑，两集中有很多性方面的搞笑片段，好像离开了性就没有可搞笑的东西似的。本来下载了五集，看天今天是没继续看下去的想法了，不知道以后会不会接着看。<br/>2022/01/30：本来打算接着看下剧情怎么样的，结果打开第三集，刚过了片头，他们在车上谈话时，胖女角拿平板给他们看东西的时候，出来画面是女性阴部，然后他们都笑起来了，就这搞笑？周星驰的电影早用烂了。不打算再看下去了，没意思。</td></tr><tr><td style="text-align:center">155</td><td style="text-align:center">The Power of the Dog</td><td style="text-align:center">犬之力</td><td style="text-align:center">2021</td><td style="text-align:center">2022/02/09<br/>0-77分钟</td><td style="text-align:center">西部<br/>同性</td><td>我是看到网上说这电影有12项奥斯卡提名才去下载的，下载的时候也没仔细看介绍就边下边看了。前面的时候两个男人在一张床上睡觉的时候感觉有点不太对，这么有钱的家，这么大的房子，怎么两个人还挤在一张床上睡，但没细想就一直看下去了，到一小时十七分钟的时候，真的不对劲了，于是就暂停然后去电影网站看介绍，真的是同性电影题材，随即一点看下去的兴趣也没有了，因为我知道很多同性题材的电影并不怎么样，但评价出奇的高，在上大学的时候就下载过一部评分很高的电影，看完了之后就知道大概是一群人为了矿工的权益斗争的吧，是一个教堂之类的地方，当时并不感觉是什么好电影，但评分很高，然后从那之后再高评分的同性电影也不看，可是这次下载的时候盲目信了奥斯卡提名，没看电影简介。单从前77分钟来讲并不怎么样，故事太慢节奏，如果没有提名加成单看电影是看不下去的。再次确定《小丑》没得最佳电影，而让《寄生虫》拿了的奥斯卡已经不值得信任。<br/>Update：刚看了电影解说，原来不算真正的同性电影，只是电影内容里面有一个同性人物而已，电影真正要表达的是那几个人之间的矛盾来展现不同人之间感情或亲情的纠葛。不过由于前77分钟电影过于慢节奏，也不打算把剩下的内容看了。</td></tr><tr><td style="text-align:center">156</td><td style="text-align:center">Ascension</td><td style="text-align:center">登楼叹</td><td style="text-align:center">2021</td><td style="text-align:center">2022/02/11</td><td style="text-align:center">纪录片</td><td>2022/02/22update：重装系统从Big sur换到Monterey，博客文件忘了更新备份十几条记录没了，一个一个从网站上复制下来重新编辑，结果使用的MarkText的BUG一大堆，最后保存的这条没保存到。大概记得当时看纪录片的感受是看过的最菜的一部纪录片，连旁白都没有，没有一点立场，而且拍摄的画面也太片面，很多农村的落后片子里根本没有。</td></tr><tr><td style="text-align:center">157</td><td style="text-align:center">柴静雾霾调查：穹顶之下</td><td style="text-align:center">柴静雾霾调查：穹顶之下</td><td style="text-align:center">2015</td><td style="text-align:center">2022/02/27</td><td style="text-align:center">纪录片</td><td>这部纪录片刚出来的时候看过，今天重看是因为想起里面的一句话：胖，但是虚胖。原因是想到最近俄乌战争想到俄国是强大，但也是虚大而已，武器装备比起西方和美国支援的武器太落后。七年前的纪录片了，这七年中国有多大变化呢，我只是感受到了现在街上的餐饮业全部都要装油烟机，也不知道是不是因为这样油烟机可以多卖一点才这么卖力推动的。现在不还是很多烧煤的发电厂么，去年不是还出现电荒么，结构还没变化，煤油体制还不是没改革。柴静当时已经总结的很好了，就一个原因：钱。最后还讲到了体制改革上，但现在看来没什么改变。</td></tr><tr><td style="text-align:center">158</td><td style="text-align:center">The Emperor’s New Groove</td><td style="text-align:center">变身国王</td><td style="text-align:center">2000</td><td style="text-align:center">2022/02/27<br/>0-30多分钟2022/02/28<br/>后面部分<br/>台配国语</td><td style="text-align:center">动画</td><td>在reddit上看到别人讨论百看不厌的电影时有很多人说了这部电影。于是我就去下载准备看，昨天看了半个多小时吧，感觉一般般，就没看下去。今天吃饭的时候看完了，也就那样吧。说这电影有很多隐喻吧，但太肤浅，给小孩子看吧，小孩子不一定能体会太多电影要素，给成人看吧，又感觉有点幼稚。</td></tr><tr><td style="text-align:center">159</td><td style="text-align:center">GoodFellas</td><td style="text-align:center">好家伙</td><td style="text-align:center">1990</td><td style="text-align:center">2022/03/03<br/>0-77分钟<br/>2022/03/04<br/>后面部分<br/>国语配音</td><td style="text-align:center">黑帮</td><td>2022/03/06:忘写记录了，今天才写。感觉不好看，影片过于写实，剧情上就没有普通编写的剧本好看，看完之后也不知道电影要表现的是什么，就是这个曾经的小混混一步一步做到毒枭，再几度进监狱，最后指证同伙的故事么，电影要表达那个时期社会的动乱？还是这个英雄般的传奇故事？因为剧情几乎没有什么反转，看的时候也有点枯燥。</td></tr><tr><td style="text-align:center">160</td><td style="text-align:center">Spider-Man No Way Home</td><td style="text-align:center">蜘蛛侠：英雄无归</td><td style="text-align:center">2021</td><td style="text-align:center">2022/03/12</td><td style="text-align:center">科幻</td><td>按下那个盒子就能把多维人物送回，为什么还要把人都抓回来再按，直接按不行？蜘蛛侠改咒语改了五次？就不能一次说完，就不能说一个后思考一会再执行更改？博士不问一下就改？虽然有点搞笑，但这点剧情太扯。电影要结束了，再施咒语的时候博士就问要不要考虑，说了咒语的后果，还给蜘蛛侠一段时间跟他的朋友告别，是不是跟前面一次施法区别太大？总的来说这电影剧情真的很没水平，就是特效好看，画面很美，只是有的时候画面跳转太大，转镜速度快，让人看的眼花缭乱。电影看后想着一些人为设定的场景，想尽办法让多数人支持这个场景然后喜欢这个场景，之后再通过这个场景达到目的，比如牟利。像这电影中的多维宇宙，目前没什么科学基础，但就是被好莱坞玩的很溜，哪哪都能看到这种多维。</td></tr><tr><td style="text-align:center">161</td><td style="text-align:center">Turning Red</td><td style="text-align:center">青春变形记</td><td style="text-align:center">2022</td><td style="text-align:center">2022/03/14<br/>台配国语</td><td style="text-align:center">动画</td><td>其实昨天看了二十来分钟，看的有点尬，美美妈一直这么监视着美美，还在那么多同学面前大喊给她带了卫生巾，当时就看不下去了，哪有这么脑残的剧情。为了制造冲突也不找点好一点的点子，事情重复用了很多次就没意思了。但昨晚看了网上很多人说这电影好看，我就又下载看看到底行不行。现在看完真的感觉是一部很好的电影。我以前总是喜欢那种一部电影能暗含一些事情，或是暗喻、明喻一些道理，不喜欢那种单单的故事会电影。很多成年人也不喜欢看动画片了，都觉得是小孩子才应该看动画，但我一直喜欢看，当初的原因是动画做的好，故事看的比较顺畅，慢慢的看了很多有意思的动画片后就一点一点转变了观点。像《疯狂动物城》、《心灵奇旅》这种很有深意的电影我都是刷好几次遍的。这部电影应该也算达到这个档次了吧。它诠释了家庭中的矛盾，那种墨守陈规与新事物之间的矛盾。一个一直受家长管制，什么事都要家长同意，自己不能有任何主见，慢慢地就没主见了，这点我深有体会，也是喜欢这电影的主要原因。这种事情在国内发生的比较多吧，老一套的思想还是太多。</td></tr><tr><td style="text-align:center">162</td><td style="text-align:center">One Child Nation</td><td style="text-align:center">独生之国</td><td style="text-align:center">2019</td><td style="text-align:center">2022/03/14</td><td style="text-align:center">纪录片</td><td>我很喜欢看这种类型的纪录片。前几天在IMDB里看到有一个列表是记录豆瓣所禁的电影，就发现很多电影，这部是其中之一。当时觉得有点诡异，IMDB上的英文名和电影里展现的英文名不一样，IMDB上是Born in China，但搜索这个会出现别的电影，不出现这部纪录片，看IMDB的简介才知道One Child Nation这个英文名。于是就好下载了。速度也很快，上海的一个用户供速，基本可以达到满速下载。应该算还有人很在意这部纪录片的。看完后确实增添了一些不一样的见识，虽然说我一直不相信计划生育这个政策，一直觉得不好，但没一点实际证据和论据去说服自己，但这纪录片里展示了很多案例，甚至官民合作的事情也是很普遍的。轮廓基本就能想像。福利院让外国人收养孩子，国内有专门收集弃婴或是纪录片里隐晦的说抢走别人的孩子，或是拐卖的孩子，甚至多生孩子后要交社会抚养费，这都是利益在驱动。我也是纪录片里说的很严的那段年份出生的人，现在才能理解当时我妈给我上户口时为什么给我报大了三岁。影片中说很多人回想到那个年代都说是没办法，是啊，都是底层人民，制定政策的人根本体会不到政策带来的后果。</td></tr></tbody></table>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;看过的电影太多了，好多都想不起来当初观看时的印象，2020年4月萌生记录日常的想法，随写下此文。记录只是写下记录的那一个时间点的个人想法，存到自己风烛残年之时用来回忆。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:cente</summary>
      
    
    
    
    <category term="电影" scheme="https://xtvj.github.io/categories/%E7%94%B5%E5%BD%B1/"/>
    
    
    <category term="电影" scheme="https://xtvj.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>PC使用技巧</title>
    <link href="https://xtvj.github.io/2020/04/08/PC%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
    <id>https://xtvj.github.io/2020/04/08/PC%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
    <published>2020-04-07T21:41:58.000Z</published>
    <updated>2021-10-20T15:13:30.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li><h5 id="Excel移动列">Excel移动列</h5><p>选中列，按住shift键，当鼠标变成十字型时候，可以拖拽到任意指定列</p></li><li><h5 id="Win10设置右键打开cmd">Win10设置右键打开cmd</h5><p><a href="https://blog.csdn.net/mooneve/article/details/78821843">https://blog.csdn.net/mooneve/article/details/78821843</a></p><p><a href="https://blog.csdn.net/hiudawn/article/details/80701935">https://blog.csdn.net/hiudawn/article/details/80701935</a></p></li><li><h5 id="ffmpeg提取字幕流">ffmpeg提取字幕流</h5><pre class="language-none"><code class="language-none">&#x2F;&#x2F;原始文本输出ffmpeg -i output.mkv -an -vn -bsf:s mov2textsub -scodec copy -f rawvideo sub.txtffmpeg -i output.mkv -an -vn -c:s copy -f rawvideo -map 0:s sub2.txt&#x2F;&#x2F;ass格式输出ffmpeg -i output.mkv -an -vn -scodec copy sub3.ass</code></pre><span id="more"></span></li><li><h5 id="Windows自带MD5、SHA1、SHA256命令">Windows自带MD5、SHA1、SHA256命令</h5><pre class="language-none"><code class="language-none">&#x2F;&#x2F;certutil -hashfile  &lt;文件名&gt;  &lt;hash类型&gt;certutil -hashfile  3.mp4 SHA256</code></pre></li><li><h5 id="ffmpeg合并音频和视频">ffmpeg合并音频和视频</h5><pre class="language-none"><code class="language-none">ffmpeg -i video.mp4 -i audio.wav  -c:v copy -c:a aac -strict experimental output.mp4</code></pre><p>复制音频而无需重新编码，如果您的输出容器可以（几乎）处理任何编解码器（例如MKV），那么您只需复制音频和视频流即可：</p><pre class="language-none"><code class="language-none">ffmpeg -i video.mp4 -i audio.wav -c copy output.mkv</code></pre></li></ul>]]></content>
    
    
    <summary type="html">&lt;ul&gt;
&lt;li&gt;
&lt;h5 id=&quot;Excel移动列&quot;&gt;Excel移动列&lt;/h5&gt;
&lt;p&gt;选中列，按住shift键，当鼠标变成十字型时候，可以拖拽到任意指定列&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&quot;Win10设置右键打开cmd&quot;&gt;Win10设置右键打开cmd&lt;/h5&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/mooneve/article/details/78821843&quot;&gt;https://blog.csdn.net/mooneve/article/details/78821843&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/hiudawn/article/details/80701935&quot;&gt;https://blog.csdn.net/hiudawn/article/details/80701935&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;h5 id=&quot;ffmpeg提取字幕流&quot;&gt;ffmpeg提取字幕流&lt;/h5&gt;
&lt;pre class=&quot;language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;&amp;#x2F;&amp;#x2F;原始文本输出
ffmpeg -i output.mkv -an -vn -bsf:s mov2textsub -scodec copy -f rawvideo sub.txt
ffmpeg -i output.mkv -an -vn -c:s copy -f rawvideo -map 0:s sub2.txt
&amp;#x2F;&amp;#x2F;ass格式输出
ffmpeg -i output.mkv -an -vn -scodec copy sub3.ass&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Windows" scheme="https://xtvj.github.io/categories/Windows/"/>
    
    
    <category term="技巧" scheme="https://xtvj.github.io/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>设计模式</title>
    <link href="https://xtvj.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    <id>https://xtvj.github.io/2020/02/22/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</id>
    <published>2020-02-22T10:27:37.000Z</published>
    <updated>2020-11-08T08:51:40.000Z</updated>
    
    <content type="html"><![CDATA[<p>Android中常用的设计模式</p><ol><li><h4 id="单例模式："><strong>单例模式：</strong></h4></li></ol><p>这个应该是Android开发中最常用的了，目的就是确保只有一个实例，什么懒汉、饿汉、双重锁的，都不行，就用内部类方式即可。</p><p><strong>用处</strong>：实现在线程安全的情况下只有一个实例。</p><pre class="language-none"><code class="language-none">public class SingletonInner &#123;      &#x2F;**      * 私有的构造器     *&#x2F;      private SingletonInner() &#123;      &#125;     &#x2F;**      * 内部类实现单例模式      * 延迟加载，减少内存开销      *&#x2F;      private static class SingletonHolder &#123;          private static SingletonInner instance &#x3D; new SingletonInner();      &#125;          public static SingletonInner getInstance() &#123;          return SingletonHolder.instance;      &#125;  &#125;</code></pre><ol start="2"><li><h4 id="工厂模式："><strong>工厂模式：</strong></h4></li></ol><p>我的理解就是抽取方法，只是把抽取的模块放在同一个类中，调用时根据不同字段来调用此类不同的功能。</p><p>首先创建一个辣条类</p><pre class="language-none"><code class="language-none">public interface HotStrip &#123;    void info();&#x2F;&#x2F;用于输出辣条信息&#125;</code></pre><p>实现不同各类的辣条</p><pre class="language-none"><code class="language-none">public class BigHotStrip implements HotStrip &#123;    @Override    public void info() &#123;        System.out.println(&quot;这是大面筋！&quot;);    &#125;&#125;</code></pre><pre class="language-none"><code class="language-none">public class KissHotStrip implements HotStrip&#123;    @Override    public void info() &#123;        System.out.println(&quot;这是亲嘴烧！&quot;);    &#125;&#125;</code></pre><p>创建工厂类</p><pre class="language-none"><code class="language-none">public class HotStripFactory &#123;    public HotStrip produce(String type) &#123;        if (&quot;kiss&quot;.equals(type)) &#123;            return new KissHotStrip();        &#125; else if (&quot;big&quot;.equals(type)) &#123;            return new BigHotStrip();        &#125;        return null;    &#125;&#125;</code></pre><p>最后应用阶段</p><pre class="language-none"><code class="language-none">public class FactoryTest &#123;    @Test    public void testHotStrip() &#123;        HotStripFactory factory &#x3D; new HotStripFactory();        HotStrip hotStrip &#x3D; factory.produce(&quot;kiss&quot;);&#x2F;&#x2F;需要亲嘴烧时传入kiss&#x2F;&#x2F;        hotStrip &#x3D; factory.produce(&quot;big&quot;);&#x2F;&#x2F;需要大面筋时传入big        hotStrip.info();    &#125;&#125;</code></pre><p><strong>优点</strong><br>一个调用者想创建一个对象，只要知道其名称就可以了。<br>扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>屏蔽产品的具体实现，调用者只关心产品的接口。<br><strong>缺点</strong><br>每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。 这并不是什么好事。</p><p><strong>抽象工厂模式</strong> <a href="https://www.runoob.com/design-pattern/abstract-factory-pattern.html">菜鸟教程连接</a>（最易懂版本）<br>把生产抽象成一个接口，<strong>每个实例类都对应一个工厂类</strong>（普通工厂只有一个工厂类），同时所有工厂类都继承这个生产接口。</p><ol start="3"><li><h4 id="建造者模式：参考代码"><strong>建造者模式：</strong><a href="https://github.com/iluwatar/java-design-patterns/blob/c4418311c646f140aecd6b9b12d86d05b2fa558e/builder/src/main/java/com/iluwatar/builder/Hero.java">参考代码</a></h4><p>就是常用的Builder，常在自定义View里用到。比如：</p></li></ol><pre class="language-none"><code class="language-none">new Custom.Builder(XXX).withColor(XXX).withType(XXX).builder();</code></pre><p>在控件中写一个Builder方法，来设置各种参数。</p><ol start="4"><li><h4 id="观察者模式：参考代码"><strong>观察者模式：</strong><a href="https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode/blob/master/article/design_patterns/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-Observer.md">参考代码</a></h4></li></ol><p>当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。 比如，当一个对象被修改时，则会自动通知它的依赖对象。观察者模式属于行为型模式。</p><p>参考：</p><p><a href="https://github.com/jeanboydev/Android-ReadTheFuckingSourceCode">Android 技术笔记</a></p><p><a href="https://www.runoob.com/design-pattern/abstract-factory-pattern.html">抽象工厂模式</a></p><p><a href="https://github.com/helen-x/AndroidInterview/blob/master/android/Android%20%E6%BA%90%E7%A0%81%E4%B8%AD%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F(%E4%BD%A0%E9%9C%80%E8%A6%81%E7%9F%A5%E9%81%93%E7%9A%84%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E5%85%A8%E5%9C%A8%E8%BF%99%E9%87%8C).md">Android 源码中的设计模式(你需要知道的设计模式全在这里)</a></p><p><a href="https://github.com/iluwatar/java-design-patterns">java-design-patterns</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Android中常用的设计模式&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;h4 id=&quot;单例模式：&quot;&gt;&lt;strong&gt;单例模式：&lt;/strong&gt;&lt;/h4&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个应该是Android开发中最常用的了，目的就是确保只有一个实例，什么懒汉、饿汉、双重锁的，都不</summary>
      
    
    
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>Android开发填坑记录</title>
    <link href="https://xtvj.github.io/2019/10/12/Android%E5%BC%80%E5%8F%91%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2019/10/12/Android%E5%BC%80%E5%8F%91%E5%A1%AB%E5%9D%91%E8%AE%B0%E5%BD%95/</id>
    <published>2019-10-12T14:31:45.000Z</published>
    <updated>2022-03-01T07:37:20.251Z</updated>
    
    <content type="html"><![CDATA[<p><strong>双冒号运算</strong>就是Java中的[方法引用],[方法引用]的格式是 <strong>类名::方法名。</strong></p><p>一般是用作Lambda表达式</p><p><strong>例如</strong></p><p>表达式:</p><pre class="language-text" data-language="text"><code class="language-text">person -> person.getName();</code></pre><p>可以替换成</p><pre class="language-text" data-language="text"><code class="language-text">Person::getName</code></pre><p>表达式</p><pre class="language-text" data-language="text"><code class="language-text">() -> new HashMap&lt;>();</code></pre><p>可以替换成</p><pre class="language-text" data-language="text"><code class="language-text">HashMap::new</code></pre><p>这种[方法引用]或者说[双冒号运算]对应的参数类型是Function&lt;T,R&gt; T表示传入类型，R表示返回类型。</p><span id="more"></span><hr><p><strong>Android studio快捷键</strong></p><table><thead><tr><th><strong>按键</strong></th><th><strong>说明</strong></th></tr></thead><tbody><tr><td>Shift + F2</td><td>定位到错误行</td></tr><tr><td>Ctrl(Command)+Shift+ - / +</td><td>折叠/展开全部代码</td></tr><tr><td>Ctrl(Command)+F12</td><td>显示当前文件的结构</td></tr><tr><td>Shift + F11</td><td>查看书签</td></tr><tr><td>F11</td><td>添加书签</td></tr><tr><td>Ctrl + Alt + M</td><td>快速抽取方法</td></tr></tbody></table><hr><p>一、启动app adb shell am start 包名/MainActivity</p><p>二、停止app adb shell am force-stop <a href="http://com.xxx.xxx">com.xxx.xxx</a> 这种方法会强制停止APP进程，不会清除APP进程在系统中产生的数据</p><p>adb shell pm clear <a href="http://com.xxx.xxx">com.xxx.xxx</a> 这种方法不仅会停止APP进程，而且会清除这个APP进程产生的所有数据</p><hr><p>ffmpeg 卡顿问题</p><p>ffmpeg 转码H.264 High Profile的输入做直播时会有卡顿的现象；而且设定的帧率也达不到； 是因为解码H.264 HP的速度达不到造成的。 将编译时的“–disable-optimizations”去掉就可以了；</p><hr><p>使用Properties做本地储存时，读取的中文为乱码，可以在android studio中进入File &gt; Settings &gt; Editor &gt; File Encodings 里Project Encoding（如果右下角<Transparent native-to-ascii conversion >为打对勾，则需要勾选上）</p><hr><p>指定device来执行adb shell</p><p>adb -s devicename shell</p><hr><p>AtomicBoolean是java.util.concurrent.atomic包下的原子变量，这个包里面提供了一组原子类。其基本的特性就是在多线程环境下，当有多个线程同时执行这些类的实例包含的方法时，具有排他性，即当某个线程进入方法，执行其中的指令时，不会被其他线程打断，而别的线程就像自旋锁一样，一直等到该方法执行完成。</p><p>CAS，在Java并发应用中通常指CompareAndSwap或CompareAndSet，即比较并交换。CAS是一个原子操作，它比较一个内存位置的值并且只有相等时修改这个内存位置的值为新的值，保证了新的值总是基于最新的信息计算的，如果有其他线程在这期间修改了这个值则CAS失败。CAS返回是否成功或者内存位置原来的值用于判断是否CAS成功。</p><p>可以粗暴地认为是个线程锁功能。</p><hr><p>Fragment重叠问题</p><p>出现这种问题的原因是：当我们旋转屏幕的时候，activity会被销毁并重新创建，并且在销毁之前执行了onSaveInstanceState(Bundle outState)这个方法。这个方法会保存activity的一些信息，其中就包括添加过的fragment，当activity被重新创建时，会初始化其中的变量，这个时候点击底部导航的话会重新去添加fragment，也就导致了重叠的问题。</p><p>问题重现：手机的 “设置” - “开发者选项” - 打开”不保留活动”(主要用于模拟Activity被及时回收) 。</p><p>解决方法：</p><p>一、通过注释掉这句话，这样主 Activity 因为种种原因被回收的时候就不会保存之前的 fragment state</p><pre class="language-none"><code class="language-none">@OverrideprotectedvoidonSaveInstanceState(Bundle outState) &#123;&#x2F;&#x2F;如果用以下这种做法则不保存状态，再次进来的话会显示默认tab&#x2F;&#x2F;总是执行这句代码来调用父类去保存视图层的状态&#x2F;&#x2F;super.onSaveInstanceState(outState);&#125;</code></pre><p>二、阻止系统恢复Fragment state，在FragmentActivity保存所有Fragment状态前把Fragment从FragmentManager中移除掉。（不可取，开启新的Activity也可能触发onSaveInstanceState,如果没判空就会崩溃，判空的话，返回这个界面，就是空白，因为Fragment全部被移除了。除非自行判空，没验证。）</p><pre class="language-none"><code class="language-none">protected void onSaveInstanceState(Bundle outState) &#123;       FragmentTransaction transaction &#x3D; fm.beginTransaction();       transaction.remove(tab1);       transaction.remove(tab2);       transaction.remove(tab3);       transaction.remove(tab4);       transaction.commitAllowingStateLoss();       super.onSaveInstanceState(outState);   &#125;</code></pre><p>三、在onSaveInstanceState(outState)中去保存fragment，当activity被恢复时，取出这些fragment即可。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;onCreate方法中if (savedInstanceState !&#x3D; null) &#123;            &#x2F;*获取保存的fragment  没有的话返回null*&#x2F;            homeFragment &#x3D; (HomeFragment) getSupportFragmentManager().getFragment(savedInstanceState, HOME_FRAGMENT_KEY);            dashboardFragment &#x3D; (DashboardFragment) getSupportFragmentManager().getFragment(savedInstanceState, DASHBOARD_FRAGMENT_KEY);            noticeFragment &#x3D; (NoticeFragment) getSupportFragmentManager().getFragment(savedInstanceState, NOTICE_FRAGMENT_KEY);            addToList(homeFragment);            addToList(dashboardFragment);            addToList(noticeFragment);        &#125; else &#123;            initFragment();        &#125;</code></pre><hr><p>让APP重启自己的两种方法</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;重启应用Intent intent &#x3D; new Intent(getApplicationContext(), MainActivity.class);intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);startActivity(intent);android.os.Process.killProcess(android.os.Process.myPid());</code></pre><pre class="language-none"><code class="language-none">Intent intent &#x3D; new Intent(getApplicationContext(), MainActivity.class);       &#x2F;&#x2F;重启应用，得使用PendingIntent       PendingIntent restartIntent &#x3D; PendingIntent.getActivity(               getApplicationContext(), 0, intent,               PendingIntent.FLAG_UPDATE_CURRENT);       &#x2F;&#x2F;退出程序       AlarmManager mAlarmManager &#x3D; (AlarmManager) getSystemService(Context.ALARM_SERVICE);       mAlarmManager.set(AlarmManager.RTC, System.currentTimeMillis() + 100,               restartIntent); &#x2F;&#x2F; 100毫秒后重启应用       android.os.Process.killProcess(android.os.Process.myPid());</code></pre><hr><p>Android 设置Edittext获取焦点并弹出软键盘</p><pre class="language-none"><code class="language-none">    editText.setFocusable(true);    editText.setFocusableInTouchMode(true);    editText.requestFocus();    &#x2F;&#x2F;显示软键盘activity.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE);    &#x2F;&#x2F;如果上面的代码没有弹出软键盘 可以使用下面另一种方式    &#x2F;&#x2F;InputMethodManager imm &#x3D; (InputMethodManager) activity.getSystemService(Context.INPUT_METHOD_SERVICE);   &#x2F;&#x2F; imm.showSoftInput(editText, 0); </code></pre><hr><p>用命令行新建指定大小的文件</p><p>在Linux环境下的实现方法</p><p>使用dd命令：功能是复制文件，并且可以通过选项指定复制方式。比如</p><pre class="language-none"><code class="language-none">dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;test.txt bs&#x3D;32 count&#x3D;32</code></pre><p>（源文件是/dev/zero，目标文件是test.txt，也就是需要生成的文件。复制生成文件大小的是32*32=1024字节）</p><p>在Windows环境下的实现方法</p><p>使用fsutil命令，在windows xp和win 7下应该都自带了这个命令。命令的格式是 fsutil file createnew 新文件名 文件大小。例如生成一个1K大小的文件，可以使用</p><pre class="language-none"><code class="language-none">fsutil file createnew test.txt 1024</code></pre><hr><p>在activity中调用 moveTaskToBack (boolean nonRoot)方法即可将activity 退到后台，注意不是finish()退出。<br>参数为false代表只有当前activity是task根，指应用启动的第一个activity时，才有效;<br>如果为true则忽略这个限制，任何activity都可以有效。</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;android 应用退到后台，类似最小化moveTaskToBack(true);</code></pre><hr><p>ANR分析办法之一：traces.txt</p><pre class="language-none"><code class="language-none">adb pull &#x2F;data&#x2F;anr&#x2F;traces.txt</code></pre><p>在文件中使用 ctrl + F 查找包名可以快速定位相关代码。<br>通过log可以看出相关问题<br>产生新的ANR，原来的 traces.txt 文件会被覆盖</p><hr><p>BottomNavigationView切换时不显示图标颜色，需要取消导航栏图标着色。</p><pre class="language-none"><code class="language-none">navigation.setItemIconTintList(null);</code></pre><hr><p><strong>JNI 数据类型映射</strong></p><ul><li>基本数据类型：</li></ul><table><thead><tr><th>Java类型</th><th>本地类型（Native Type）</th><th>描述</th></tr></thead><tbody><tr><td>boolean</td><td>jboolean</td><td>C/C++无符号8位整型 （unsigned char）</td></tr><tr><td>byte</td><td>jbyte</td><td>C/C++带符号8位整型 （char）</td></tr><tr><td>char</td><td>jchar</td><td>C/C+无符号16位整型 （unsigned short）</td></tr><tr><td>short</td><td>jshort</td><td>C/C++带符号16位整型 （short）</td></tr><tr><td>int</td><td>jint</td><td>C/C++带符号32位整型 （int）</td></tr><tr><td>long</td><td>jlong</td><td>C/C++带符号64位整型 （long）</td></tr><tr><td>float</td><td>jfloat</td><td>C/C++32位浮点型 （float）</td></tr><tr><td>double</td><td>jdouble</td><td>C/C++64位浮点型 （double）</td></tr></tbody></table><p>基本数据类型的映射即在Java的基本数据类型前面添加 j 就是本地类型的基本数据类型</p><ul><li>引用数据类型：</li></ul><table><thead><tr><th>Java类型</th><th>本地类型（Native Type）</th><th>描述</th></tr></thead><tbody><tr><td>Object</td><td>jobject</td><td>任何java对象</td></tr><tr><td>Class</td><td>jclass</td><td>Class类对象</td></tr><tr><td>String</td><td>jstring</td><td>字符串对象</td></tr><tr><td>Object[]</td><td>jobjectArray</td><td>任何对象的数组</td></tr><tr><td>boolean[]</td><td>jbooleanArray</td><td>布尔型数组</td></tr><tr><td>byte[]</td><td>jbyteArray</td><td>比特型数组</td></tr><tr><td>char[]</td><td>jcahrArray</td><td>字符型数组</td></tr><tr><td>short[]</td><td>jshortArray</td><td>短整型数组</td></tr><tr><td>int[]</td><td>jintArray</td><td>整型数组</td></tr><tr><td>long[]</td><td>jlongArray</td><td>长整形数组</td></tr><tr><td>float[]</td><td>jfloatArray</td><td>浮点型数组</td></tr><tr><td>double[]</td><td>jdoubleArray</td><td>双浮点型数组</td></tr><tr><td>void</td><td>void</td><td></td></tr></tbody></table><hr><p>沉浸式状态栏</p><pre class="language-none"><code class="language-none">    &#x2F;*    设置沉浸式状态栏sdk&gt;21，虚拟导航栏也透明     *&#x2F;    public static void setStatusBar(Activity context) &#123;        View decorView &#x3D; context.getWindow().getDecorView();        int option &#x3D; View.SYSTEM_UI_FLAG_LAYOUT_HIDE_NAVIGATION                | View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;        decorView.setSystemUiVisibility(option);        context.getWindow().setNavigationBarColor(Color.TRANSPARENT);        context.getWindow().setStatusBarColor(Color.TRANSPARENT);    &#125;    &#x2F;&#x2F;设置白色状态栏 color用R.color.***    public static void setWhiteStatusBar(Activity context,int color) &#123;        int option &#x3D; View.SYSTEM_UI_FLAG_IMMERSIVE                | View.SYSTEM_UI_FLAG_VISIBLE;        context.getWindow().getDecorView().setSystemUiVisibility(option);        if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.M) &#123;            context.getWindow().setStatusBarColor(context.getColor(color));context.getWindow().getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);        &#125;    &#125;    &#x2F;&#x2F;设置暗色状态栏    public static void setDarkStatusBar(Activity context)&#123;        int option &#x3D; View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN                | View.SYSTEM_UI_FLAG_LAYOUT_STABLE;        context.getWindow().getDecorView().setSystemUiVisibility(option);        context.getWindow().setStatusBarColor(Color.TRANSPARENT);    &#125;</code></pre><hr><p>P版本应用在sd卡根目录(getExternalCacheDir)保存的应用数据卸载时不会被清除，但是Q版本这部分数据实际保存的是应用的沙箱目录 下，卸载的时候回全部被清除；应用如果不想卸载的时候被删除数据，需要应用在manifest文件增加:，这样卸载应用的时候，系统弹出的对话框中才会有第二个勾选框出现(不增加该属性是不会有第二个勾选出现)，默认删除，勾选保留。</p><hr><p>拍照、选择图片 适配7.0以上，从 Android 7.0 开始，禁止在您的应用外部公开 file:// URI</p><pre class="language-none"><code class="language-none"> &#x2F;&#x2F;指定Uri，拍照返回的data为空String tempImagePath &#x3D; getFilesDir().getPath();tempImageFile &#x3D; File.createTempFile(&quot;image_&quot;, &quot;.jpg&quot;, new File(tempImagePath));Intent intent &#x3D; new Intent(MediaStore.ACTION_IMAGE_CAPTURE);if (Build.VERSION.SDK_INT &gt;&#x3D; 24) &#123;  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);  intent.putExtra(MediaStore.EXTRA_OUTPUT,  FileProvider.getUriForFile(TakePhotoOrChoosePhotoActivity.this,                                        &quot;com.huangyuanlove.adaptationhighversion.fileprovider&quot;, tempImageFile));&#125; else &#123;  intent.putExtra(MediaStore.EXTRA_OUTPUT, Uri.fromFile(tempImageFile));&#125;startActivityForResult(intent, TAKE_PHOTO_CODE);</code></pre><p>当拍照返回之后</p><pre class="language-none"><code class="language-none">bitmap &#x3D; BitmapFactory.decodeFile(tempImageFile.getPath());showImage.setImageBitmap(bitmap);</code></pre><p>选择图片的时候：</p><pre class="language-none"><code class="language-none">Intent albumIntent &#x3D; new Intent(Intent.ACTION_PICK);albumIntent.setDataAndType(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, &quot;image&#x2F;*&quot;);startActivityForResult(albumIntent, CHOOSE_PHOTO_CODE);</code></pre><p>选择图片返回的时候</p><pre class="language-none"><code class="language-none">if (data !&#x3D; null) &#123;  Uri selectedImage &#x3D; data.getData();  String[] filePathColumn &#x3D; &#123;MediaStore.Images.Media.DATA&#125;;  Cursor cursor &#x3D; getContentResolver().query(selectedImage,                                             filePathColumn, null, null, null);  cursor.moveToFirst();  int columnIndex &#x3D; cursor.getColumnIndex(filePathColumn[0]);  String picturePath &#x3D; cursor.getString(columnIndex);  cursor.close();  bitmap &#x3D; BitmapFactory.decodeFile(picturePath);  showImage.setImageBitmap(bitmap);&#125;</code></pre><hr><p>自定义View</p><p><a href="https://www.gcssloop.com/category/customview">https://www.gcssloop.com/category/customview</a></p><hr><p>google flexboxlayout</p><p>layout_wrapBefore：这个属性使得子 View 可以强制换行，该属性在 flex_wrap 属性值 为 nowrap（不换行）的时候是无效的。 该属性结束 boolean 变量，默认 false，即不强制换行。</p><p>layout_flexGrow：这个属性类似于 LinearLayout 中的 layout_weight 属性，如果没有指定，则将 0 设置为默认值。如果果同一 flex 行中的多个子 View 有正的 layout_flexGrow 值，那么剩余的空闲空间将根据它们声明的 layout_flexGrow 值的比例分布。</p><hr><p>ROOM数据库使用填坑</p><p>引入：</p><pre class="language-none"><code class="language-none">&#x2F;&#x2F;Room数据库implementation &quot;androidx.room:room-runtime:2.2.0-alpha01&quot;annotationProcessor &quot;androidx.room:room-compiler:2.2.0-alpha01&quot;</code></pre><p>如果多加一行implementation “androidx.room:room-compiler:2.2.0-alpha01”，会导致项目中多出很多没用的libs，包括com.ibm.icu:icu4j等，可能使得apk整整多出15M没用的文件。</p><hr><p><a href="https://blog.csdn.net/wangliblog/article/details/56834439">让APK只包含指定平台的so库（abi）</a></p><p>第一种：对每个要生成的渠道包进行分别配置（在app下的build.gradle文件中配置）<br>第二种：全局配置（这种需求比较多，同样是在app下的build.gradle下配置）</p><hr><p>PriorityBlockingQueue：</p><p>PriorityBlockingQueue 是一个无界的并发队列。它使用了和类 java.util.PriorityQueue 一样的排序规则。你无法向这个队列中插入 null 值。所有插入到 PriorityBlockingQueue 的元素必须实现 java.lang.Comparable 接口。因此该队列中元素的排序就取决于你自己的 Comparable 实现</p><hr><p>使用SparseArray和ArrayMap代替HashMap</p><p>1、如果key的类型已经确定为int类型，那么使用SparseArray，因为它避免了自动装箱的过程，如果key为long类型，它还提供了一个LongSparseArray来确保key为long类型时的使用</p><p>2、如果key类型为其它的类型，则可使用ArrayMap</p><p>如果我们要兼容aip19以下版本的话，那么导入的包需要为v4包</p><hr><p>通过以下代码可以列出设备底层支持的编码格式</p><pre class="language-none"><code class="language-none">MediaCodecList codecList &#x3D; new MediaCodecList(MediaCodecList.ALL_CODECS);for (int i &#x3D; 0; i &lt; codecList.getCodecInfos().length; i++) &#123;      Log.d(TAG, &quot;编解码器: &quot; + codecList.getCodecInfos()[i].getName());&#125;</code></pre><hr><p>如果遇到硬编H264等一些视频编码时，编出来的数据显示正常，但晃动摄像头时数据量变大，带宽占用很高，设置低一点的码率也不起作用时。很可能是系统的编码器支持的不够好，可用上面的方式获取系统支持的编解码器有哪些，在new MediaCodec的时候使用MediaCodec.createByCodecName(“OMX.google.h264.encoder”)等一些固定的编解码器，再查看效果。(OMX.google.h264.encoder为软编)</p><hr><p>getChildFragmentManager()是fragment中的方法， 返回的是管理当前fragment内部子fragments的manager。<br>getFragmentManager()在activity和fragment中都有。getChildFragmentManager在fragment内嵌套fragment时使用。</p><hr><p>DataBinding中notifyPropertyChanged(int *)只会更新一个字段的数据，notifyChange()会更新所有字段数据。<br>DataBinding资源引用只限于控件本身，比如button的paddingLeft里可以用三元表达，因为paddingLeft是控件自带的，但是margin就不行，因为margin是控件组里的属性，不能使用dataBinding的功能，不然会报找不到ActivityBindingBindingImpl的错。</p><hr><p>Integer类取值和 int 类型取值一致，取值范围是从-2147483648 至 2147483647 ，包括-2147483648 和 2147483647，即-$$2^{31}$$ ~$$2^{31}$$ -1。</p><p>但是对于Integer类，java为了提高效率，初始化了-128–127之间的整数对象，因此Integer类取值-128–127的时候效率最高。</p><hr><p>Fork/Join 框架是java7中加入的一个并行任务框架，可以将任务分割成足够小的小任务，然后让不同的线程来做这些分割出来的小事情，然后完成之后再进行join，将小任务的结果组装成大任务的结果。</p><p>例如求一个文件夹的大小：</p><pre class="language-none"><code class="language-none">private static class FileSizeFinder extends RecursiveTask&lt;Long&gt; &#123;        final File file;        public FileSizeFinder(final File theFile) &#123;            file &#x3D; theFile;        &#125;        @Override        public Long compute() &#123;            long size &#x3D; 0;            if (file.isFile()) &#123;                size &#x3D; file.length();            &#125; else &#123;                final File[] children &#x3D; file.listFiles();                if (children !&#x3D; null) &#123;                    List&lt;ForkJoinTask&lt;Long&gt;&gt; tasks &#x3D; new ArrayList&lt;ForkJoinTask&lt;Long&gt;&gt;();                    for (final File child : children) &#123;                        if (child.isFile()) &#123;                            size +&#x3D; child.length();                        &#125; else &#123;                            tasks.add(new FileSizeFinder(child));                        &#125;                    &#125;                    for (final ForkJoinTask&lt;Long&gt; task : invokeAll(tasks)) &#123;                        size +&#x3D; task.join();                    &#125;                &#125;            &#125;            return size;        &#125;    &#125;    long size &#x3D; new ForkJoinPool().invoke(new FileSizeFinder(new File(&quot;&#x2F;home&quot;)));</code></pre><hr><p>Netty拆包：LengthFieldBasedFrameDecoder的使用</p><p>发送数据包长度 = 长度域的值 + lengthFieldOffset + lengthFieldLength + lengthAdjustment</p><p>lengthAdjustment： 长度域的值的补偿，长度域的值加上这个值之后的值是这个长度域后面还需要读取的字节数</p><p>使用LengthFieldBasedFrameDecoder时注意设置ByteOrder.LITTLE_ENDIAN或ByteOrder BIG_ENDIAN（默认值）</p><hr><p>在ConstraintLayout中设置控件的宽高时，尽量不在比例前加W或H，这样可以在横竖屏下都可以在屏内保持宽高比，不然控件边界可能会超出屏幕。</p><hr><p>Android Studio 在WiFi中启用adb工具</p><p>adb tcpip 5555 //端口设置，手机必须通过USB与电脑连接，之后可不用USB连接，也不用再次执行此命令<br>adb connect 192.168.1.1 //改成手机本地IP地址</p><p>在Terminal里输入即可。</p><p>从android11开始支持下面连接方式进行wifi调试：</p><p><a href="https://wiki.lineageos.org/how-to/adb-over-wifi">https://wiki.lineageos.org/how-to/adb-over-wifi</a></p><ul><li><strong>On your phone</strong></li></ul><ol><li>Go to the developer settings</li><li>Press <code>Enable Wireless debugging</code></li><li>Select <code>Pair device with pairing code</code></li></ol><p>You will see a dialog showing you IP address, port and a code.</p><ul><li><strong>On your computer</strong></li></ul><ol><li><p>Open a command line window</p></li><li><p>Type <code>adb pair &lt;ip&gt;:&lt;port&gt;</code> and replace <code>&lt;ip&gt;</code> and <code>port</code> with the data seen on the phone</p></li><li><p>You will be asked for the pairing code. Type it in and hit Enter</p></li><li><p>You will now see an output similar to <code>Successfully paired to &lt;ip&gt;:&lt;port&gt;</code></p><p>测试发现此方式只需连接一次，下次再连接时直接在手机上打开wifi调试就能自动连接电脑，重启手机后也是如此。</p></li></ol><hr><p>var是Java10里面的特性。用来定义局部变量</p><p>语法： <strong>var 变量名 = 初始值；</strong></p><p>1，var只能在<strong>方法内</strong>定义变量，不允许定义类的成员变量。<br>2，var 定义变量必须赋初始值。</p><hr><p>SQL语句中IN 操作符允许您在 WHERE 子句中规定多个值，比如选取 name 为 “Google” 或 “菜鸟” 的所有网站：</p><pre class="language-none"><code class="language-none">SELECT * FROM Websites WHERE name IN (&#39;Google&#39;,&#39;菜鸟&#39;);</code></pre><p>LIKE的意思是搜索列中的指定模式。比如：</p><pre class="language-none"><code class="language-none">SELECT * FROM Websites WHERE name LIKE &#39;G%&#39;;&#x2F;&#x2F;选取 name 以字母 &quot;G&quot; 开始的所有客户SELECT * FROM Websites WHERE name LIKE &#39;%oo%&#39;;&#x2F;&#x2F;选取 name 包含模式 &quot;oo&quot; 的所有客户</code></pre><hr><p>ViewBinding使用时如果遇到include，可以给include加一个id，然后：</p><pre class="language-none"><code class="language-none">binding &#x3D; MainFragmentBinding.inflate(inflater, container, false);toolbarBinding &#x3D; binding.toolbar;&#x2F;&#x2F;include里的toolbarreturn binding.getRoot();</code></pre><hr><p>Room数据库使用记录</p><table><thead><tr><th>OnConflictStrategy</th><th>释义</th></tr></thead><tbody><tr><td>OnConflictStrategy.REPLACE</td><td>冲突策略是取代旧数据同时继续事务</td></tr><tr><td>OnConflictStrategy.ROLLBACK</td><td>冲突策略是回滚事务</td></tr><tr><td>OnConflictStrategy.ABORT</td><td>冲突策略是终止事务</td></tr><tr><td>OnConflictStrategy.FAIL</td><td>冲突策略是事务失败</td></tr><tr><td>OnConflictStrategy.IGNORE</td><td>冲突策略是忽略冲突</td></tr></tbody></table><hr><p>TextView添加可点击网址时在String文件中加入：</p><pre class="language-perl" data-language="perl"><code class="language-perl"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"http://www.google.com"</span><span class="token operator">></span>Google<span class="token filehandle symbol">&lt;/a></span></code></pre><p>而不是用:</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://www.google.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Google<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span></code></pre><p>layout中的TextView添加</p><pre class="language-bash" data-language="bash"><code class="language-bash">android:linksClickable<span class="token operator">=</span><span class="token string">"true"</span></code></pre><p>代码中设置</p><pre class="language-none"><code class="language-none">textView.text &#x3D; HtmlCompat.fromHtml(getString(R.string.requestrootmessage),HtmlCompat.FROM_HTML_MODE_LEGACY)textView.movementMethod &#x3D; LinkMovementMethod.getInstance()</code></pre><hr><p>通过在 <code>&lt;service&gt;</code> 标签里将 <code>android:exported</code> 设置为 <code>false</code>。可以防止其他的程序来启动你的 Service。</p><hr><p>前台服务</p><p>新建一个服务。</p><pre class="language-none"><code class="language-none">public class ForegroundService extends Service &#123;  private static final int RESULT_CODE &#x3D; 0;  private static final int ID &#x3D; 1;  public ForegroundService() &#123; &#125;  @Override  public void onCreate() &#123;    super.onCreate();    Intent intent &#x3D; new Intent(this, MainActivity.class);    PendingIntent pendingIntent &#x3D; PendingIntent.getActivity(this, RESULT_CODE,                               intent, PendingIntent.FLAG_UPDATE_CURRENT);    NotificationCompat.Builder builder;    &#x2F;&#x2F; 兼容 Android 8.0    if (Build.VERSION.SDK_INT &gt;&#x3D; Build.VERSION_CODES.O) &#123;      String channelId &#x3D; &quot;foreground_service&quot;;      NotificationChannel channel &#x3D; new NotificationChannel(channelId,                               &quot;channel_1&quot;, NotificationManager.IMPORTANCE_HIGH);      channel.enableLights(true);      channel.setLightColor(Color.GREEN);      channel.setShowBadge(true);      NotificationManager notificationManager &#x3D;                                                     getSystemService(NotificationManager.class);      notificationManager.createNotificationChannel(channel);      builder &#x3D; new NotificationCompat.Builder(this, channelId);    &#125; else &#123;      builder &#x3D; new NotificationCompat.Builder(this);    &#125;    builder.setContentIntent(pendingIntent)      .setContentTitle(&quot;这是前台通知标题&quot;)      .setContentText(&quot;这是内容&quot;)      .setWhen(System.currentTimeMillis())      .setSmallIcon(R.mipmap.ic_launcher_round)      .setLargeIcon(BitmapFactory.decodeResource(getResources(),                                                  R.mipmap.ic_launcher))      .setPriority(NotificationManager.IMPORTANCE_HIGH)      .setDefaults(Notification.DEFAULT_SOUND);    startForeground(ID, builder.build());  &#125;  @Override  public int onStartCommand(Intent intent, int flags,                            int startId) &#123;    return super.onStartCommand(intent, flags, startId);  &#125;  @Override  public IBinder onBind(Intent intent) &#123;    return super.onBind(intent);  &#125;&#125;</code></pre><p>启动与停止前台服务</p><pre class="language-none"><code class="language-none">Intent foregroundIntent &#x3D; new Intent(this, ForegroundService.class);startService(foregroundIntent); &#x2F;&#x2F; 启动前台服务stopService(foregroundIntent); &#x2F;&#x2F; 停止前台服务</code></pre><hr><p><strong>黑白屏产生原因</strong>:当我们在启动一个应用时，系统会去检查是否已经存在这样一个进程，如果不存在，系统的服务会先检查startActivity中 息，然后在去创建进程，最后启动Acitivy，即冷启动。而启动出现白黑屏的问题，就是在这段时间内产生的。系统在绘制页面加载布局之 初始化窗口(Window)，而在进行这一步操作时，系统会根据我们设置的Theme来指定它的Theme 主题颜色，我们在Style中的设置就决定是白屏还是黑屏。</p><p>windowIsTranslucent和windowNoTitle，将这两个属性都设置成true (会有明显的卡顿体验，不推荐) 如果启动页只是是一张图片，那么为启动页专一设置一个新的主题，设置主题的android:windowBackground属性为启动页背景图即可 使用layer-list制作一张图片launcher_layer.xml，将其设置为启动页专一主题的背景，并将其设置为启动页布局的背景。</p><hr><p>String、StringBuffer、StringBuilder区别</p><p>String:字符串常量 不适用于经常要改变值得情况，每次改变相当于生成一个新的对象 StringBuffer:字符串变量 (线程安全)<br>StringBuilder:字符串变量(线程不安全) 确保单线程下可用，效率略高于StringBuffer</p><hr><p>Handler的原理</p><p>Android中主线程是不能进行耗时操作的，子线程是不能进行更新UI的。所以就有了handler，它的作用就是实现线程之间的通信。 handler整个流程中，主要有四个对象，handler，Message,MessageQueue,Looper。当应用创建的时候，就会在主线程中创建handler对象， 我们通过要传送的消息保存到Message中，handler通过调用sendMessage方法将Message发送到MessageQueue中，Looper对象就会不断的调用loop不断的从MessageQueue中取出Message交给handler进行处理。从而实现线程之间的通信。</p><hr><p>Flow收集数据需要放在单独协程中，因为flow.collect或collectLatest是挂起函数，执行完这个函数后后面的代码才能执行。</p><hr><p>使用paging3的时候，如果对本地数据库数据修改后，列表失效并重载，表现为闪烁后跳到第一项，可尝试修改为<code>enablePlaceholders = true</code></p><hr>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;strong&gt;双冒号运算&lt;/strong&gt;就是Java中的[方法引用],[方法引用]的格式是 &lt;strong&gt;类名::方法名。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;一般是用作Lambda表达式&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;例如&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;表达式:&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; data-language=&quot;text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;person -&gt; person.getName();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以替换成&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; data-language=&quot;text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Person::getName&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;表达式&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; data-language=&quot;text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;() -&gt; new HashMap&amp;lt;&gt;();&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以替换成&lt;/p&gt;
&lt;pre class=&quot;language-text&quot; data-language=&quot;text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HashMap::new&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种[方法引用]或者说[双冒号运算]对应的参数类型是Function&amp;lt;T,R&amp;gt; T表示传入类型，R表示返回类型。&lt;/p&gt;</summary>
    
    
    
    <category term="android" scheme="https://xtvj.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>不Root手机禁用系统应用</title>
    <link href="https://xtvj.github.io/2018/06/27/%E4%B8%8DRoot%E6%89%8B%E6%9C%BA%E7%A6%81%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8/"/>
    <id>https://xtvj.github.io/2018/06/27/%E4%B8%8DRoot%E6%89%8B%E6%9C%BA%E7%A6%81%E7%94%A8%E7%B3%BB%E7%BB%9F%E5%BA%94%E7%94%A8/</id>
    <published>2018-06-27T12:23:52.000Z</published>
    <updated>2019-03-23T09:24:38.000Z</updated>
    
    <content type="html"><![CDATA[<p>用的三星S7edge升级到了官方的Android8.0系统，更新后原来的Packages disabler pro不能用了，现在又没有Root的方案，想要禁用那些臃肿的系统软件就只能用adb方式了。</p><p>手机打开开发者模式，打开usb调试，手机连接电脑，电脑上配置好ADB环境。<br>执行以下命令<br>（注:由于禁用了系统自带的文件夹浏览器和网络浏览器，禁用前请先安装一个浏览器或文件管理器，以方便以后安装应用。也可用adb install安装应用。）</p><pre class="language-none"><code class="language-none">adb shellpm disable-user com.mobeam.barcodeServicepm disable-user com.sec.android.widgetapp.samsungappspm disable-user com.samsung.android.app.galaxyfinderpm disable-user com.samsung.android.themestorepm disable-user com.samsung.android.app.cocktailbarservicepm disable-user com.samsung.svoice.syncpm disable-user com.osp.app.signinpm disable-user com.google.android.onetimeinitializerpm disable-user com.google.android.ext.sharedpm disable-user com.android.wallpapercropperpm disable-user com.samsung.android.app.withtvpm disable-user com.samsung.android.smartmirroringpm disable-user org.simalliance.openmobileapi.servicepm disable-user com.samsung.android.easysetuppm disable-user com.sec.android.easyonehandpm disable-user com.sec.factorypm disable-user com.samsung.android.app.sbrowseredgepm disable-user com.samsung.android.wechatwifiservicepm disable-user com.sec.android.easyMover.Agentpm disable-user com.samsung.faceservicepm disable-user com.sec.android.widgetapp.easymodecontactswidgetpm disable-user com.sec.android.app.samsungappspm disable-user com.oupeng.max.sdkpm disable-user com.google.android.configupdaterpm disable-user com.sec.android.app.billingpm disable-user com.sec.android.daemonapppm disable-user com.sec.svepm disable-user com.dsi.ant.service.socketpm disable-user com.sec.android.AutoPreconfigpm disable-user com.sec.android.app.soundalivepm disable-user com.samsung.android.securitylogagentpm disable-user com.samsung.SMTpm disable-user com.samsung.android.drivelink.stubpm disable-user com.samsung.hongbaoassistantpm disable-user com.dsi.ant.sample.acquirechannelspm disable-user com.android.backupconfirmpm disable-user com.sec.android.app.SecSetupWizardpm disable-user com.sec.bcservicepm disable-user com.sec.android.uibcvirtualsoftkeypm disable-user com.samsung.android.sdk.professionalaudio.utility.jammonitorpm disable-user com.android.sharedstoragebackuppm disable-user com.android.printspoolerpm disable-user com.samsung.android.hmt.vrsvcpm disable-user com.samsung.storyservicepm disable-user com.android.dreams.basicpm disable-user com.sec.android.app.dictionarypm disable-user com.samsung.android.app.talkbackpm disable-user com.android.bipspm disable-user com.samsung.android.game.gametoolspm disable-user com.samsung.android.app.simplesharingpm disable-user com.samsung.android.service.peoplestripepm disable-user com.samsung.app.slowmotionpm disable-user com.sec.enterprise.mdm.vpnpm disable-user com.samsung.android.weatherpm disable-user com.dsi.ant.plugins.antpluspm disable-user com.samsung.android.personalpage.servicepm disable-user com.samsung.android.app.taskedgepm disable-user com.samsung.advp.imssettingspm disable-user com.sec.android.inputmethodpm disable-user com.samsung.android.app.advsounddetectorpm disable-user com.samsung.android.app.mirrorlinkpm disable-user com.samsung.android.opencalendarpm disable-user com.samsung.android.smpm disable-user com.google.android.partnersetuppm disable-user com.sec.android.diagmonagentpm disable-user com.trustonic.tuiservicepm disable-user com.samsung.hidden.chinapm disable-user com.sec.spp.pushpm disable-user com.dsi.ant.serverpm disable-user com.sec.android.app.myfilespm disable-user com.samsung.android.allshare.service.filesharepm disable-user com.sec.android.app.apexpm disable-user com.google.android.syncadapters.calendarpm disable-user com.sec.android.app.sbrowserpm disable-user com.android.dreams.phototablepm disable-user com.sec.android.service.healthpm disable-user com.samsung.safetyinformationpm disable-user com.samsung.app.highlightplayerpm disable-user com.sec.android.app.vepreloadpm disable-user com.samsung.android.keyguardwallpaperupdatorpm disable-user com.android.wallpaper.livepickerpm disable-user com.samsung.android.beaconmanagerpm disable-user com.sec.enterprise.mdm.services.simpinpm disable-user com.android.apps.tagpm disable-user com.samsung.networkuipm disable-user com.sec.android.soagentpm disable-user com.sec.android.app.quicktoolpm disable-user com.samsung.android.fmmpm disable-user com.samsung.android.mdmpm disable-user com.baidu.map.locationpm disable-user com.mobilesrepublic.sohu.launcherpm disable-user com.google.android.backuptransportpm disable-user com.sec.android.yellowpagepm disable-user com.samsung.android.scloudpm disable-user com.sec.app.RilErrorNotifierpm disable-user com.samsung.android.spayfwpm disable-user com.samsung.android.svoicepm disable-user com.android.bookmarkproviderpm disable-user com.samsung.app.newtrimpm disable-user com.samsung.android.spaypm disable-user com.samsung.android.bluelightfilterpm disable-user com.samsung.android.bbc.bbcagentpm disable-user com.samsung.android.voicewakeuppm disable-user com.sec.android.splitsoundpm disable-user com.samsung.android.productsearchpm disable-user com.wssnpspm disable-user com.samsung.android.app.watchmanagerstubpm disable-user com.policydmpm disable-user com.samsung.android.svoiceimepm disable-user com.samsung.android.mateagentpm disable-user com.google.android.apps.pdfviewerpm disable-user com.samsung.android.widgetapp.briefingpm disable-user com.android.wallpaperbackuppm disable-user com.sec.enterprise.knox.cloudmdm.smdmspm disable-user com.samsung.android.app.camera.sticker.stamp.preloadpm disable-user com.android.emergencypm disable-user com.sec.svoice.lang.en_USpm disable-user com.wssyncmldmpm disable-user com.sec.svoice.lang.zh_CNpm disable-user com.samsung.android.app.appsedgepm disable-user com.samsung.voiceserviceplatformpm disable-user com.samsung.aasaservicepm disable-user com.samsung.android.allshare.service.mediasharepm disable-user com.android.bluetoothpm disable-user com.samsung.android.app.clipboardedgepm disable-user com.sec.android.app.magnifierpm disable-user com.sec.android.widgetapp.webmanualpm disable-user com.samsung.android.coreappspm disable-user com.samsung.android.video</code></pre><p>如果想重新启用某个软件，找到软件的包名，执行“pm enable 包名”就可以启用软件了。<br>如：</p><pre class="language-none"><code class="language-none">adb shell pm enable com.sec.android.inputmethod</code></pre><p>把包名换成你想恢复的包名就行了。</p><p>如果你的手机是安卓7.0以前的版本，在禁用手机应用的时候用pm disable，如果是7.0或7.0以上，就用pm disable-user。</p><p>附：ADB和Fastboot for Windows 工具下载<br><a href="https://dl.google.com/android/repository/platform-tools-latest-windows.zip">https://dl.google.com/android/repository/platform-tools-latest-windows.zip</a><br>可以直接解压，在得到的文件夹内按shift+ 右键。选“在此处打开命令窗口”，打开cmd执行代码。<br>也可参考网上的教程：<br><a href="https://blog.csdn.net/u013250071/article/details/78416274">https://blog.csdn.net/u013250071/article/details/78416274</a><br><a href="https://blog.csdn.net/class_brick/article/details/72512982">https://blog.csdn.net/class_brick/article/details/72512982</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用的三星S7edge升级到了官方的Android8.0系统，更新后原来的Packages disabler pro不能用了，现在又没有Root的方案，想要禁用那些臃肿的系统软件就只能用adb方式了。&lt;/p&gt;
&lt;p&gt;手机打开开发者模式，打开usb调试，手机连接电脑，电脑上配置</summary>
      
    
    
    
    
    <category term="Root" scheme="https://xtvj.github.io/tags/Root/"/>
    
  </entry>
  
  <entry>
    <title>温习知识点记录</title>
    <link href="https://xtvj.github.io/2018/06/23/%E6%B8%A9%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2018/06/23/%E6%B8%A9%E4%B9%A0%E7%9F%A5%E8%AF%86%E7%82%B9%E8%AE%B0%E5%BD%95/</id>
    <published>2018-06-23T10:30:55.000Z</published>
    <updated>2020-07-17T19:46:18.000Z</updated>
    
    <content type="html"><![CDATA[<h1>RecyclerView</h1><h6 id="RecyclerView局部刷新闪烁问题">RecyclerView局部刷新闪烁问题</h6><p>在Adapter中重载带三个参数的onBindViewHolder方法，让其调用带两个参数的onBindViewHolder方法<br>在更新局部数据的时候用notifyItemChanged(position, poyload：1);<br>参考：<a href="http://wetest.qq.com/lab/view/176.html">http://wetest.qq.com/lab/view/176.html</a></p><h1>Fragment</h1><h6 id="FragmentPageAdapter和FragmentPageStateAdapter的区别">FragmentPageAdapter和FragmentPageStateAdapter的区别</h6><p>FragmentPageAdapter在每次切换页面的的时候，是将Fragment进行分离，适合页面较少的Fragment使用以保存一些内存，对系统内存不会多大影响<br>FragmentPageStateAdapter在每次切换页面的时候，是将Fragment进行回收，适合页面较多的Fragment使用，这样就不会消耗更多的内存</p><h1>SharedPreferences</h1><p>getStringSet的返回值不能直接修改<br>参考：<a href="https://www.jianshu.com/p/7a880ec4ae52">https://www.jianshu.com/p/7a880ec4ae52</a></p><h1>ConstraintLayout</h1><p>相对于子布局Cl与Rl属性对照</p><table><thead><tr><th>CL属性</th><th>RL属性</th></tr></thead><tbody><tr><td>layout_constraintLeft_toLeftOf</td><td>layout_alignLeft</td></tr><tr><td>layout_constraintLeft_toRightOf</td><td>layout_toRightOf</td></tr><tr><td>layout_constraintRight_toLeftOf</td><td>layout_toLeftOf</td></tr><tr><td>layout_constraintRight_toRightOf</td><td>layout_alignRight</td></tr><tr><td>layout_constraintTop_toTopOf</td><td>layout_alignTop</td></tr><tr><td>layout_constraintTop_toBottomOf</td><td>layout_below</td></tr><tr><td>layout_constraintBottom_toTopOf</td><td>layout_above</td></tr><tr><td>layout_constraintBottom_toBottomOf</td><td>layout_alignBottom</td></tr><tr><td>layout_constraintBaseline_toBaselineOf</td><td>layout_alignBaseline</td></tr><tr><td>layout_constraintStart_toEndOf</td><td>layout_toEndOf (API 17)</td></tr><tr><td>layout_constraintStart_toStartOf</td><td>layout_alignStart (API 17)</td></tr><tr><td>layout_constraintEnd_toStartOf</td><td>layout_toStartOf (API 17)</td></tr><tr><td>layout_constraintEnd_toEndOf</td><td>layout_alignEnd (API 17)</td></tr></tbody></table><p>相对于父布局Cl与Rl属性对照</p><table><thead><tr><th>CL属性</th><th>RL属性</th></tr></thead><tbody><tr><td>layout_constraintTop_toTopOf=”parent”</td><td>layout_alignParentTop=”true”</td></tr><tr><td>layout_constraintBottom_toBottomOf=”parent”</td><td>layout_alignParentBottom=”true”</td></tr><tr><td>layout_constraintLeft_toLeftOf=”parent”</td><td>layout_alignParentLeft=”true”</td></tr><tr><td>layout_constraintRight_toRightOf=”parent”</td><td>layout_alignParentRight=”true”</td></tr><tr><td>layout_constraintStart_toStartOf=”parent”</td><td>layout_alignParentStart=”true”</td></tr><tr><td>layout_constraintEnd_toEndOf=”parent”</td><td>layout_alignParentEnd=”true”</td></tr><tr><td>layout_constraintLeft_toLeftOf=”parent” layout_constraintRight_toRightOf=”parent”</td><td>layout_centerHorizontal=”true”</td></tr><tr><td>layout_constraintTop_toTopOf=”parent” layout_constraintBottom_toBottomOf=”parent”</td><td>layout_centerVertical=”true”</td></tr><tr><td>layout_constraintLeft_toLeftOf=”parent” layout_constraintRight_toRightOf=”parent” layout_constraintTop_toTopOf=”parent” layout_constraintBottom_toBottomOf=”parent”</td><td>layout_centerInParent=”true”</td></tr></tbody></table><p>在设置了各类居中属性的基础上，通过layout_constraintHorizontal_bias和layout_constraintVertical_bias两个属性，可以简单直观的完成间距比例的设置。</p><p>chain是CL中新加入的控件与控件间的关系。组成chain的多个控件，可以在同一方向上更加方便的完成复杂的布局要求</p><p><img src="https://xtvj.github.io/images/img.jpg" alt="img"></p><h1>RelativeLayout</h1><p>经常会有同学在RelativeLayout中使用include标签<br>但是却发现include进来的控件无法用layout_alignParentBottom=&quot;true&quot;之类的标签来调整。这个真的非常恼火。其实解决方法非常简单，只要你在include的时候同时重载下layout_width和layout_height这两个标签就可以了。如果不重载，任何针对include的layout调整都是无效的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1&gt;RecyclerView&lt;/h1&gt;
&lt;h6 id=&quot;RecyclerView局部刷新闪烁问题&quot;&gt;RecyclerView局部刷新闪烁问题&lt;/h6&gt;
&lt;p&gt;在Adapter中重载带三个参数的onBindViewHolder方法，让其调用带两个参数的onBindViewHol</summary>
      
    
    
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
  </entry>
  
  <entry>
    <title>一些有道理的话</title>
    <link href="https://xtvj.github.io/2018/05/19/%E4%B8%80%E4%BA%9B%E6%9C%89%E9%81%93%E7%90%86%E7%9A%84%E8%AF%9D/"/>
    <id>https://xtvj.github.io/2018/05/19/%E4%B8%80%E4%BA%9B%E6%9C%89%E9%81%93%E7%90%86%E7%9A%84%E8%AF%9D/</id>
    <published>2018-05-19T08:06:49.000Z</published>
    <updated>2021-10-20T15:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<ul><li>人类容易拥有一个心理偏见，就是【喜好扭曲】，包括格外喜欢自己、自己这类人、自己的知识架构、以及非常容易被自己喜欢的人误导的倾向。以及另一方面的，【厌恶扭曲】，即不愿意从不喜欢的人那里学习的一种倾向。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;ul&gt;
&lt;li&gt;人类容易拥有一个心理偏见，就是【喜好扭曲】，包括格外喜欢自己、自己这类人、自己的知识架构、以及非常容易被自己喜欢的人误导的倾向。以及另一方面的，【厌恶扭曲】，即不愿意从不喜欢的人那里学习的一种倾向。&lt;/li&gt;
&lt;/ul&gt;
</summary>
      
    
    
    
    
    <category term="others" scheme="https://xtvj.github.io/tags/others/"/>
    
  </entry>
  
  <entry>
    <title>Linux系统使用时的一些建议与记录</title>
    <link href="https://xtvj.github.io/2017/05/12/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E4%B8%8E%E8%AE%B0%E5%BD%95/"/>
    <id>https://xtvj.github.io/2017/05/12/Linux%E7%B3%BB%E7%BB%9F%E4%BD%BF%E7%94%A8%E6%97%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE%E4%B8%8E%E8%AE%B0%E5%BD%95/</id>
    <published>2017-05-12T15:12:27.000Z</published>
    <updated>2020-07-13T08:50:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言">前言</h2><p>很早以前就尝试用Linux系统替代Windows来作日常使用了。当时不怎么会搞系统引导，装了Linux用不了Windows，便只在笔记本上装Linux用。后来在维基百科上看到说LinuxMint是排名第一的Linux发行版系统。便下了在虚拟机上试用，发现cinnamon版的LinuxMint可以自动引导硬盘的Win系统。现在一直在使用这个版本，系统真心好用。便有此记录。</p><hr><h2 id="软件推荐">软件推荐</h2><h5 id="浏览器：">浏览器：</h5><p><a href="https://www.google.com/chrome/browser/desktop/index.html">Google Chrome</a>　：　同Win系统下的设置。</p><h5 id="Office：">Office：</h5><p>LibreOffice　:　瞬间打开，比WPS之类的快很多，一般Linux发行版标配了。</p><h5 id="视频播放器：">视频播放器：</h5><p>SMPlayer　:　可以通过“首选项”DIY界面。</p><h2 id="一些命令及设置">一些命令及设置</h2><h5 id="查询软件安装路径">查询软件安装路径</h5><p>​    在Linux操作系统中查看软件安装路径是通过whereis 命令，如查看php软件的安装路径时输入命令：</p><pre class="language-none"><code class="language-none">whereis php</code></pre><h5 id="切换java">切换java</h5><pre class="language-none"><code class="language-none">sudo update-alternatives --config javasudo update-alternatives --config javac</code></pre><h5 id="Subllime-Text-3-使用技巧">Subllime Text 3 使用技巧</h5><p>​矩形（垂直）选区：鼠标右键 + Shift</p><h5 id="列出系统中安装的软件">列出系统中安装的软件</h5><pre class="language-none"><code class="language-none">sudo dpkg -l</code></pre><h5 id="Rime安装五笔输入法">Rime安装五笔输入法</h5><pre class="language-none"><code class="language-none">sudo apt-get install fcitx-rime</code></pre><p>​然后重启或者注销一次，在 设置 -› 文本输入 里面添加 “中州韵(Fcitx)” 就可以使用了。但是默认是没有五笔输入法的需要安装一下：（注：不同发行版可能要复制到不同的位置。）</p><pre class="language-none"><code class="language-none">sudo apt-get install librime-data-wubicp &#x2F;usr&#x2F;share&#x2F;rime-data&#x2F;wubi86.schema.yaml ~&#x2F;.config&#x2F;fcitx&#x2F;rime&#x2F;cp &#x2F;usr&#x2F;share&#x2F;rime-data&#x2F;wubi_pinyin.schema.yaml ~&#x2F;.config&#x2F;fcitx&#x2F;rime&#x2F;</code></pre><p>这样就安装完成了，编辑~/.config/fcitx/rime/default.yaml，在schema_list下方加入：</p><pre class="language-none"><code class="language-none">- schema: wubi_pinyin- schema: wubi86</code></pre><p>然后重新部署输入法，按F4就可以切换了。</p><h5 id="Linux与Windows系统时间不统一：">Linux与Windows系统时间不统一：</h5><pre class="language-none"><code class="language-none">sudo timedatectl set-local-rtc 1</code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;前言&lt;/h2&gt;
&lt;p&gt;很早以前就尝试用Linux系统替代Windows来作日常使用了。当时不怎么会搞系统引导，装了Linux用不了Windows，便只在笔记本上装Linux用。后来在维基百科上看到说LinuxMint是排名第一的Linux发行版系统。便下了</summary>
      
    
    
    
    <category term="Linux" scheme="https://xtvj.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xtvj.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Android6.0系统镜像编译</title>
    <link href="https://xtvj.github.io/2017/05/01/Android6.0%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91/"/>
    <id>https://xtvj.github.io/2017/05/01/Android6.0%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F%E7%BC%96%E8%AF%91/</id>
    <published>2017-05-01T12:16:45.000Z</published>
    <updated>2019-10-12T14:42:30.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述">概述</h4><p>下载过程参考<a href="https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/">清华源</a>、<a href="https://lug.ustc.edu.cn/wiki/mirrors/help/aosp">科大源</a>和<a href="https://source.android.com/source/downloading">谷歌</a>的使用说明。</p><h4 id="1、编译准备">1、编译准备</h4><p>系统：<a href="https://www.linuxmint.com/download.php">linuxmint-18.1-cinnamon-64bit</a>(LinuxMint是基于Ubuntu的Linux操作系统，是目前DistroWatch排行榜上第一名的Linux发行版，而且cinnamon版本在与Windows系统并存时可以自动引导Windows系统，十分方便，推荐使用。)</p><p>JDK：Android 5.x (Lollipop) - Android 6.0 (Marshmallow): Ubuntu - OpenJDK 7</p><p><a href="https://askubuntu.com/questions/761127/how-do-i-install-openjdk-7-on-ubuntu-16-04-or-higher">OpenJDK7安装方法</a>：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> add-apt-repository ppa:openjdk-r/ppa<span class="token function">sudo</span> <span class="token function">apt-get</span> update<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> openjdk-7-jdk</code></pre><p>repo工具</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> ~/bin<span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=~</span>/bin:<span class="token environment constant">$PATH</span><span class="token function">curl</span> https://storage.googleapis.com/git-repo-downloads/repo <span class="token operator">></span> ~/bin/repo<span class="token function">chmod</span> a+x ~/bin/repo</code></pre><p>Git</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span></code></pre><p>下载每月更新的初始化包:</p><p><a href="https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar">https://mirrors.tuna.tsinghua.edu.cn/aosp-monthly/aosp-latest.tar</a></p><p>Ubuntu16.0需要的依赖：</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libx11-dev:i386 libreadline6-dev:i386 libgl1-mesa-dev g++-multilib<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> -y <span class="token function">git</span> flex bison gperf build-essential libncurses5-dev:i386<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> tofrodos python-markdown libxml2-utils xsltproc zlib1g-dev:i386<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> dpkg-dev libsdl1.2-dev libesd0-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> git-core gnupg flex bison gperf build-essential<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">zip</span> <span class="token function">curl</span> zlib1g-dev gcc-multilib g++-multilib<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libc6-dev-i386<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32ncurses5-dev x11proto-core-dev libx11-dev<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libgl1-mesa-dev libxml2-utils xsltproc <span class="token function">unzip</span> m4<span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> lib32z-dev ccache</code></pre><h4 id="2、开始同步">2、开始同步</h4><p>在Linux系统里解压下载好的aosp-latest.tar，文件不能放在Windows的NTFS硬盘里，因为NTFS不支持Linux的文件权限管理。</p><p>通过以下命令同步源码，这里我用的是android-6.0.1_r79版本，可以在<a href="https://source.android.com/source/build-numbers#source-code-tags-and-builds">Source Code Tags and Builds</a>页面找你想要的版本。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> xf aosp-latest.tar <span class="token comment"># 解压文件，过程可能要很久，慢慢等吧</span><span class="token builtin class-name">cd</span> AOSP   <span class="token comment"># 解压得到的 AOSP 工程目录</span>repo init -u https://aosp.tuna.tsinghua.edu.cn/platform/manifest -b android-6.0.1_r79 <span class="token comment"># 使用清华源</span>repo <span class="token function">sync</span> <span class="token comment"># 正常同步一遍即可得到完整目录</span><span class="token comment"># 或 repo sync -l 仅checkout代码</span></code></pre><p>这个过程要很久，我是陆陆续续同步了一周才同步完成。过程中可以随时Ctrl + C来停止，下次直接运行</p><pre class="language-bash" data-language="bash"><code class="language-bash">repo <span class="token function">sync</span></code></pre><p>就可以自动接着同步了。同步完后，文件夹大概有70多G。</p><h4 id="3、编译">3、编译</h4> <pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">source</span> build/envsetup.shlunch <span class="token comment"># 接着需要输入相应的数字即可.我选的是1，也就是aosp_arm64-eng</span><span class="token function">make</span> <span class="token comment"># 开始编译，一般四小时</span><span class="token comment"># 成功后会有### make completed successfully (00:55:20(hh:mm:ss)) ###的提示</span>emulator <span class="token comment">#运行虚拟机，此时会加载刚才编译好的系统了。</span></code></pre><h4 id="4、模块编译">4、模块编译</h4><p>编译环境初始化(即执行source build/envsetup.sh)之后,我们可以得到一些有用的指令,除了上边用到的lunch,还有以下:</p> <pre class="language-bash" data-language="bash"><code class="language-bash">- croot: Changes directory to the <span class="token function">top</span> of the tree.- m: Makes from the <span class="token function">top</span> of the tree.- mm: Builds all of the modules <span class="token keyword">in</span> the current directory.- mmm: Builds all of the modules <span class="token keyword">in</span> the supplied directories.- cgrep: Greps on all <span class="token builtin class-name">local</span> C/C++ files.- jgrep: Greps on all <span class="token builtin class-name">local</span> Java files.- resgrep: Greps on all <span class="token builtin class-name">local</span> res/*.xml files.- godir: Go to the directory containing a file.</code></pre><p>使用mmm可以单独编译一个apk</p><p>Android系统自带的apk文件都在out/target/product/generic/system/apk目录下;</p><p>一些可执行文件(比如C编译的执行),放在out/target/product/generic/system/bin目录下;</p><p>动态链接库放在out/target/product/generic/system/lib目录下;</p><p>硬件抽象层文件都放在out/targer/product/generic/system/lib/hw目录</p><h3 id="编译中出现的错误">编译中出现的错误</h3><p>错误一:</p> <pre class="language-bash" data-language="bash"><code class="language-bash">clang: error: linker <span class="token builtin class-name">command</span> failed with <span class="token builtin class-name">exit</span> code <span class="token number">1</span> <span class="token punctuation">(</span>use -v to see invocation<span class="token punctuation">)</span>build/core/host_shared_library_internal.mk:51: recipe <span class="token keyword">for</span> target <span class="token string">'out/host/linux-x86/obj/lib/libart.so'</span> failedmake: *** <span class="token punctuation">[</span>out/host/linux-x86/obj/lib/libart.so<span class="token punctuation">]</span> Error <span class="token number">1</span><span class="token comment">#### make failed to build some targets (28:37 (mm:ss)) ####</span></code></pre><p>ubuntu16.04 clang编译器导致的问题，在ubuntu14.04上正常。目前可行的修改方法时在art/build/Android.common_build.mk ,中将host 默认编辑器使用clang关掉，找到WITHOUT_HOST_CLANG,关闭clang即可</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># Host.</span>ART_HOST_CLANG :<span class="token operator">=</span> <span class="token boolean">false</span>ifneq <span class="token punctuation">(</span><span class="token variable"><span class="token variable">$(</span>WITHOUT_HOST_CLANG<span class="token variable">)</span></span>,true<span class="token punctuation">)</span>  <span class="token comment"># By default, host builds use clang for better warnings.</span>  ART_HOST_CLANG :<span class="token operator">=</span> <span class="token boolean">false</span>endif</code></pre><p>错误二：</p><pre class="language-bash" data-language="bash"><code class="language-bash">/bin/bash: xmllint: 未找到命令build/core/Makefile:34: recipe <span class="token keyword">for</span> target <span class="token string">'out/target/product/generic/system/etc/apns-conf.xml'</span> failedmake: *** <span class="token punctuation">[</span>out/target/product/generic/system/etc/apns-conf.xml<span class="token punctuation">]</span> Error <span class="token number">127</span><span class="token comment">#### make failed to build some targets (03:57:00 (hh:mm:ss)) ####</span></code></pre><p>安装xmllint就可以了。</p><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span>  libxml2-utils</code></pre><h3 id="导入源码到Android-Studio">导入源码到Android Studio</h3><p>在导入到Android Studio之前，还需要进行一些处理。首先是要编译idegen模块，使用如下命令:</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ mmm development/tools/idegen/</code></pre><p>m、mm、mmm命令可以让你只编译单独模块，而不用费大量的时间比编译整个Android系统。</p><p>如果你的shell和我一样使用的是zsh，而不是bash，使用mmm就会得到错误信息。因为oh-my-zsh是不支持mmm的，具体可以参见：Android source code build commend “mm or mmm” couldn’t use in oh-my-zsh，因此，这里只能切换回bash，切换回bash的命令是chsh -s /bin/bash。</p><p>当然如果你和我一样得到了错误信息-bash: mmm: command not found，那么就需要在源码目录下执行如下指令（点与build之间是有空格的）：. build/envsetup.sh</p><p>然后在根目录生成对应的android.ipr、android.iml IDEA工程配置文件。使用以下脚本：</p><pre class="language-bash" data-language="bash"><code class="language-bash">$ development/tools/idegen/idegen.sh</code></pre><p>大概半分钟后（视你的电脑配置决定），会在源码根目录下生成android.ipr和android.iml。</p><p>使用Android studio打开任意一个项目，然后选择File-&gt;Open，打开根目录下的android.ipr文件夹，然后等待漫长的index完成后，就可以方便查看源码了。</p><h3 id="推荐阅读的源码">推荐阅读的源码</h3><p>AOSP 项目这么庞大，就算是 Framework 部分也有够看上一阵子的，所以推荐从常用的看起，由浅及深，同时向横向和纵向深入阅读。</p><h5 id="Handler-Message-Looper">Handler-Message-Looper</h5><p>Handler 被称为 “异步提交器”，是 Android 开发入门教程必定谈及的东西，这也是 Activity 等组件的工作机制需要用到的东西，是“数据驱动” 框架的重要组成，作为阅读源码的入门最适合不过。</p><h5 id="Activity-和-Service">Activity 和 Service</h5><p>作为经常使用到的组件，阅读其源码的花费和带来的技术提高的性价比肯定是最高的，Service 可以不看，但是 Activity 总不能少吧。</p><h4 id="Fragment">Fragment</h4><p>还在认为 Fragment 是一个视图吗，还在认为 FragmentActivity 的界面有多个 Fragment 组成吗，看看 Fragment 和 FragmentManager 吧，了解下生命周期的本质到底是什么。</p><h5 id="View">View</h5><p>想自定义高级的 View 类吗，那总得知道 onMeasure/onLayout/onDraw 这些方法是怎么被调用的，了解 LayoutParams 是怎么工作的，知道调用 requestLayout 和 Invalidate 的时候有什么区别。</p><h5 id="MotionEvent">MotionEvent</h5><p>在懂的怎么自定义高级的 View 后，只能向用户显示界面，还得知道怎么与用户交互才能做出华丽的 UI。所以必须知道 TouchEvent 的分发和拦截的工作机制，起码也得知道其特点，才不会一直在困扰 “为什么无法监听用户的触摸事件”、“View 之间的触摸事件冲突了” 或者 “View 的滑动与点击事件冲突了” 之类的问题。</p><h5 id="LayoutInflator">LayoutInflator</h5><p>布局渲染器也是开发 Android UI 的时候经常用到的，不过 LayoutInflator 实例的创建方式有好几种，你至少得知道其之间的区别。还有，LayoutInflator 在渲染指定布局的时候，有 container 和 attachToRoot 等参数，阅读源码后很快能了解其区别。</p><h5 id="SurfaceView-和-TextureView">SurfaceView 和 TextureView</h5><p>阅读完 View 的工作机制后，就能理解为什么 View 在绘制复杂的 UI 效果时效率这么低，这时候就需要 SurfaceView 和 TextureView 了。理解双缓冲对 UI 更新效率的帮助，了解 SurfaceView 在视图叠加的时候的缺陷，了解 TextureView 在 Android Lollipop 之前的内容窜台 BUG，才能用正确姿势使用这俩。</p><h5 id="AsyncTask">AsyncTask</h5><p>异步任务也是 Android 开发经常遇到的问题，相比自己从 Thread 和 Handler 写起，被称为 “异步任务大师” 的 AsyncTask 类自然更受到许多小伙伴的喜欢。不过 AsyncTask 在早期的 Android 版本中差别甚大，需要做大量的适配工作，而且特别容易引起异步任务引用着组件的实例导致内存泄露从而引发 OOM 问题，所以不推荐直接使用 AsyncTask 类，不过强烈推荐阅读 AsyncTask 的源码学习 Google 优秀的异步任务设计理念。此外，如果真的要使用 AsyncTask，不要直接使用系统提供的 AsyncTask 类，AsyncTask 本身就是一个单一的 Java 类，没有耦合其他系统类，推荐自己从最新的 Android 版本中复制一份 AsyncTask 类的代码，自己维护，在项目中当做 Support 包一样使用，以规避其兼容性问题。</p><h5 id="Volley">Volley</h5><p>这个强烈推荐，是 Google 官方的异步任务框架，没有随 Android 发布，需要自己在 Framework 里下载代码。Volley 的中文意思就是 “并发”，阅读其源码能让你见识到原来异步任务框架也能写得这么低耦合和高扩扩展，其用“生产者 - 消费者” 模式来处理异步请求的框架会让人拍案叫绝。此外，Volley 框架是用于处理 Http 任务和 Image 加载任务，但是其优秀的异步控制思想也能运用与 File、Sqlite 等耗时任务的处理，当你能够自己写出类似 Volley 框架的代码时，说明你的 Android 技术已经有所突破。</p><h5 id="android-util">android.util.*</h5><p>“android.util.*” 包名下有许多优秀的实用类，大多是作为 Java 自带类的补充，比如数据结构类的 SparseArray、ArrayMap、ArraySet，用于加密的 Base64，用于处理屏幕分辨率自适应的 DisplayMetrics 和 TypedValue，用于时间换算的 TimeUtils，以及用于内存缓存的 LruCache，熟悉这些类对 Android 开发非常有帮助，也会让代码显得成熟。</p><h5 id="Context">Context</h5><p>阅读 Context 源码能帮助我们了解其工作机制，了解 Google 是怎么在 Java 代码上添加 Android 特性的，了解 Android 是怎么保存和获取 res 资源的，了解 ContextWrapper 和 Activity 这些 Context 有什么区别，了解 Context 设计的装饰者模式（Description Pattern）。</p><h5 id="ClassLoader">ClassLoader</h5><p>类加载器 ClassLoader 是 Android 虚拟机工作的基础，了解其 “双亲代理模式” 能让你更好的了解系统的类和你写的类是怎么工作的。Multi-Dex 和 ART 模式也和 ClassLoader 的工作机制息息相关。</p><h5 id="Binder">Binder</h5><p>Binder 是 Android 上 RPC（Remote Procedure Call Protocol）的实现，Android 系统许多功能就是居于 Binder 实现的，平时应用层对 Binder 的使用大多是在于和 Service 通讯的时候，不过，当我们需要使用 AIDL 功能的时候，就需要接触到 Binder 了。（推荐阅读原理即可，反正 C++ 驱动层我是看不下去了）</p><h5 id="WMS，AMS，PMS，NMS，IMS-等系统-Service">WMS，AMS，PMS，NMS，IMS 等系统 Service</h5><p>SystemServer 是 Android 的 Framework 层工作的核心，Android 系统启动过程包含从 Linux 内核加载到 Home 应用程序启动的整个过程。SystemServer 是 Zygnote 孵化的第一个进程，这个进程会启动许多 Framework 层功能需要用到的线程，比如用于管理窗口的 WindowManagerService，用于管理 Activity 的 ActivityManagerService，用于管理 APK 包信息的 PackageManagerService，用于管理网络的 NetworkManager，用于处理用户触摸的 InputManagerService 等，这些系统 Service 提供了 APP 运行时需要的大多系统功能，大多使用 “stub-server” 的模式进行交互，而且有大量的 JNI 的调用。这部分的源码比较适合从事 ROM 开发的人阅读，应用层的开发基本不会用到，但是这方面的只是能让我们对 Android Framework 层的工作机制有个大抵的认识。</p><h3 id="参考-：">参考 ：</h3><p>1、<a href="http://www.jianshu.com/p/367f0886e62b">自己动手编译Android源码(超详细)</a></p><p>2、<a href="http://kaedea.com/2016/02/09/android-about-source-code-how-to-read/">阅读 ANDROID 源码的一些姿势</a></p><p>3、<a href="http://wl9739.github.io/2016/05/09/Android%E6%BA%90%E7%A0%81%E7%9A%84%E4%B8%8B%E8%BD%BD%E3%80%81%E7%BC%96%E8%AF%91%E4%B8%8E%E5%AF%BC%E5%85%A5%E5%88%B0Android-Studio/">Android源码的下载、编译与导入到Android Studio</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;概述&lt;/h4&gt;
&lt;p&gt;下载过程参考&lt;a href=&quot;https://mirrors.tuna.tsinghua.edu.cn/help/AOSP/&quot;&gt;清华源&lt;/a&gt;、&lt;a href=&quot;https://lug.ustc.edu.cn/wiki/mirrors</summary>
      
    
    
    
    <category term="android" scheme="https://xtvj.github.io/categories/android/"/>
    
    
    <category term="android" scheme="https://xtvj.github.io/tags/android/"/>
    
  </entry>
  
</feed>
